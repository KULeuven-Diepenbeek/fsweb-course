[
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/html_basics/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nHyperText Markup language HTML staat voor \u0026lsquo;HyperText Markup Language\u0026rsquo; en is een manier om content te markeren zodat het door een technologie begrepen kan worden. HTML is essentieel voor menselijk begrijpbare webcontent. Je markeert tekstinhoud met tags/elements om structuur aan te brengen.\nElements, Tags en Attributes Een HTML element wordt gedefiniëerd een openingstag, elementinhoud en een sluitingstag. Een HTML tag wordt weergegeven met de naam van het element binnen in \u0026ldquo;\u0026lt; \u0026hellip; \u0026gt;\u0026rdquo; bv. \u0026lt;p\u0026gt;. Een sluitingstag bevat nog een \u0026ldquo;/\u0026rdquo; voor de element naam bv. \u0026lt;/p\u0026gt;. Elke openingstag moet meestal ook gevolgd worden door een sluitingstag van hetzelfde element bv. \u0026lt;p\u0026gt; ... \u0026lt;/p\u0026gt;. Een uitzondering op deze regel zijn een aantal self-closing elements die geen elementinhoud bevatten. Een self-closing element bevat dus maar één tag waarin de \u0026ldquo;/\u0026rdquo; na de elementnaam komt en voor de sluitende \u0026ldquo;\u0026gt;\u0026rdquo; bv. \u0026lt;img/\u0026gt;.\nEen element kan verschillende attributes bevatten die extra informatie over een HTML element bevatten. Deze attributen kunnen het gedrag of uiterlijk van een element wijzigen, de functionaliteit ervan definiëren of andere details specificeren, zoals de relatie met andere elementen of het gedrag als reactie op gebruikersinteracties. Attributen worden aan HTML-elementen toegevoegd met behulp van name-value pairs binnen de openingstag van het element. Enkele veelgebruikte HTML-attributen zijn. Een veelgebruikt attribuut is \u0026lsquo;id\u0026rsquo; dat je helpt een specifiek element terug te vinden met behulp van JavaScript bijvoorbeeld. Op volgende manier gebruik je attributen in HTML tags (Een element kan meerdere attributen bevatten):\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;...\u0026lt;/p\u0026gt; Een element kan meerdere andere elementen bevatten. Hier spreken we dan van nested elements, bv.:\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;...\u0026lt;/h1\u0026gt; \u0026lt;a\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; Structuur van een HTML-document Je kan eender welke simpele tekst- of code-editor gebruiken om HTML bestanden aan te maken of te bewerken (bv. notepad, notepad++, vscode, sublime text, atom, vim, nano \u0026hellip;). Een HTML bestand zou volgende hoofdstuctuur moeten volgen:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Doctype: Hiermee geven we weer welk type dit document is. In ons geval dus steeds html. html element: Het HTML element met de naam \u0026lsquo;html\u0026rsquo;. Dit wordt de root tag van het HTML bestand genoemd, want alle html code moet binnen de \u0026lt;html\u0026gt; en \u0026lt;/html\u0026gt; tags staan lang attribuut: Met het language attribuut geven we meer informatie mee aan de webbrowser door te vermelden dat de content op deze webpagina in het Engels (en) geschreven is. (Nederlands = nl) head element: dit is een container voor de volgende metadata: \u0026lt;title\u0026gt;, \u0026lt;style\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;link\u0026gt;, \u0026lt;script\u0026gt; and \u0026lt;base\u0026gt;. meta element: wordt gebruikt om de karakterset/encoding, paginabeschrijving, trefwoorden, auteur van het document en viewport settings te declareren. character encoding: dit verteld de webbrowser hoe de karakters gecodeerd zijn zodat hij ze correct kan decoderen. Tenzij je een goede reden hebt is de gebruikte codering normaal utf-8. body element: een element container die al de overige inhoud van het HTML bevat. De headers, paragrafen, de tekst \u0026hellip; Types van HTML elements Sectioning elements: elementen die worden gebruikt om de structuur van een webpagina te definiëren door secties van inhoud te scheiden. Bv. \u0026lt;header\u0026gt; en \u0026lt;footer\u0026gt;. Grouping elements: elementen die worden gebruikt om meerdere inhoudsitems te groeperen of te bundelen onder één overkoepelend element. Bv. \u0026lt;div\u0026gt; en \u0026lt;span\u0026gt;. Text-level semantics: dit verwijst naar de manier waarop HTML elements de betekenis en structuur van tekst op een webpagina definiëren. Deze elementen worden gebruikt om specifieke delen van de tekst te markeren en hun semantische betekenis aan te geven. Bv. \u0026lt;em\u0026gt; en \u0026lt;strong\u0026gt;. Een overzicht een deel HTML elementen Anchor element Mappenstructuur voor je webpagina\u0026rsquo;s root/\r|\r+--- html/\r|\r+--- index.html\r|\r+--- about/\r| |\r| +--- about.html\r|\r+--- contact/\r| |\r| +--- contact.html\r...\r+--- assets/\r|\r+--- images/\r|\r+--- image1.png\r... HTML vs HTML5 HTML5 is de nieuwere versie van HTML met een aantal nuttige voordelen. Zo is HTML5 zeer vrijgevend gezind in het weglaten van bepaalde attributen en gebruikt HTML5 default waarden voor attributen die nodig zijn maar niet specifiek uitgetyped werden. W Bijvoorbeeld:\n\u0026lt;link href=\u0026#34;CSS/main.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; HTML5:\n\u0026lt;link href=CSS/main.css rel=stylesheet \u0026gt; Merk op dat in het HTML5 voorbeeld geen \u0026ldquo;/\u0026rdquo; heeft voor het sluitende groter dan teken, geen quotes gebruikt voor de value van het attribuut \u0026lsquo;href\u0026rsquo; en \u0026lsquo;rel\u0026rsquo; en er geen attribuut \u0026rsquo;type\u0026rsquo; gedefinieerd is. HTML5 zal hier echter niet moeilijk over doen.\nIn het algemeen is het wel een goede strategie om je HTML bestand zo specifiek mogelijk te coderen om problemen in een later stadium te vermijden.\nAangezien HTML5 dus gewoon de nieuwere versie is van HTML gaan we dit gebruiken.\nCommon website layout Opdrachten Maak een HTML-bestand en noem het portfolio.html Geef de titel van je webpagina de naam \u0026ldquo; portfolio\u0026rdquo;. Voeg jezelf toe als auteur van de webpagina Gebruik het header element om de onderstaande structuur aan te brengen aan je webpagina. Expertise Over mij Mijn projecten Technische vaardigheden en CV Contact Gebruik de relevante html elementen om het volgende toe te voegen aan je webpagina: voeg boven de header expertise een welkomstbericht toe. (Voor inspiratie voor het tekstje kan je ChatGPT gebruiken, de vormgeving doe je ZELF). Emphasize een aantal inspirerende woorden door ze in het vetgedrukt/schuin te zetten. Voeg ook een mooie afbeelding toe die je online ophaalt. Gerbuik hiervoor het \u0026lsquo;figure\u0026rsquo; element en voeg een caption toe Plaats de welkomsttekst binnenin een div en geef die div de klassenaam \u0026lsquo;welcometext\u0026rsquo;. Geef in de Expertise sectie een lijst waarin je je eigen vaardigheden in de verf zet. (je kan ook inspiratie opdoen op andere portfolio websites). Plaats in de Expertise sectie ook een link naar de sectie Technische vaardigheden en CV Plaats in de \u0026lsquo;Over mij\u0026rsquo; je favoriete quote van je lievelingsfilm/-boek in de Over mij sectie. Gerbuik hier het juiste element voor. Geef ook wat meer informatie over jezelf en plaats minstens één belangrijke zin in een span en geef die de id \u0026lsquo;important-sentence\u0026rsquo;. Plaats hier ook een afbeelding (de afbeelding moet je lokaal hebben staan) Maak onder de sectie \u0026lsquo;Mijn projecten\u0026rsquo; subsecties voor alle projecten die je al eens gemaakt hebt. Bijvoorbeeld je project van ELSY van het eerste jaar, je PES project, eigen andere projecten … Onder technische vaardigheden maak je een tabel met je verschillende opleidingen in (naam opleiding, startjaar, eindjaar). Voeg ook een lijst met beheerste talen toe en link hier ergens naar volgende webpagina: https://detaalbrigade.nl/taalniveaus/ Breng wat meer structuur aan in je teksten met divs, paragrafen en line breaks. Voeg ook eens wat symbolen via hun htmlcode toe waar nuttig. Gebruik verschillende achtergrond kleurtjes om te bekijken hoe de verschillende structuren werken (doe dit ook voor je span). Gerbuik inputs boxen, knoppen, checkboxen, … om een contactformulier aan te maken. Je vindt hier ontelbare voorbeelden van op het internet. Neem nu je \u0026lsquo;Contact\u0026rsquo; sectie en plaats die in een nieuw bestand genaamd \u0026lsquo;contact.html\u0026rsquo; en plaats deze in de subfolder genaamd \u0026lsquo;contact\u0026rsquo;. Maak footer aan waarmee je navigeert naar je \u0026lsquo;contact\u0026rsquo; page van je website. Voeg in je head een link toe naar fa-icons zodat je die icoontjes kan gebruiken: \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\u0026quot;\u0026gt; Voeg aan je footer ook een link toe via een icoon naar je Github profiel en een icoon voor je linkedIn profiel (indien je dat hebt) "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/introductie/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "Info volgt nog. Check ook Toledo\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/css_basics/",
	"title": "CSS",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nCascading Style Sheet HTML alleen maakt een website niet visueel aantrekkelijk. CSS is verantwoordelijk voor dit deel. Met CSS-regels kun je ontwerpen hoe de afzonderlijke componenten die je eerder in HTML hebt gedefinieerd, moeten worden weergegeven. worden weergegeven. Je kan CSS dus gebruiken om het ontwerp en de lay-out van een webpagina te definiëren. Je kan bijvoorbeeld tekstkleuren, tekstgroottes, randen, achtergrondkleuren, kleurverlopen enzovoort definiëren, randen, achtergrondkleuren, kleurverlopen, enzovoort.\nCSS definiëren op verschillende niveaus Aparte file \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mystyle.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; In html \u0026lt;style\u0026gt; element \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; /*Write your CSS code here*/ \u0026lt;style\u0026gt; \u0026lt;/head\u0026gt; Inline \u0026lt;htmlElement style=\u0026#34;property1:value1 ; property2:value2;\u0026#34;\u0026gt; ... \u0026lt;/htmlElement\u0026gt; Syntax Selectors, Pseudo-classes en Pseudo-elements elementName {...;} .className {...;} #idName {...;} /*Dit is een comment*/ element:pseudo-classname {...;} /*e.g.: a:hover{...;}*/ element::pseudo-elementname {...;} /*e.g.: h1:before{...;}*/ /*Attribute selectors*/ element[attribute] {...;} element[attribute=\u0026#34;value\u0026#34;] {...;} element[attribute~=\u0026#34;value\u0026#34;] {...;} /*contains specific words*/ element[attribute|=\u0026#34;value\u0026#34;] {...;} /*specific value or followed by - */ element[attribute^=\u0026#34;value\u0026#34;] {...;} /*starts with specific value*/ element[attribute$=\u0026#34;value\u0026#34;] {...;} /*ends with specific value*/ element[attribute*=\u0026#34;value\u0026#34;] {...;} /*contains a specified value*/ Types of combinators:\ndescendant selector (space) specifies all descendants child selector (\u0026gt;) only goes one deep adjacent sibling selector (+) selects an element that is directly after another specific element. general sibling selector (~) selects all elements that are next siblings of a specified element. Margin, padding en outline Sizing Absolute: px, pt, pc, in, cm, mm Relative: %, em, rem, ex, ch, fr Viewport (define in head): vw, vh, vmin, vmax We gaan in 99% van de gevallen enkel gebruik maken van px, rem en % (af en toe em relatief t.o.v. font-size eigen element)!!!\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; Positioning Static: An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page. Static positioned elements are not affected by the top, bottom, left, and right properties. Relative: An element with position: relative; is positioned relative to its normal position. Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element. Fixes: An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. A fixed element does not leave a gap in the page where it would normally have been located. Absolute: An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). Absolute positioned elements are removed from the normal flow, and can overlap elements. Sticky: An element with position: sticky; is positioned based on the user\u0026rsquo;s scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \u0026ldquo;sticks\u0026rdquo; in place (like position:fixed). List of usefull properties #elementId { background-color: red; /*rgb(255,0,0) , #FF0000, hsl(0, 100%, 50%) , rgba(255,0,0,0.5), hsla(0, 100%, 50%, 0.5)*/ opacity: 0.3; /*Doorschijnbaarheid 0-1*/ background-image: url(\u0026#34;image.jpg\u0026#34;); background-repeat: repeat-x; /*repeat-y, no-repeat*/ background-position: right top; background-attachment: fixed; /*scroll*/ border-style: dotted; /*dashed, solid, double, groove, ridge, inset, outset, none, hidden*/ /*border-top-style, border-right-style, border-bottom-style, border-left-style*/ border-width: 5rem; /*top right bottom left*/ border-width: black; border-radius: 5px; margin: 10px; /*top right bottom left*/ /*margin-top, margin-right, margin-bottom, margin-left*/ padding: 10px; /*top right bottom left*/ /*padding-top, padding-right, padding-bottom, padding-left*/ height: 200rem; max-height: 20px; width: 80%; /*relative to parent*/ max-width: 60ch; outline: 1px solid red; /*width style color*/ outline-offset: 15px; color: black; /*Text color*/ text-align: center; /*left, right, justify*/ text-align-last: center; /*right, justify*/ direction: rtl; /*ltr*/ vertical-align: baseline; /*text-top, text-bottom, sub, super*/ text-decoration-line: overline; /*line-through, underline, overline underline*/ text-decoration-color: red; text-decoration-style: solid; /*double, dotted, dashed, wavy*/ text-decoration-thickness: 5px; text-transform: uppercase; /*lowecase, capitalize*/ text-indent: 5px; /*first line indent*/ letter-spacing: -2px; line-height: 0.8; word-spacing: 5rem; white-space: nowrap; text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue; /*horizontal vertical blur color, ...*/ font-family: \u0026#34;Times New Roman\u0026#34;, Times, serif; /*desired, fallback1, fallback2*/ font-style: normal; /*itallic, oblique*/ font-weight: normal; /*bold*/ font-size: 0.5rem; font-variant: normal; /*small-caps*/ overflow-x: scroll; /*hidden, auto, visible*/ overflow-y: scroll; /*hidden, auto, visible*/ display: inline; /*block, inline-block, contents, flex, grid*/ position: static; /*relative, fixed, absolute, sticky (to parent)*/ bottom: 0; right: 0; z-index: -1; /*lower = further in background*/ float: right; /*left, none, inherit*/ /*in parent*/ clear: left; /*right, none, inherit*/ box-sizing: content-box; /*border-box*/ /*IF display: flex*/ flex-direction: row; /*column, column-reverse, row-reverse*/ flex-wrap: wrap; /*nowrap, wrap-reverse*/ /*flex-flow: row wrap;*/ /*direction wrap*/ justify-content: flex-start; /*center, flex-end, space-around, space-between*/ align-items: stretch; /*baseline, flex-start, center, flex-end*/ align-content: space-between; /*space-around, stretch, center, flex-start, flex-end*/ /*IF display: grid*/ } ul { list-style-type: circle; /*square, upper-roman, lower-alpha, none*/ list-style-image: url(\u0026#39;sqpurple.gif\u0026#39;); list-style-position: outside; /*inside*/ } table { border-collapse: collapse; } tr:nth-child(even) {background-color: #f2f2f2;} input { outline: none; } a:link {...;} a:visited {...;} a:hover {...;} a:active {...;} /*COUNTERS*/ #containerElement { counter-reset: section; } element::before{ counter-increment: section; content: \u0026#34;Section \u0026#34; counter(section) \u0026#34;: \u0026#34;; } Icons \u0026lt;script src=\u0026#34;https://kit.fontawesome.com/yourcode.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- In the head --\u0026gt; \u0026lt;i class=\u0026#34;fas fa-cloud\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Text effects text-overflow: hoe moet verborgen overflowing content weergegeven worden?\nclip ellipsis overflow moet hidden zijn (werkt niet vij overflow visible) #textOverflow { text-overflow: clip; overflow: hidden; } #textOverflow2 { text-overflow: ellipsis; overflow: hidden; } word-wrap: om lange woorden op te breken en te wrappen naar de volgende regel\n#wordWrap { word-wrap: break-word; } word-break: hoe moeten lijnen text gebroken worden.\n#wordWrap { word-break: keep-all; } #wordWrap2 { word-break: break-all; } writing-mode: horizontaal of verticaal.\n#writingMode { writing-mode: horizontal; } #writingMode { writing-mode: vertical; } Calculations e.g.:\nwidth: calc(100% - 100px); width: max(50%, 300px); width: min(50%, 300px); CSS variables :root { --blue: #1e90ff; --white: #ffffff; } body { background-color: var(--blue); } Extra Andere CSS files importeren in de main.css\n@import url(\u0026#39;./animations.css\u0026#39;); Moet helemaal in het begin van je CSS-file staan\n!important: om alle andere styling te overschrijven.\nelement { background-color: red !important; } simple linear gradient: gebruik background-image property en niet background-color.\n#grad { background-image: linear-gradient(to right, red , yellow); /*direction, color-stop1, color-stop2, ...*/ } Divs, columns, User Interface\ndiv { column-count: 3; column-gap: 40px; column-width: 100px; column-rule-style: solid; column-rule-width: 1px; column-rule-color: lightblue; /*element inside the div*/ column-span: all; resize: horizontal; /*vertical, both*/ overflow: auto; } img:\nimg { border-radius: 8px; opacity: 0.5; filter: grayscale(100%); box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5); -webkit-box-reflect: below; /*above, left, right*/ object-fit: cover; /*contain, fill, none, scale-down*/ object-position: 80% 100%; -webkit-mask-image: url(img1.png); mask-image: url(img1.png); -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat; } Opdrachten Maak je footer fixed onderaan de pagina Voeg een afbeelding van jezelf (of) een stockfoto toe aan je over mij sectie en zorg ervoor dat de afbeelding steeds richts staat Maak een nav sectie die 2 anchor elementen heeft: 1 voor de home page en een voor de contact page. Gebruik volgende bron om je nav sectie te stijlen zodat je een verticale navigatie sectie hebt aan de linkerkant van je pagina die 100% van de hoogte in beslag neemt. Gebruik een input checkbox die je gefixed houd in de linkerboven hoek. Zorg ervoor dat je navigatie sectie verborgen wordt wanneer de checkbox niet is aangevinkt en getoond wordt wanneer je de checkbox aanduidt. Gebruik volgende bron om je formulier in je contact pagina te stijlen.. Gebruik volgende bron om de globale layout van je site te updaten. Zorg al voor een responsive design door al je font-sizes aan te passen aan een vaste font-size die zich aanpast aan de grootte van de pagina. Kies een leuke font voor je pagina en eventueel complementaire fonts voor speciale secties zoals quotes. (zorg ook voor fallback fonts) Gebruik icons in plaats van tekst in je navigation sectie. Geef je creativiteit de vrije loop om je site zo mooi mogelijk te maken. "
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "Wat is de frontend? De frontend bestaat uit alle code waarmee de gebruiker rechstreeks mee interageert (bekijkt, input ingeeft, \u0026hellip;) in zijn/haar lokale webbrowser. Deze code wordt initieel opgehaald van de server en gecached in de webbrowser.\nDe frontend wordt ook wel de client-side genoemd.\nWaaruit bestaat de frontend? De frontend bestaat uit:\nHTML code voor de structuur van de inhoud CSS code voor het stijlen van de inhoud JavaScript code zorgt voor interactie met de gebruiker Static vs dynamic websites Een statische website bestaat uit webpaginas met vaste inhoud die hetzelfde is voor elke gebruiker.\nEen dynamische website genereert webcontent op basis van gebruiker interacties. Dit wordt gebeurt door server-side (of client-side) scripts. De inhoud van de webpagina verschilt dus voor elke gebruiker op basis van hun interactie met de website.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/javascript_basics/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nJavaScript JavaScript wordt gebruikt om interactie en dynamische functionaliteit aan je website toe te voegen. Het stelt ontwikkelaars in staat om webpagina\u0026rsquo;s te manipuleren, gebruikersacties te verwerken en te communiceren met servers zonder de pagina opnieuw te laden. JavaScript is veelzijdig en wordt ondersteund door alle belangrijke webbrowsers. Het maakt deel uit van de frontend is vaak niet of minimaal aanwezig op statische websites.\nWat nog belangrijk is om te weten, is dat de JavaScript standaard (ECMAScript) beheerd wordt door Ecma International, vroeger ook wel de European Computer Manufacturers Association (ECMA) genoemd. Een overzicht van de historische details zijn terug te vinden op de JS wikipage.\nWe gaan er vanuit dat je al een basiskennis programmeren bezit. In deze sectie zoomen we vooral in op de interactie die JavaScript ons biedt met HTML-elementen en andere functionaliteiten die specifiek zijn voor het maken van websites.\nHoe JavaScript toevoegen aan je website Je kan JavaScipt rechtstreeks in je html-document toevoegen via het \u0026lt;script\u0026gt; element. Deze manier wordt echter niet aangeraden. Je kan het \u0026lt;script\u0026gt;-element toevoegen in de sectie head of in de body van je HTML-document. Het is echter aan te raden om scripts onderaan het \u0026lt;body\u0026gt;-element toe te voegen, omdat dit de laadtijd van een webpagina kan verbeteren. [bron]\n... \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; //Jouw code komt hier \u0026lt;/script\u0026gt; ... JavaScipts worden echter beter verzameld in een scripts-directory. Op die manier heb jee betere scheiding van verantwoordelijkheden tussen html en JavaScript (JS). Je kan ook zeer makkelijk verschillende JS-scripts aanmaken voor je verschillende webpaginas. Je kan hier weer het \u0026lt;script\u0026gt;-element voor gebruiken, maar dit keer laten we de content leeg en verwijzen we met behulp van het scr-attribuut naar de juiste JS-file.\n... \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;./path_to_your/javascript_file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... Een veelgebruikte directory structuur voor het beheren van al je client-side files ziet er zo uit.\nroot/\r|\r+--- index.html\r| +--- scripts/\r| |\r| +--- main.js\r| ...\r+--- styles/\r|\r+--- main.css\r...\r... Developper tools and logging Om onze JS code te debuggen gaan we veel gebruik maken van de developper tools die beschikbaar zijn in je browser. In google chrome kan je de develepper tools openen met F12. De plaats waar we de meeste tijd gaan doorbrengen in de console. We kunnen namelijk allerhande informatie laten printen naar de console. Dit kan op volgende manieren:\nconsole.log(\u0026#34;Ik ben een normaal log bericht\u0026#34;); console.debug(\u0026#34;Ik ben een debug bericht\u0026#34;); console.error(\u0026#34;Ik ben een error\u0026#34;); console.info(\u0026#34;Ik ben info\u0026#34;); console.warn(\u0026#34;Ik ben een warning\u0026#34;); In de developper console kan je dan ook filteren op de verschillende soorten logberichten.\nWebcontent inspecteren Om informatie over bepaalde content op te vragen moeten we eerst weten hoe we HTML-elementen kunnen opvragen om ze daarna te inspecteren.\nEén van de gemakkelijkste manieren om een specifiek element op te vragen is op basis van de id:\ndocument.getElementById(\u0026#34;idName\u0026#34;); //returns an HTMLObject Als je een element in een HTML-pagina wilt opvragen, begin je altijd met het refereren naar het documentobject. Andere manieren om een element te krijgen is via de klassenaam of de tagnaam. Hier wordt dan echter steeds een lijst greturned op basis van de volgorde in het HTML-bestand.\ndocument.getElementsByClassName(\u0026#34;className\u0026#34;); //returns an HTMLCollection document.getElementsByName(\u0026#34;valueOfAttributeName\u0026#34;); //returns an HTMLCollection document.getElementsByTagname(\u0026#34;tagName\u0026#34;); //returns an HTMLCollection Verder kan je ook CSS-selector syntax gebruiken om een element op te vragen. De querySelector-functie geeft telkens het eerste HTMLObject terug dat voldoet aan de query. De querySelectorAll-functie geeft een NodeList met alle objecten terug die voldoen aan de query.\ndocument.querySelector(\u0026#34;#idName\u0026#34;); //returns an HTMLObject document.querySelector(\u0026#34;.className\u0026#34;); //returns an HTMLObject document.querySelector(\u0026#34;tagName.className:not(.className) tagName[attibuteName=\u0026#39;attibuteValue\u0026#39;]\u0026#34;); //returns an HTMLObject document.querySelectorAll(\u0026#34;#idName\u0026#34;); //returns a NodeList Sommige functies geven een HTMLCollection terug terwijl anderen een NodeList teruggeven. Een NodeList bevat bovenop descendent HTML-elementen ook de stukken tekst die tussen andere eventuele HTML-elementen gebruikt worden. Dit wordt belangrijk bij het opvragen van children (HTMLCollection) of childNodes (NodeList)\nInformatie over elementen inspecteren Nu we een element kunnen opvragen, kunnen we meer specifieke informatie over dat element inspecteren zoals de waarde van attributen, textcontent, descendents \u0026hellip;\nconsole.log(html_object.innerText); console.log(html_object.textContent); console.log(html_object.innerHTML); console.log(html_object.children); console.log(html_object.childNodes); console.log(html_object.getAttributeNames()); console.log(html_object.getAttribute(\u0026#34;attributeName\u0026#34;)); console.log(html_object.getAttributeNode(\u0026#34;attributeName\u0026#34;)); console.log(html_object.style.fontsize); //Dit werkt niet altijd op deze manier wanneer er specifieke CSS styling werd toegepast. //Gerbuik dan volgende methode in de plaats: console.log(window.getComputedStyle(html_object, null).getPropertyValue(\u0026#39;font-size\u0026#39;)); Je kan de console gebruiken om te inspecteren welke attributen een HTML-element allemaal bevat. Bovendien kan je in de documentatie steeds terugvinden wat de return-typen zijn van de verschillende functie. Je kan echter ook zeer snel het type controleren met de JS-functie typeof naamObject.\nWanneer een attribuut of object niet gevonden wordt, wordt meestal undefined gereturned.\nWebcontent manipuleren Je kan nu ook snel content aanpassen door de attribuut waarde te veranderen:\nhtml_object.innerText = \u0026#34;nieweTekst\u0026#34;; html_object.innerText = \u0026#39;\u0026lt;h1 id=\u0026#34;nieuweId\u0026#34; \u0026gt; Nieuwe header \u0026lt;/h1\u0026gt;\u0026#39;; // Je kan dus zelfs dynamisch HTML-elementen toevoegen of verwijderen html_object.style.fontsize = \u0026#34;15px\u0026#34;; html_object.setAttribute(\u0026#34;attributeName\u0026#34;, \u0026#34;newValue\u0026#34;); //Examples voornaamInput_object.setAttribute(\u0026#34;value\u0026#34;, \u0026#34;Arne\u0026#34;); inputCheckbox_object.setAttribute(\u0026#34;checked\u0026#34;, \u0026#34;true\u0026#34;); Gebruiker interactie verwerken Je kan rechtstreeks in een HTML-element functies (of zelfs gewoon java code) toevoegen om uitgevoerd te worden bij bepaalde acties van de gebruiker.\n\u0026lt;button onclick=\u0026#34;functionName\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;console.log(\u0026#39;button clicked\u0026#39;)\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; Dit doe je echter beter in de JavaScript file zelf door eventListeners te koppelen aan de gewenste HTML-elementen. Een aantal voorbeelden vind je hieronder. Je kan onder andere een listener toevoegen voor click, mouseover, mouseout, mousemove \u0026hellip;\nhtml_object.addEventListener(\u0026#34;click\u0026#34;, functionName); // Je kan ook rechtrstreeks functies definiëren als parameter: html_object.addEventListener(\u0026#34;click\u0026#34;, function(){alert(\u0026#34;I was clicked\u0026#34;);}); // Of door gebruik te maken van de pijl notatie: html_object.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {alert(\u0026#34;I was clicked\u0026#34;);}); //Je kan ook eventListeners toevoegen aan je window window.addEventListener(\u0026#34;resize\u0026#34;, function() { console.log(\u0026#34;resized window\u0026#34;);}); Met alert, confirm en prompt kan je snel pop-up berichtjes toevoegen //alert alert(\u0026#34;Alert message, click \u0026#39;ok\u0026#39; to continue.\u0026#34;); //confirm var confirmOutput = confirm(\u0026#34;Confirm message, click \u0026#39;ok\u0026#39; or \u0026#39;cancel\u0026#39; to continue.\u0026#34;); console.log(confirmOutput) //prompt var promptOutput = prompt(\u0026#34;The prompt message\u0026#34;); console.log(promptOutput) Basis JavaScript syntax Variabelen var x = 1; // met \u0026#39;var\u0026#39; definiëer je een variabele die beschikbaar blijft binnen de functie scope. let y = \u0026#34;let\u0026#34;; // met \u0026#39;let\u0026#39; definiëer je een variabele die beschikbaar blijft binnen de block scope. (bv enkel binnenin die if-statement) const z = \u0026#34;Ik verander niet\u0026#34;; // met \u0026#39;const\u0026#39; definiëer je een variabele die niet meer verandert Types // Numbers: let length = 16; let weight = 7.5; // Strings: let color = \u0026#34;Yellow\u0026#34;; let lastName = \u0026#34;Johnson\u0026#34;; // Booleans let x = true; let y = false; // Object: const person = {firstName:\u0026#34;John\u0026#34;, lastName:\u0026#34;Doe\u0026#34;}; const person = { firstName: \u0026#34;John\u0026#34;, lastName : \u0026#34;Doe\u0026#34;, id : 5566, fullName : function() { return this.firstName + \u0026#34; \u0026#34; + this.lastName; } }; // Array object: const cars = [\u0026#34;Saab\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // Date object: const date = new Date(\u0026#34;2022-03-25\u0026#34;); If, switch, for, while en try-catch //IF-STATEMENT if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false } //SWITCH switch(expression) { case x: // code block break; case y: // code block break; default: // code block } //FOR-LOOP for (let i = 0; i \u0026lt; cars.length; i++) { text += cars[i] + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } //WHILE while (condition) { // code block to be executed } //TRY CATCH try { //Block of code to try } catch(err) { //Block of code to handle errors } finally { //Block of code to be executed regardless of the try / catch result } Functies en klassen definiëren //FUNCTIE function(parameter) { //mijn code return result; } //EXAMPLE Class class Car { constructor(name, year) { this.name = name; this.year = year; } age(x) { return x - this.year; } } const myCar = new Car(\u0026#34;Ford\u0026#34;, 2014); Content wegschrijven naar localstorage of sessionstorage Je kan met JavaScript ook data opslaan in je browser. Dit is steeds een key-value pair waarbij beide waarde Strings zijn. Wegschrijven naar localStorage behoudt de data tussen sessies. Wegschrijven naar sessionStorage behoudt de data tussen sessies NIET. Maak gebruik van JSON om gemakkelijk data objecten op te slaan:\n//Het op te slagen object var testObject = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3 }; //Opslaan in localStorage localStorage.setItem(\u0026#39;testObject\u0026#39;, JSON.stringify(testObject)); //Inladen vanuit localStorage var retrievedObject = localStorage.getItem(\u0026#39;testObject\u0026#39;); var retrievedTestObject = JSON.parse(retrievedObject); //idem voor sessionStorage Async functions, promises, await \u0026amp; fetch from api\u0026rsquo;s Soms wil je dingen opvragen of kan het een tijd duren voordat een functie een return geeft. Om te voorkomen dat je gedurende die tijd niet kan interageren met de website, moet je gebruik maken async functions. Ergens in je functie gebruik je dan het woord await zodat de rest van je funtie verder gaat wanneer je een return waarde hebt ontvangen. Tijdens het wachten kan dan andere code uitgevoerd worden.\nfunction resolveAfter2Seconds() { return new Promise((resolve) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#39;resolved\u0026#39;); }, 2000); }); } async function asyncCall() { console.log(\u0026#39;calling\u0026#39;); const result = await resolveAfter2Seconds(); console.log(result); // Expected output: \u0026#34;resolved\u0026#34; } asyncCall(); Een voorbeeld waarvoor je vaak de async function gebruikt is bij het gebruik van api\u0026rsquo;s om data op te halen/weg te schrijven:\nasync function cuteDogPicture() { fetch(\u0026#39;https://dog.ceo/api/breeds/image/random\u0026#39;) .then((response) =\u0026gt; { // Parameter \u0026#39;response\u0026#39; refers to the return of the function above this (fetch) return response.json(); }) .then((myContent) =\u0026gt; { // Parameter \u0026#39;myContent\u0026#39; refers to the return of the function above this document.innerHTML = \u0026#34;\u0026lt;img src=\u0026#39;\u0026#34; + myContent[\u0026#39;message\u0026#39;] + \u0026#34;\u0026#39;/\u0026gt;\u0026#34;; }); } window.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { cuteDogPicture() }); Canvas met p5.js Opdracht Voeg op minstens 2 plaatsen JavaScript toe aan je portfolio website. Ten eerste zorg je ervoor dat wanneer mensen op de \u0026lsquo;submit\u0026rsquo;-knop drukken in je contactenformulier dat je de data van de inputvelden op een correcte manier in een object variabele opslaat. Sla daarna de data op in je sessionStorage door gebruik te maken van JSON. Zorg er ook voor dat wanneer je je contactformulier opent het formulier al is ingevuld met de laatst opgeslagen gegevens indien ze bestaan.\nVoeg verder op home-pagina nog een extra sectie toe genaamd \u0026lsquo;Interactie met p5.js\u0026rsquo;. Gebruik de modules van de p5.js library om een canvas te tekenen en een leuke creatieve interactie te creëren met de bezoekers van je website. Doe dit bijvoorbeeld door een kleine animatie te starten die verandert op basis van de muis positie.\nVolgende les komen enkele studenten hun interactie met de portfolio webpagina kort voorstellen.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/extra/",
	"title": "Extra",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nExtra tips and tricks Alles is een Box in HTML (Box-model). In de mozilla firefox browser kan je live veranderingen aanbrengen aan. Je kan CSS variabelen overschrijven door van het Cascading-principe gebruik te maken. Dit wordt vooral handig wanneer we transitions bekijken in Advanced CSS\nJe kan CSS variabelen in andere CSS variabelen gebruiken.\nJe kan in de Calc-functie (CSS) verschillende units door elkaar gebruiken.\nJe kan een counter gebruiken om eigen hoofdingen te specialiseren.\nJe kan de focus-within pseudo klasse gebruiken om rechtstreeks te interageren met content in een dropdown menu.\nPlaats meerdere variabelen in een object wanneer je ze console.log()-ed om de namen van de variabelen weer te geven.\nGebruik de console.table() functie om meerdere dezelfde objecten in een lijst overzichtelijk te loggen.\nGebruik %c in een log-statement om CSS stylin toe te passen.\nGebruik console.trace() binnenin een functie om ook de hele stack trace te loggen.\nMaak gebruik van de backtick ` notatie in Strings om eenvoudig variabelen toe te voegen.\nExtra opdracht Bestudeer grondig de webpagina die gegenereerd wordt door intellij wanneer je testen uitvoert. Gebruik je eigen skills om nu een kopie te maken van deze webpagina, zonder naar de broncode te gaan kijken. Maak een eigen JSON-object aan waar de informatie van de testen inzit die je dan uitleest met JavaScript om de content van je webpagina dynamisch te genereren. file\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/frontend/css_advanced/",
	"title": "Advanced CSS",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nQuicktip Je css code spreiden over meerdere stylesheets is mogelijk door in je main.css andere CSS-bestanden te importeren. Je kan bijvoorbeeld al je animation klassen in een aparte animations.css plaatsen en dat bestand dan importeren met onderstaande code in je main.css:\n@import url(\u0026#39;./animations.css\u0026#39;); Moet helemaal in het begin van je CSS-file staan\nTransformations Met CSS-transformaties kun je elementen verplaatsen, roteren, schalen en scheef trekken. Volgende 2D-transformaties zijn beschikbaar:\ntranslate() rotate() scaleX() scaleY() scale() skewX() skewY() skew() matrix() Examples:\ndiv { transform: translate(50px, 100px); transform: rotate(20deg); transform: rotate(-20deg); transform: scale(2, 3); transform: scale(0.5, 0.5); /* transform: scaleX(2); transform: scaleY(3); */ transform: skew(20deg, 10deg); /* transform: skewX(20deg); transform: skewY(20deg); */ } Matrix De methode matrix() combineert alle 2D-transformatiemethoden in één. De matrix() methode neemt zes parameters, die wiskundige functies bevatten, waarmee je elementen kunt roteren, schalen, verplaatsen (vertalen) en schuin houden.\nDe parameters zijn als volgt: matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())\ndiv{ transform: matrix(1, -0.3, 0, 1, 0, 0); } Transitions Met CSS-transitions kun je de waarden van eigenschappen soepel veranderen gedurende een bepaalde tijd. We bespreken de volgende overgang properties:\ntransition transition-property transition-duration transition-timing-function transition-delay Om een transition effect te maken, moet je twee dingen specificeren:\nde CSS-property waaraan u een effect wilt toevoegen de duur van het effect Opmerking: Als het onderdeel duur niet wordt opgegeven, heeft de overgang geen effect, omdat de standaardwaarde 0 is. Om een transition te laten plaatsvinden, moet een element een verandering in state hebben en moeten voor elke state verschillende styles worden bepaald. De eenvoudigste manier om styles voor verschillende states te bepalen is door gebruik te maken van de :hover, :focus, :active en :target pseudo-klassen.\nExample:\ndiv { width: 100px; height: 100px; background: red; transition: width 2s; } div:hover { width: 300px; } Je kan de transition properties apart definiëren of allemaal samen in een shorthand:\ndiv { transition-property: width; transition-duration: 2s; transition-timing-function: linear; transition-delay: 1s; } /* Shorthand */ div { transition: width 2s linear 1s; } Voor de transition-timing-function zijn er een aantal mogelijkheden. (In de developper tools van je browser kan je met deze waarden spelen en de gewenste beziercurve kopiëren):\nease - specifies a transition effect with a slow start, then fast, then end slowly (this is default) linear - specifies a transition effect with the same speed from start to end ease-in - specifies a transition effect with a slow start ease-out - specifies a transition effect with a slow end ease-in-out - specifies a transition effect with a slow start and end cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function Animations Met CSS-animations laat je een element geleidelijk veranderen van de ene stijl naar de andere. Je kunt zoveel CSS-properties wijzigen als je wil, zo vaak je wil. We bespreken de volgende animation properties:\nanimation @keyframes animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode animation Om CSS-animations te gebruiken, moet je eerst een aantal keyframes opgeven voor de animatie. Keyframes geven aan welke stijlen het element op bepaalde momenten zal hebben.\n/* The animation code */ @keyframes example { from {background-color: red;} to {background-color: yellow;} } /* The element to apply the animation to */ div { width: 100px; height: 100px; background-color: red; animation-name: example; animation-duration: 4s; } Shorthand:\ndiv { animation-name: example; /*keyframe name*/ animation-duration: 5s; animation-timing-function: linear; /*linear, ease, ease-in, ease-out, ease-in-out*/ animation-delay: 2s; animation-iteration-count: infinite; animation-direction: alternate; /*normal, reverse, alternate, alternate-reverse*/ animation-fill-mode: forwards; /*none, forwards, basckwards, both*/ } /* Shorthand */ div { animation: example 5s linear 2s infinite alternate forwards; } animation-timing-function: zie transitions\nanimation-direction: -normal - The animation is played as normal (forwards). This is default -reverse - The animation is played in reverse direction (backwards) -alternate - The animation is played forwards first, then backwards -alternate-reverse - The animation is played backwards first, then forwards\nanimation-fill-mode: -none - Default value. Animation will not apply any styles to the element before or after it is executing -forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count) -backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period -both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\nVerschil met transitions CSS-animations definiëren complexe bewegingen met keyframes, zoals rotate of fade, terwijl CSS-transitions soepele veranderingen maken in elementeigenschappen, zoals grootte of kleur, tijdens gebeurtenissen zoals hover. Animaties gebruiken keyframes en kunnen oneindig herhalen, terwijl overgangen optreden bij eigenschapsveranderingen en meer geschikt zijn voor subtiele effecten. Beiden voegen interactiviteit en aantrekkelijkheid toe aan webpagina\u0026rsquo;s, maar hebben verschillende toepassingen.\nAnimation utility classes en dubbele classes Je gebruikt animation utility classes om de relatie tussen animatie en element te ontkoppelen en voor herbruikbaarheid.\n.fade-in { animation: fadeIn 0.5s ease-in forwards; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } @keyframes fadeAnimation { 0%, 50%, 100% {opacity: 1;} 25%, 75% {opacity: 0.5;} } Je gebruikt dubbele klasse notaties ter bescherming:\n.animatie.fade-in { animation: fadeIn 0.5s ease-in forwards; } Animation play state div:hover { animation-play-state: paused; /*running, initial, inherit*/ } Animatie klasse dynamisch toevoegen met JavaScript Opdrachten Exercise 1, 2, 3, 4: Er worden drie transitions getoond. Je hebt ongeveer 8 minuten om de transities zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nExercise 5, 6, 7, 8: Er worden drie animations getoond. Je hebt ongeveer 8 minuten om de animations zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nExercise 9, 10, 11, 12, 13, 14, 15: Er worden 7 transitions of animations getoond. Je hebt ongeveer 15 minuten om de voorbeelden zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nPortfolio website Fleur nu je eigen portfolio website op door wat transitions en animaties toe te voegen waar nuttig.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": "Full Stack Web Development Academiejaar 2023\u0026mdash;2024.\nPlanning nr datum onderwerp 01 do 15-02-2024 Introductie + HTML 02 vr 16-02-2024 HTML + Webbrowser tools 03 wo 21-02-2024 CSS 04 vr 23-02-2024 Javascript 05 wo 28-02-2024 Putting it all together + start Advanced CSS 06 do 29-02-2024 Advanced CSS 07 do 07-03-2024 Responsive Design (part 1) 08 vr 08-03-2024 Responsive Design (part 2) 09 do 14-03-2024 Svelte Kit 10 vr 15-03-2024 Svelte Kit 11 do 21-03-2024 Svelte Kit 12 vr 22-03-2024 Svelte Kit 13 wo 27-03-2024 Svelte Kit 14 do 28-03-2024 Svelte Kit 15 wo 17-04-2024 Svelte Kit 16 vr 19-04-2024 Svelte Kit 17 ma 22-04-2024 Laravel 18 wo 24-04-2024 Laravel 19 ma 29-04-2024 Laravel 20 vr 03-05-2024 Laravel 21 ma 06-05-2024 Laravel 22 ma 13-05-2024 Laravel 23 vr 17-05-2024 Laravel 24 wo 22-05-2024 Laravel Cursus noties Er worden telkens blokken van 2 uur ingepland voor dit vak. Er zijn geen traditionele hoorcolleges voorzien. Alle noties zijn via deze website te raadplegen (tenzij anders vermeld).\nInhoudsopgave Introductie Frontend: HTML CSS Javascript Webbrowser tools Advanced CSS Responsive Design Syllabus Lesgevers: Coördinerend Verantwoordelijke: prof. dr. Kris Aerts (kris.aerts@kuleuven.be) assistent lesgever: ing. Arne Duyver (arne.duyver@kuleuven.be) Kantoor: Technologiecentrum Diepenbeek, Groep ACRO. Cursusbeschrijving Dit opleidingsonderdeel focust op de hele web workflow. De twee belangrijke delen zijn:\nfrontend backend Voor de backend leer je gebruik maken van de frameworks:\nSvelte Kit Laravel Vereiste voorkennis Basiskennis van programmeren. Doelstellingen Zie ook Studiegids UHasselt\nDe context en het overzicht worden aangereikt in de eerste lessen van dit vak.\nAls rode draad doorheen de oefeningen maak je een eigen portfolio site aan.\nAls practicum wordt een grotere probleemstelling als project uitgewerkt. Alle aan te leren aspecten van full stack web development komen in dit project aan bod. Studenten kunnen facultatief buiten het practicum extra thematische oefeningen oplossen.\nKalender Zie Mytimetable UHasselt.\n"
},
{
	"uri": "https://kuleuven-diepenbeek.github.io/fsweb-course/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]