[
{
	"uri": "http://localhost:1313/fsweb-course/frontend/html_basics/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": "bron 1: HTML, CSS, Bootstrap \u0026amp; Blade. Vormgeving in Laravel. Cursus: Cloud Computing \u0026amp; Toepassingen - 2020/2021 - Kris Aerts bron 2: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 3: W3Schools\nHyperText Markup language HTML staat voor \u0026lsquo;HyperText Markup Language\u0026rsquo; en is een manier om text content te markeren zodat het door een programmeertaal of webbrowser begrepen kan worden. HTML is essentieel voor menselijk begrijpbare webcontent. Je markeert tekstinhoud met tags/elements om structuur en inhoud aan te brengen. HTML is dus een standaard voor het structuren van informatie via een markup-taal gebaseerd op XML, en kan in eender welke browser getoond worden zoals Firefox, Edge, Chrome, Safari, Opera, \u0026hellip;\nHet grote voordeel is dat we zelf geen software moeten gaan installeren de computer van gebruikers en dat we voortdurend updates aan de software kunnen aanbrengen zonder dat we deze expliciet moeten distribueren naar de eindgebruiker. Je kan HTML (en CSS) statisch schrijven of dynamisch laten genereren via een programmeertaal en bijhorend framework, zoals PHP en Laravel, Java en Tomcat, C# en ASP, Flask en Jinja, \u0026hellip;\nSamengevat is HTML de markup-taal waarmee we via tags informatie kunnen structuren.\nHTML beschrijft enkel de structuur, en géén vormgeving. Dat doen we in CSS.\nMerk ten slotte op dat HTML afgeleid is van XML en dat ook CSS een strikte structuur heeft. Om dit te controleren kan je o.a. volgende validators gebruiken:\nValidator voor HTML http://validator.w3.org/ Elements, Tags en Attributes Een HTML element wordt gedefiniëerd door een openingstag, elementinhoud en een sluitingstag. Een HTML tag wordt weergegeven met de naam van het element binnenin \u0026ldquo;\u0026lt; \u0026hellip; \u0026gt;\u0026rdquo; en bestaat steeds uit kleine letters bv. \u0026lt;p\u0026gt;. Een sluitingstag bevat nog een \u0026ldquo;/\u0026rdquo; voor de element naam bv. \u0026lt;/p\u0026gt;. Elke openingstag moet meestal ook gevolgd worden door een sluitingstag van hetzelfde element bv. \u0026lt;p\u0026gt; ... \u0026lt;/p\u0026gt;. Een uitzondering op deze regel zijn een aantal self-closing elements die geen elementinhoud bevatten. Een self-closing element bevat dus maar één tag waarin de \u0026ldquo;/\u0026rdquo; na de elementnaam komt en voor de sluitende \u0026ldquo;\u0026gt;\u0026rdquo; bv. \u0026lt;img src=\u0026quot;/img/html_syntax.png\u0026quot;/\u0026gt; of \u0026lt;br/\u0026gt;.\nHTML syntax and structure of an HTML element bron\rEen element kan verschillende attributes bevatten die extra informatie over een HTML element bevatten. Deze attributen kunnen het gedrag of uiterlijk van een element wijzigen, de functionaliteit ervan definiëren of andere details specificeren, zoals de relatie met andere elementen of het gedrag als reactie op gebruikersinteracties. Attributen worden aan HTML-elementen toegevoegd met behulp van name-value pairs binnen de openingstag van het element. Enkele veelgebruikte HTML-attributen zijn: href, src, style, \u0026hellip;\nOp volgende manier gebruik je attributen in HTML tags (Een element kan meerdere attributen bevatten en je zelf ook eigen attributen toevoegen):\n\u0026lt;p attributeName=\u0026#34;attributeValue\u0026#34;\u0026gt;...\u0026lt;/p\u0026gt; Twee belangrijke attributen zijn \u0026lsquo;id\u0026rsquo; en \u0026lsquo;class\u0026rsquo; die je helpen een specifiek element terug te vinden met behulp van CSS-selectors of JavaScript.\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; class=\u0026#34;specialeParagraafKlasse\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;...\u0026lt;/p\u0026gt; Een element kan maximaal één id hebben maar wel meerdere class namen.\nEen element kan meerdere andere elementen bevatten. Hier spreken we dan van nested elements, bv.:\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;...\u0026lt;/h1\u0026gt; \u0026lt;a\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; Structuur van een HTML-document Je kan eender welke simpele tekst- of code-editor gebruiken om HTML bestanden aan te maken of te bewerken (bv. notepad, notepad++, vscode, sublime text, atom, vim, nano \u0026hellip;). Een HTML bestand zou volgende hoofdstuctuur moeten volgen:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Doctype: Hiermee geven we weer welk type dit document is. In ons geval dus steeds html. html element: Het HTML element met de naam \u0026lsquo;html\u0026rsquo;. Dit wordt de root tag van het HTML bestand genoemd, want alle html code moet binnen de \u0026lt;html\u0026gt; en \u0026lt;/html\u0026gt; tags staan. Deze tags geven aan waar het html-document begint en eindigt. lang attribuut: Met het language attribuut geven we meer informatie mee aan de webbrowser door te vermelden dat de content op deze webpagina in het Engels (en) geschreven is. (Nederlands = nl) Binnen html zijn er slechts twee tags mogelijk: de \u0026lt;head\u0026gt; en de \u0026lt;body\u0026gt; voor respectievelijk informatie in de header die niet rechtstreeks voor de lezer bestemd is en anderzijds de body die de feitelijke inhoud van het document bevat. head element: dit is een container voor de volgende metadata: \u0026lt;title\u0026gt;, \u0026lt;style\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;link\u0026gt; and \u0026lt;base\u0026gt;. (eventueel ook \u0026lt;script\u0026gt;) meta element: wordt gebruikt om de karakterset/encoding, paginabeschrijving, trefwoorden, auteur van het document en viewport settings te declareren. character encoding: dit verteld de webbrowser hoe de karakters gecodeerd zijn zodat hij ze correct kan decoderen. Tenzij je een goede reden hebt is de gebruikte codering normaal utf-8. body element: een element container die al de overige inhoud van het HTML bevat. De headers, paragrafen, de tekst \u0026hellip; Types van HTML elements Sectioning elements: elementen die worden gebruikt om de structuur van een webpagina te definiëren door secties van inhoud te scheiden door de verschillende delen semantische betekenissen mee te geven. Bv. \u0026lt;header\u0026gt; en \u0026lt;footer\u0026gt;. Grouping elements: elementen die worden gebruikt om meerdere inhoudsitems te groeperen of te bundelen onder één overkoepelend element. Bv. \u0026lt;div\u0026gt; en \u0026lt;span\u0026gt;. Text-level semantics: dit verwijst naar de manier waarop HTML elements de betekenis en structuur van tekst op een webpagina definiëren. Deze elementen worden gebruikt om specifieke delen van de tekst te markeren en hun semantische betekenis aan te geven. Bv. \u0026lt;em\u0026gt; en \u0026lt;strong\u0026gt;. List of usefull elements (by type) \u0026lt;!-- This is a comment in HTML --\u0026gt; \u0026lt;!-- SECTIONING ELEMENTS --\u0026gt; \u0026lt;nav\u0026gt; The \u0026#39;nav\u0026#39; element is used to mark up a collection of links to external pages or sections within the current page. As well as being used for the main website navigation, the \u0026#39;nav\u0026#39; element is also a good fit for things like a table of contents, or a blogroll. \u0026lt;/nav\u0026gt; \u0026lt;header\u0026gt;Header for webpage\u0026lt;/header\u0026gt; \u0026lt;aside\u0026gt; The \u0026#39;aside\u0026#39; element is used to represent content that is tangibly related to the content surrounding it, but could be considered separate. This includes things like sidebars \u0026lt;/aside\u0026gt; \u0026lt;main\u0026gt; The \u0026#39;main\u0026#39; element should contain the main content for your web page. All of this content should be unique to the individual page, and should not appear elsewhere on the site. Any content that is repeated on multiple pages (logos, search boxes, footer links, etc.) should not be placed within the \u0026#39;main\u0026#39; element. You should only use one \u0026#39;main\u0026#39; element on a page, and it shouldn’t be placed within an \u0026#39;article\u0026#39;, \u0026#39;aside\u0026#39;, \u0026#39;header\u0026#39;, \u0026#39;footer\u0026#39;, or \u0026#39;nav\u0026#39; element. \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; the \u0026#39;header\u0026#39; element is used to represent the introductory content to an article or web page. This will usually contain a heading element as well as some metadata that’s relevant to the content, such as the post date of a news article for example. \u0026lt;h1\u0026gt;Largest Header\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Header 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Header 3\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Header 4\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;Header 5\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;Smallest Header\u0026lt;/h6\u0026gt; \u0026lt;/header\u0026gt; The \u0026#39;article\u0026#39; element should contain a piece of self-contained content that could be distributed outside the context of the page. This includes things like news articles, blog posts, or user comments. You can nest \u0026#39;article\u0026#39; elements within one another. In this case it’s implied that the nested elements are related to the outer \u0026#39;article\u0026#39; element. \u0026lt;aside\u0026gt;Tangibly related content\u0026lt;/aside\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;section\u0026gt; The \u0026#39;section\u0026#39; element is used to represent a group of related content. This is similar to the purpose of an \u0026#39;article\u0026#39; element with the main difference being that the content within a \u0026#39;section\u0026#39; element doesn’t necessarily need to make sense out of the context of the page. It’s advisable to use a heading element (\u0026#39;h1\u0026#39; – \u0026#39;h6\u0026#39;) to define the topic for the section. If you just need to group content together for styling purposes you should use a \u0026#39;div\u0026#39; element rather than a \u0026#39;section\u0026#39; \u0026lt;footer\u0026gt; The \u0026#39;footer\u0026#39; element is used to represent information about a section such as the author, copyright information, or links to related web pages. \u0026lt;address\u0026gt; This element is not for marking up postal address, but rather for representing the contact information for an article or web page. This could be a link to the author’s website or their email address. \u0026lt;/address\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/section\u0026gt; Based on content and design, articles can contain sections and/or sections can contain articles. \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; Footer for webpage \u0026lt;address\u0026gt; Link to email author webpage \u0026lt;/address\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;!-- GROUPING ELEMENTS --\u0026gt; \u0026lt;div\u0026gt; Used for grouping blocks for easy styling. \u0026lt;span\u0026gt;Used for grouping inline content\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Defines a paragraph\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;Defines preformatted text\u0026lt;/pre\u0026gt; \u0026lt;blockquote cite=\u0026#34;citation_source\u0026#34;\u0026gt; Specifies a section that is quoted from another source \u0026lt;/blockquote\u0026gt; \u0026lt;q\u0026gt;For inline (short) quotations\u0026lt;/q\u0026gt; \u0026lt;ol type=\u0026#34;I\u0026#34; start=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;!-- type=\u0026#34;1|a|A|i|I\u0026#34; --\u0026gt; \u0026lt;!-- Defines an ordered list. An ordered list can be numerical or alphabetical. --\u0026gt; \u0026lt;li\u0026gt;List Item I\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List Item II\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List Item III\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- Defines an unordered list. Used the same a \u0026#39;ol\u0026#39; --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;table\u0026gt; \u0026lt;!-- Defines an HTML table --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;!-- Defines a table row --\u0026gt; \u0026lt;th\u0026gt;Defines a table head for column\u0026lt;/th\u0026gt; \u0026lt;!-- --\u0026gt; \u0026lt;th\u0026gt;Header column 2\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Defines a table cell\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Cell row 2, column 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Cell row 3, column 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Cell row 3, column 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;img_source_web/or/local_file.png\u0026#34; alt=\u0026#34;alternative text if img src not found\u0026#34; width=\u0026#34;auto\u0026#34; max-width=\u0026#34;500px\u0026#34;/\u0026gt; \u0026lt;!--src=\u0026#34;./voorbeeld/realtive/path/img.jpg | C://voorbeeld/absolute/path/img.jpg | https://www.voorbeeld-url.com/img.jpg\u0026#34; --\u0026gt; \u0026lt;figcaption\u0026gt;Image caption\u0026lt;/figcation\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;!-- TEXT-LEVEL SEMANTICS --\u0026gt; All simple text is displayed without line breaks. But \u0026#39;br\u0026#39; creates \u0026lt;br/\u0026gt; a line break.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;a href=\u0026#34;link_to_webpage/or/local_file\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Link text\u0026lt;a\u0026gt; \u0026lt;!-- target=\u0026#34;_blank | _self | _parent | _top\u0026#34; --\u0026gt; \u0026lt;!--href=\u0026#34;./voorbeeld/realtive/path | C://voorbeeld/absolute/path | https://www.voorbeeld-url.com\u0026#34; --\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;em\u0026gt;em-tag\u0026lt;/em\u0026gt; is used to define emphasized text. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;i\u0026gt;i-tag\u0026lt;/i\u0026gt; defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;!-- Use the \u0026lt;i\u0026gt; element only when there is not a more appropriate semantic element --\u0026gt; The \u0026lt;strong\u0026gt;strong-tag\u0026lt;/strong\u0026gt; is used to define text with strong importance. The content inside is typically displayed in bold.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;b\u0026gt;b-tag\u0026lt;/b\u0026gt; specifies bold text without any extra importance.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;small\u0026gt;small-tag\u0026lt;/small\u0026gt; defines smaller text (like copyright and other side-comments).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;s\u0026gt;s-tag\u0026lt;/s\u0026gt; specifies text that is no longer correct, accurate or relevant. The text will be displayed with a line through it.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;cite\u0026gt;cite-tag\u0026lt;/cite\u0026gt; defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;p\u0026gt; The \u0026lt;dfn\u0026gt;dfn-tag\u0026lt;/dfn\u0026gt; stands for the \u0026#34;definition element\u0026#34;, and it specifies a term that is going to be defined within the content. \u0026lt;/p\u0026gt; The \u0026lt;abbr title=\u0026#34;abbreviation\u0026#34;\u0026gt;ABBR\u0026lt;/abbr\u0026gt;-tag defines an abbreviation or an acronym.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;time datetime=\u0026#34;2024-02-18 19:00\u0026#34;\u0026gt;time-tag\u0026lt;/time\u0026gt; defines a specific time (or datetime).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;code\u0026gt;code-tag\u0026lt;/code\u0026gt; is used to define a piece of computer code. The content inside is displayed in the browser\u0026#39;s default monospace font.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;var\u0026gt;var-tag\u0026lt;/var\u0026gt; is used to defines a variable in programming or in a mathematical expression. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; TODO \u0026lt;!-- FORMS AND INPUTS --\u0026gt; \u0026lt;form\u0026gt; fieldset label input text type number, password,email, radio, checkbox, submit, button, file (accept=\u0026#34;image/png, image/jpeg\u0026#34;) Placeholder value name id radiobutton checkbox dropdown met select en option (met value attr) textarea \u0026lt;/form\u0026gt; \u0026lt;!-- EXTRA --\u0026gt; -button -symbols -Details + summary -icons bron1, bron2, bron3\nEen voorbeeld mappenstructuur voor je webpagina\u0026rsquo;s root/\r|\r+---index.html\r|\r+---html/\r|\r+--- about/\r| |\r| +--- about.html\r|\r+--- contact/\r| |\r| +--- contact.html\r...\r+--- assets/\r|\r+--- images/\r|\r+--- image1.png\r... Common website layouts 4 Common website layouts with HTML-elements bron\rHTML vs HTML5 HTML5 is de nieuwere versie van HTML met een aantal nuttige voordelen. Zo is HTML5 zeer vrijgevend gezind in het weglaten van bepaalde attributen en gebruikt HTML5 default waarden voor attributen die nodig zijn maar niet specifiek uitgetyped werden. W Bijvoorbeeld:\n\u0026lt;link href=\u0026#34;CSS/main.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; HTML5:\n\u0026lt;link href=CSS/main.css rel=stylesheet \u0026gt; Merk op dat in het HTML5 voorbeeld geen \u0026ldquo;/\u0026rdquo; heeft voor het sluitende groter dan teken, geen quotes gebruikt voor de value van het attribuut \u0026lsquo;href\u0026rsquo; en \u0026lsquo;rel\u0026rsquo; en er geen attribuut \u0026rsquo;type\u0026rsquo; gedefinieerd is. HTML5 zal hier echter niet moeilijk over doen.\nIn het algemeen is het wel een goede strategie om je HTML bestand zo specifiek mogelijk te coderen om problemen in een later stadium te vermijden.\nAangezien HTML5 dus gewoon de nieuwere versie is van HTML gaan we dit gebruiken.\nOpdrachten Maak een HTML-bestand en noem het portfolio.html Geef de titel van je webpagina de naam \u0026ldquo; portfolio\u0026rdquo;. Voeg jezelf toe als auteur van de webpagina Gebruik het header element om de onderstaande structuur aan te brengen aan je webpagina. Expertise Over mij Mijn projecten Technische vaardigheden en CV Contact Gebruik de relevante html elementen om het volgende toe te voegen aan je webpagina: voeg boven de header expertise een welkomstbericht toe. (Voor inspiratie voor het tekstje kan je ChatGPT gebruiken, de vormgeving doe je ZELF). Emphasize een aantal inspirerende woorden door ze in het vetgedrukt/schuin te zetten. Voeg ook een mooie afbeelding toe die je online ophaalt. Gerbuik hiervoor het \u0026lsquo;figure\u0026rsquo; element en voeg een caption toe Plaats de welkomsttekst binnenin een div en geef die div de klassenaam \u0026lsquo;welcometext\u0026rsquo;. Geef in de Expertise sectie een lijst waarin je je eigen vaardigheden in de verf zet. (je kan ook inspiratie opdoen op andere portfolio websites). Plaats in de Expertise sectie ook een link naar de sectie Technische vaardigheden en CV Plaats in de \u0026lsquo;Over mij\u0026rsquo; je favoriete quote van je lievelingsfilm/-boek in de Over mij sectie. Gerbuik hier het juiste element voor. Geef ook wat meer informatie over jezelf en plaats minstens één belangrijke zin in een span en geef die de id \u0026lsquo;important-sentence\u0026rsquo;. Plaats hier ook een afbeelding (de afbeelding moet je lokaal hebben staan) Maak onder de sectie \u0026lsquo;Mijn projecten\u0026rsquo; subsecties voor alle projecten die je al eens gemaakt hebt. Bijvoorbeeld je project van ELSY van het eerste jaar, je PES project, eigen andere projecten … Onder technische vaardigheden maak je een tabel met je verschillende opleidingen in (naam opleiding, startjaar, eindjaar). Voeg ook een lijst met beheerste talen toe en link hier ergens naar volgende webpagina: https://detaalbrigade.nl/taalniveaus/ Breng wat meer structuur aan in je teksten met divs, paragrafen en line breaks. Voeg ook eens wat symbolen via hun htmlcode toe waar nuttig. Gebruik verschillende achtergrond kleurtjes om te bekijken hoe de verschillende structuren werken (doe dit ook voor je span). Gerbuik inputs boxen, knoppen, checkboxen, … om een contactformulier aan te maken. Je vindt hier ontelbare voorbeelden van op het internet. Neem nu je \u0026lsquo;Contact\u0026rsquo; sectie en plaats die in een nieuw bestand genaamd \u0026lsquo;contact.html\u0026rsquo; en plaats deze in de subfolder genaamd \u0026lsquo;contact\u0026rsquo;. Maak footer aan waarmee je navigeert naar je \u0026lsquo;contact\u0026rsquo; page van je website. Voeg in je head een link toe naar fa-icons zodat je die icoontjes kan gebruiken: \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\u0026quot;\u0026gt; Voeg aan je footer ook een link toe via een icoon naar je Github profiel en een icoon voor je linkedIn profiel (indien je dat hebt) "
},
{
	"uri": "http://localhost:1313/fsweb-course/introductie/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "Info volgt nog. Check ook Toledo\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/php_basics/",
	"title": "PHP: Hypertext Preprocessing",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nPHP: Hypertext Preprocessing We gaan met PHP leren:\ndynamische webpagina\u0026rsquo;s maken onze website te beveiligen te communiceren met een database De PHP syntax PHP is een scripting language die voornamelijk ontworpen werd en gebruikt wordt voor webdevelopment. De PHP code kan onmiddellijk in HTML geïntegreerd worden en wordt uitgevoerd aan de serverside. Aangezien de code aan de serverside uitgevoerd wordt, blijft de broncode verborgen voor de client (goed voor de veiligheid).\nPHP is al een oudere taal maar wordt nog steeds gebruikt in ongeveer 78% van alle websites (Python 2%). Er worden ook nog steeds updates geproduceerd. PHP is namelijk specefiek ontwikkeld voor webdevelopment en Python is een meer all-round language, wat dit verschil meer verklaard. Dit wil niet zeggen dat je enkel webapplicaties kan maken met PHP, Je kan ook standalone applicaties maken maar hiervoor wordt PHP minder gebruikt. Enkele prominenten bedrijven die nog PHP gebruiken als deel van hun backend zijn: Facebook, Wikipedia, Canva \u0026hellip;\nOm PHP te leren gaan we gebruik maken van XAMPP. Met behulp van XAMPP kunnen we op onze pc een lokale server laten draaien die onze backend implementeerd en onze website gaat kunnen displayen. Later gaan we PHP zien gebruikt worden in het populaire framework Laravel. Laravel gaat voor ons al veel organisatorisch werk verrichten.\nEen PHP file kan ook enkel HTML code bevatten. Je kan dus gewoon bij alle documenten met de .html extentie de extentie vervangen door .php. Om dan effectief PHP code te laten uitvoeren in gebruik je volgende syntax:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt;...\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php //Je php-code komt hier ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Je kan ook pure PHP-code gebruiken in je .php file (Bijvoorbeeld pagina dient enkel voor dataprocessing maar bevat geen visuele elementen om te tonen). Je opent dan ook nog met \u0026lt;?php maar de sluitingstag wordt dan weggelaten:\n\u0026lt;?php //Je php-code komt hier XAMPP Om onze site te hosten moeten al onze bronbestanden staan in de htdocs. Dan kan je surfen naar http://localhost/ om je webpagina te bezoeken.\nOpdrachten Overloop de PHP Tutorials op W3Schools. Maak op W3Schools.com de exercises rond php (Je mag advanced php overslaan). Maak op W3Schools de PHP Quiz. (Sommige antwoorden hebben we nog niet gezien, maar 90% wel) Gebruik een HTML form, POST-method en PHP om een rekenmachine webpagina te maken. Connect to database + security demos Opdrachten Maak een volledig werkende signup, signin website die gebruik maakt van session-storage om bij te houden welke gebruiker is ingelogd. Zorg voor login, logout, change pwd. Zorg ervoor dat wachtwoorden veilig opgslagen worden in de database. De index.php moet je automatisch redirecten naar de login/signup page als je er nog geen gebruiker ingelogd is. "
},
{
	"uri": "http://localhost:1313/fsweb-course/extra/websecurity/",
	"title": "Security (enkele voorbeelden)",
	"tags": [],
	"description": "",
	"content": "Hieronder worden een aantal bekend cyberaanvallen besproken, hoe ze werken en hoe je je website er kan tegen beschermen.\nHTML injection attacks Probleem: Je HTML-code bevat een inputveld en die input gebruik je terug om als HTML code gepersonaliseerde content te tonen.\nSituatie: De gebruiker begint HTML-code te schrijven in de input velden. Bijvoorbeeld \u0026lt;script\u0026gt;database.connect; console.log(db.alleWachtwoorden)\u0026lt;/script\u0026gt; Thread level: ZEER HOOG Oplossing: Wanneer je input van de gebruiker terug wil gebruiken als HTML-code, strip de input dan eerst van HTML-tags. (In PHP bestaat hier een voorgemaakte methode voor, maar je kan dit ook in JavaScript doen bijvoorbeeld)\nWachtwoorden veilig opslaan in een database Probleem: Je database wordt gehacked.\nSituatie 1: Je wachtwoorden staan simpelweg in plain-text opgeslagen in de database. Thread level: ZEER HOOG Hackers kunnen simpelweg alle wachtwoorden uitlezen en verkopen aan de hoogste bieder op het dark web. Oplossing: Hash wachtwoorden voordat je ze opslaat in de database. Zo wordt elk wachtwoord veranderd in een random string van karakters. Van de random string karakters is het zeer moeilijk om terug naar het originele wachtwoord te vinden. (Hoe weet je dan of een gebruiker het juiste wachtwoord opgeeft? Elke zelfde waarde die je hashed zal ook dezelfde hashwaarde krijgen. Je kan nu dus simpelweg de hashwaarde van de gebruiker vergelijken met de hashwaarde in de database om te controleren of het het juiste wachtwoord was)\nSituatie 2: Je wachtwoorden staan gehashed opgeslagen in de database. Thread level: HOOG Er bestaan al gelekte lijsten van gehashte wachtwoorden gekoppeld aan gebruikers. Met veel tijd en geduld kan je uiteindelijk het wachtwoord achterhalen die tot de juiste hash leidt en opslaan in simpele lookup tabellen (die al bestaan). Wanneer hackers dus een gehashte wachtwoorden vinden kunnen ze die simpel vergelijken met die tabbellen en toch wachtwoord te pakken krijgen Oplossing: Voeg voor elk wachtwoord een andere random waarde toe voordat je hashed zodat hackers niet meer de juiste hash kunnen terugvinden in de tabellen (Je moet nu wel per wachtwoord deze random waarde = de salt ook opslaan in de database)\nSituatie 3: Je wachtwoorden met salt staan gehashed opgeslagen in de database. Thread level: MIDDEL Als een hacker je database hackt heeft hij zowel toegang to de hashes als de corresponderende salt-waarden. Met genoeg tijd en moeite zal hij dus nog steeds het wachtwoord kunnen vinden. Oplossing: Voeg voor elk wachtwoord met salt ook nog een vast secret (= de pepper) toe voordat je hashed. Sla die waarde nu veilig op ergens weg van de database, bijvoorbeeld op je backend server. Op deze manier moeten zowel je database als je server gehackt worden voordat ze de wachtwoorden kunnen bemachtigen.\nSession Hijacking Probleem: Je verbind met je bank met een http-connectie en je identiteit tussen pagina\u0026rsquo;s blijft behouden dankzij session tokens. Situatie: Omdat je een http-connectie gebruikt is de communicatie tussen jou en de server niet geencrypteerd, een persoon op dezelfde wifi kan dus in plain-text de communicatie uitlezen. Je session token wordt dus ook in plain-text meegegeven. De andere persoon vind je token en gebruikt hem in zijn browser om jou te impersoneren en doet een overschrijving naar zijn eigen bankrekening van 1000 euro. Thread level: ZEER HOOG Oplossing: Gebruik steeds een https-connectie om te surfen op het web zodat alle communicatie geencrypteerd is, dit maakt het alleszins moeilijker om session tokens te stelen. (Tegenwoordig is er geen enkele reden om nog naar een website te surfen over enkel een http-connectie)\nCross-Site Request Forgery Situatie: Een cyberaanvaller op een andere lokatie heeft toevallig jouw sessiegegevens kunnen bemachtigen en probeert met jou session token request te sturen naar de server vanuit een andere applicatie. De CORS (= Cross-Origin Resource Sharing) is enabled bij je website Thread level: HOOG Solution: Cross-Origin Resource Sharing is enabled op je website waardoor je server ook requests van andere domeinen kan ontvangen in plaats van enkel requests die door zichzelf gemaakt zijn. Door CORS enkel te enablen waar nodig en zeker zoveel mogelijk te disablen, kan je je tegen CSRF beveiligen. (Tegenwoordig is in de meeste browseres CORS automatisch gedisabled)\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/css_basics/",
	"title": "CSS",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nCascading Style Sheet HTML alleen maakt een website niet visueel aantrekkelijk. CSS is verantwoordelijk voor dit deel. Met CSS-regels kun je ontwerpen hoe de afzonderlijke componenten die je eerder in HTML hebt gedefinieerd, moeten worden weergegeven. worden weergegeven. Je kan CSS dus gebruiken om het ontwerp en de lay-out van een webpagina te definiëren. Je kan bijvoorbeeld tekstkleuren, tekstgroottes, randen, achtergrondkleuren, kleurverlopen enzovoort definiëren, randen, achtergrondkleuren, kleurverlopen, enzovoort.\nCSS definiëren op verschillende niveaus Aparte file \u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mystyle.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; In html \u0026lt;style\u0026gt; element \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; /*Write your CSS code here*/ \u0026lt;style\u0026gt; \u0026lt;/head\u0026gt; Inline \u0026lt;htmlElement style=\u0026#34;property1:value1 ; property2:value2;\u0026#34;\u0026gt; ... \u0026lt;/htmlElement\u0026gt; Syntax Selectors, Pseudo-classes en Pseudo-elements elementName {...;} .className {...;} #idName {...;} /*Dit is een comment*/ element:pseudo-classname {...;} /*e.g.: a:hover{...;}*/ element::pseudo-elementname {...;} /*e.g.: h1:before{...;}*/ /*Attribute selectors*/ element[attribute] {...;} element[attribute=\u0026#34;value\u0026#34;] {...;} element[attribute~=\u0026#34;value\u0026#34;] {...;} /*contains specific words*/ element[attribute|=\u0026#34;value\u0026#34;] {...;} /*specific value or followed by - */ element[attribute^=\u0026#34;value\u0026#34;] {...;} /*starts with specific value*/ element[attribute$=\u0026#34;value\u0026#34;] {...;} /*ends with specific value*/ element[attribute*=\u0026#34;value\u0026#34;] {...;} /*contains a specified value*/ Types of combinators:\ndescendant selector (space) specifies all descendants child selector (\u0026gt;) only goes one deep adjacent sibling selector (+) selects an element that is directly after another specific element. general sibling selector (~) selects all elements that are next siblings of a specified element. Margin, padding en outline Sizing Absolute: px, pt, pc, in, cm, mm Relative: %, em, rem, ex, ch, fr Viewport (define in head): vw, vh, vmin, vmax We gaan in 99% van de gevallen enkel gebruik maken van px, rem en % (af en toe em relatief t.o.v. font-size eigen element)!!!\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; Positioning Static: An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page. Static positioned elements are not affected by the top, bottom, left, and right properties. Relative: An element with position: relative; is positioned relative to its normal position. Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element. Fixes: An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. A fixed element does not leave a gap in the page where it would normally have been located. Absolute: An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). Absolute positioned elements are removed from the normal flow, and can overlap elements. Sticky: An element with position: sticky; is positioned based on the user\u0026rsquo;s scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \u0026ldquo;sticks\u0026rdquo; in place (like position:fixed). List of usefull properties #elementId { background-color: red; /*rgb(255,0,0) , #FF0000, hsl(0, 100%, 50%) , rgba(255,0,0,0.5), hsla(0, 100%, 50%, 0.5)*/ opacity: 0.3; /*Doorschijnbaarheid 0-1*/ background-image: url(\u0026#34;image.jpg\u0026#34;); background-repeat: repeat-x; /*repeat-y, no-repeat*/ background-position: right top; background-attachment: fixed; /*scroll*/ border-style: dotted; /*dashed, solid, double, groove, ridge, inset, outset, none, hidden*/ /*border-top-style, border-right-style, border-bottom-style, border-left-style*/ border-width: 5rem; /*top right bottom left*/ border-width: black; border-radius: 5px; margin: 10px; /*top right bottom left*/ /*margin-top, margin-right, margin-bottom, margin-left*/ padding: 10px; /*top right bottom left*/ /*padding-top, padding-right, padding-bottom, padding-left*/ height: 200rem; max-height: 20px; width: 80%; /*relative to parent*/ max-width: 60ch; outline: 1px solid red; /*width style color*/ outline-offset: 15px; color: black; /*Text color*/ text-align: center; /*left, right, justify*/ text-align-last: center; /*right, justify*/ direction: rtl; /*ltr*/ vertical-align: baseline; /*text-top, text-bottom, sub, super*/ text-decoration-line: overline; /*line-through, underline, overline underline*/ text-decoration-color: red; text-decoration-style: solid; /*double, dotted, dashed, wavy*/ text-decoration-thickness: 5px; text-transform: uppercase; /*lowecase, capitalize*/ text-indent: 5px; /*first line indent*/ letter-spacing: -2px; line-height: 0.8; word-spacing: 5rem; white-space: nowrap; text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue; /*horizontal vertical blur color, ...*/ font-family: \u0026#34;Times New Roman\u0026#34;, Times, serif; /*desired, fallback1, fallback2*/ font-style: normal; /*itallic, oblique*/ font-weight: normal; /*bold*/ font-size: 0.5rem; font-variant: normal; /*small-caps*/ overflow-x: scroll; /*hidden, auto, visible*/ overflow-y: scroll; /*hidden, auto, visible*/ display: inline; /*block, inline-block, contents, flex, grid*/ position: static; /*relative, fixed, absolute, sticky (to parent)*/ bottom: 0; right: 0; z-index: -1; /*lower = further in background*/ float: right; /*left, none, inherit*/ /*in parent*/ clear: left; /*right, none, inherit*/ box-sizing: content-box; /*border-box*/ /*IF display: flex*/ flex-direction: row; /*column, column-reverse, row-reverse*/ flex-wrap: wrap; /*nowrap, wrap-reverse*/ /*flex-flow: row wrap;*/ /*direction wrap*/ justify-content: flex-start; /*center, flex-end, space-around, space-between*/ align-items: stretch; /*baseline, flex-start, center, flex-end*/ align-content: space-between; /*space-around, stretch, center, flex-start, flex-end*/ /*IF display: grid*/ } ul { list-style-type: circle; /*square, upper-roman, lower-alpha, none*/ list-style-image: url(\u0026#39;sqpurple.gif\u0026#39;); list-style-position: outside; /*inside*/ } table { border-collapse: collapse; } tr:nth-child(even) {background-color: #f2f2f2;} input { outline: none; } a:link {...;} a:visited {...;} a:hover {...;} a:active {...;} /*COUNTERS*/ #containerElement { counter-reset: section; } element::before{ counter-increment: section; content: \u0026#34;Section \u0026#34; counter(section) \u0026#34;: \u0026#34;; } Icons \u0026lt;script src=\u0026#34;https://kit.fontawesome.com/yourcode.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- In the head --\u0026gt; \u0026lt;i class=\u0026#34;fas fa-cloud\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Text effects text-overflow: hoe moet verborgen overflowing content weergegeven worden?\nclip ellipsis overflow moet hidden zijn (werkt niet vij overflow visible) #textOverflow { text-overflow: clip; overflow: hidden; } #textOverflow2 { text-overflow: ellipsis; overflow: hidden; } word-wrap: om lange woorden op te breken en te wrappen naar de volgende regel\n#wordWrap { word-wrap: break-word; } word-break: hoe moeten lijnen text gebroken worden.\n#wordWrap { word-break: keep-all; } #wordWrap2 { word-break: break-all; } writing-mode: horizontaal of verticaal.\n#writingMode { writing-mode: horizontal; } #writingMode { writing-mode: vertical; } Calculations e.g.:\nwidth: calc(100% - 100px); width: max(50%, 300px); width: min(50%, 300px); CSS variables :root { --blue: #1e90ff; --white: #ffffff; } body { background-color: var(--blue); } Extra Andere CSS files importeren in de main.css\n@import url(\u0026#39;./animations.css\u0026#39;); Moet helemaal in het begin van je CSS-file staan\n!important: om alle andere styling te overschrijven.\nelement { background-color: red !important; } simple linear gradient: gebruik background-image property en niet background-color.\n#grad { background-image: linear-gradient(to right, red , yellow); /*direction, color-stop1, color-stop2, ...*/ } Divs, columns, User Interface\ndiv { column-count: 3; column-gap: 40px; column-width: 100px; column-rule-style: solid; column-rule-width: 1px; column-rule-color: lightblue; /*element inside the div*/ column-span: all; resize: horizontal; /*vertical, both*/ overflow: auto; } img:\nimg { border-radius: 8px; opacity: 0.5; filter: grayscale(100%); box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5); -webkit-box-reflect: below; /*above, left, right*/ object-fit: cover; /*contain, fill, none, scale-down*/ object-position: 80% 100%; -webkit-mask-image: url(img1.png); mask-image: url(img1.png); -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat; } Opdrachten Maak je footer fixed onderaan de pagina Voeg een afbeelding van jezelf (of) een stockfoto toe aan je over mij sectie en zorg ervoor dat de afbeelding steeds richts staat Maak een nav sectie die 2 anchor elementen heeft: 1 voor de home page en een voor de contact page. Gebruik volgende bron om je nav sectie te stijlen zodat je een verticale navigatie sectie hebt aan de linkerkant van je pagina die 100% van de hoogte in beslag neemt. Gebruik een input checkbox die je gefixed houd in de linkerboven hoek. Zorg ervoor dat je navigatie sectie verborgen wordt wanneer de checkbox niet is aangevinkt en getoond wordt wanneer je de checkbox aanduidt. Gebruik volgende bron om je formulier in je contact pagina te stijlen.. Gebruik volgende bron om de globale layout van je site te updaten. Zorg al voor een responsive design door al je font-sizes aan te passen aan een vaste font-size die zich aanpast aan de grootte van de pagina. Kies een leuke font voor je pagina en eventueel complementaire fonts voor speciale secties zoals quotes. (zorg ook voor fallback fonts) Gebruik icons in plaats van tekst in je navigation sectie. Geef je creativiteit de vrije loop om je site zo mooi mogelijk te maken. "
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "Wat is de frontend? De frontend bestaat uit alle code waarmee de gebruiker rechstreeks mee interageert (bekijkt, input ingeeft, \u0026hellip;) in zijn/haar lokale webbrowser. Deze code wordt initieel opgehaald van de server en gecached in de webbrowser.\nDe frontend wordt ook wel de client-side genoemd.\nWaaruit bestaat de frontend? De frontend bestaat uit:\nHTML code voor de structuur van de inhoud CSS code voor het stijlen van de inhoud JavaScript code zorgt voor interactie met de gebruiker Static vs dynamic websites Een statische website bestaat uit webpaginas met vaste inhoud die hetzelfde is voor elke gebruiker.\nEen dynamische website genereert webcontent op basis van gebruiker interacties. Dit wordt gebeurt door server-side (of client-side) scripts. De inhoud van de webpagina verschilt dus voor elke gebruiker op basis van hun interactie met de website.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/laravel_basics/",
	"title": "Laravel: basics",
	"tags": [],
	"description": "",
	"content": "Laravel Why Laravel? framework -\u0026gt; templates faster libraries MVC model very popular option -\u0026gt; a lot of information more secure -\u0026gt; because php is datasensitive built-in security features automatic integration with database Install Laravel Edit php.ini file line 962 uncomment (delete semicolon in fromt) extention=zip line 930 uncomment extention=fileinfo line 942 uncomment extention=openssl line 944 uncomment extention=pdo_mysql\nAdd php.exe to path variables (new system variable) name: PHP location: C:\\xampp\\php\\php.exe\nAdd dependency manager: Composer download .exe add to path: C:\\ProgramData\\ComposerSetup\\bin\nInstall Laravel using Composer $ composer global require laravel/installer\nReinstall XAMPP and move project into Dashboard -\u0026gt; Laravel first delete all files inside the dashboard directory\nCreate laravel project in your project folder $ laravel new \u0026lt;projectName\u0026gt; starterkit -\u0026gt; none Pest -\u0026gt; 0 (testing framework, PHPUnit is older) Git -\u0026gt; no\ndb -\u0026gt; mysql (via XAMPP) default database migrations -\u0026gt; yes (make sure MySQL server is turned on in XAMPP)\nFront page is in public/index.php Setup database inside phpmyadmin -\u0026gt; new database (give same name as laravel project \u0026lsquo;-\u0026rsquo; becomes \u0026lsquo;_\u0026rsquo;).\nOR set name in .env file\n($ php artisan migrate)\ncreates tables that integrate with laravel !\n(Start webserver without apache: inside project folder) $ php artisan serve\nIntro into Laravel TodoList resources/views/welcome.blade.php routes/web.php public/index.php Create object and db migration $ php artisan make:model \u0026lt;modelName\u0026gt; -m $ php artisan migrate check migration in /database/migrations/ update migration so it interacts with table correctly (set correct model properties) model will be in app/model\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/laravel_code/",
	"title": "Laravel: code and commands",
	"tags": [],
	"description": "",
	"content": "Important commandline commands # Rebuild project composer update --no-scripts # Create new Laravel project laravel new \u0026lt;projectName\u0026gt; # Migrate creation tables php artisan migrate # Start project op poort 8000 php artisan serve # Create new Laravel model with options php artisan make:model # Create just a new Laravel model php artisan make:model \u0026lt;modelName\u0026gt; # Create new Laravel migration php artisan make:migration create_\u0026lt;modelName\u0026gt;withS_table # Create new Laravel controller php artisan make:controller \u0026lt;controllerName\u0026gt; # Create new Laravel seeder php artisan make:seeder \u0026lt;seederName\u0026gt; # Seed db php artisan db:seed --class=\u0026lt;SeederClassName\u0026gt; # Generate a factory for a model php artisan make:factory \u0026lt;FactoryName\u0026gt; --model=\u0026lt;ModelName\u0026gt; Connect to supabase Enable/uncomment extentions via php.ini file:\npdo_pgsql.so pgsql.so Set database default in confid-\u0026gt;database.php:\n'default' =\u0026gt; env('DB_CONNECTION', 'pgsql'), Edit .env file:\nDB_CONNECTION=pgsql DB_URL=\u0026lt;supabase-\u0026gt;project-\u0026gt;configuration-\u0026gt;Database-\u0026gt;connectionString-\u0026gt;URI\u0026gt; DB_PASSWORD=supabasePassword routes/web.php Hier worden alle endpoints van je websites gedeclareerd (Meer info rond: requests, responses):\n// Schrijf de functie die moet uitgevoerd worden rechtstreeks in de `get`-methode // get request naar endpoint \u0026#39;/\u0026#39; Route::get(\u0026#39;/\u0026#39;, function () { // Do stuff //... // Geef een view terug met eventueel extra data die kan gebruikt worden in de blade template return view(\u0026#39;home\u0026#39;, [\u0026#39;posts\u0026#39; =\u0026gt; $posts]); }); // Of je kan een bepaald endpoint doorgeven naar een controller klasse // Post request Route::post(\u0026#39;/postendpoint\u0026#39;, [ExampleController::class, \u0026#39;methodInsideControllerClass\u0026#39;]); // Get request Route::get(...); // Put request Route::put(...); // Update request Route::update(...); // Delete request Route::delete(...); Controller class example: app/Http/Controllers Bundel wat er moet gebeuren wanneer verschillende endpoints gebruikt worden die te maken hebben met bepaalde modellen:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\User; use Illuminate\\Http\\Request; use Illuminate\\Validation\\Rule; class ExampleController extends Controller { public function methodInsideControllerClass(){ // do stuff // Return een blade view return view(\u0026#39;home\u0026#39;); } public function redirectExample(Request $request){ // Get the values inside a request and validate them $incomingFields = $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, Rule::unique(\u0026#39;users\u0026#39;,\u0026#39;name\u0026#39;)], \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;] ]); // show more info on a php object //dd($request) // Create a php obeject $example = Example::create($incomingFields); //Login to session as a user auth()-\u0026gt;login($user); //Logout //auth()-\u0026gt;logout(); // Do een redirect naar een ander endpoint return redirect(\u0026#34;/\u0026#34;); } public function getAllEntriesOfModelInDb(){ // Retrieve all users from the database $examples = Example::all(); // Return the users data (for example, as JSON) return response()-\u0026gt;json($examples); } } Blade views en syntax Blade en views worden dynamisch gemaakt via een aantal specifieke code syntaxen voor if-else statements, for-lussen, importeren van andere views \u0026hellip;\n\u0026lt;!-- template.blade.php --\u0026gt; \u0026lt;h1\u0026gt;{{ phpVariableExample }}\u0026lt;/h1\u0026gt; @include(\u0026#39;otherviewtoinclude\u0026#39;) \u0026lt;div\u0026gt; @yield(\u0026#39;contentToBeIncluded\u0026#39;) \u0026lt;/div\u0026gt; \u0026lt;!-- actualView.blade.php --\u0026gt; @extends(\u0026#39;template\u0026#39;) @section(\u0026#39;body\u0026#39;) \u0026lt;h3\u0026gt;Html to be inserted\u0026lt;/h3\u0026gt; @endsection \u0026lt;!-- forifelseExample.blade.php --\u0026gt; \u0026lt;h1\u0026gt;For loop example:\u0026lt;/h1\u0026gt; @for ($i = 0; $i \u0026lt; 10; $i++) The current value is {{ $i }} @endfor @foreach ($users as $user) \u0026lt;p\u0026gt;This is user {{ $user-\u0026gt;id }}\u0026lt;/p\u0026gt; @endforeach @while (true) \u0026lt;p\u0026gt;I\u0026#39;m looping forever.\u0026lt;/p\u0026gt; @endwhile \u0026lt;h1\u0026gt;If Else example:\u0026lt;/h1\u0026gt; @if (count($records) === 1) I have one record! @elseif (count($records) \u0026gt; 1) I have multiple records! @else I don\u0026#39;t have any records! @endif Avoid Cross-site request forgeries errors in forms met @csrf\n\u0026lt;form action=\u0026#34;/image\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; //IMPORTANT @csrf \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34; accept=\u0026#34;image/*\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Upload\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; Models, migrationtables en factories Bij het aanmaken van modellen kan je rechtstreeks een link maken met de database aan de hand van migration tabellen. Bovendien kan je een factory gebruiken om dummy data aan te brengen in de database via de commandline. Hieronder een voorbeeld:\napp/Models/Test.php \u0026lt;?php namespace App\\Models; use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Database\\Eloquent\\Model; class Test extends Model { // To be able to use a factory use HasFactory; /** * The attributes that are mass assignable. * Namen komen overeen met de kolomnamen in de database * @var array\u0026lt;int, string\u0026gt; */ protected $fillable = [ \u0026#39;testname\u0026#39;, \u0026#39;testemail\u0026#39;, \u0026#39;testnumber\u0026#39;, \u0026#39;testpassword\u0026#39;, ]; } database/migrations/2024_05_06_084113_create_tests_table.php \u0026lt;?php use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema; return new class extends Migration { /** * Run the migrations. */ public function up(): void { Schema::create(\u0026#39;tests\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;timestamps(); $table-\u0026gt;string(\u0026#39;testname\u0026#39;); $table-\u0026gt;string(\u0026#39;testemail\u0026#39;); $table-\u0026gt;integer(\u0026#39;testnumber\u0026#39;); $table-\u0026gt;string(\u0026#39;testpassword\u0026#39;); }); } /** * Reverse the migrations. */ public function down(): void { Schema::dropIfExists(\u0026#39;tests\u0026#39;); } }; database/factories/TestFactory.php \u0026lt;?php namespace Database\\Factories; use Illuminate\\Database\\Eloquent\\Factories\\Factory; /** * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory\u0026lt;\\App\\Models\\Test\u0026gt; */ class TestFactory extends Factory { /** * Define the model\u0026#39;s default state. * * @return array\u0026lt;string, mixed\u0026gt; */ public function definition(): array { return [ // \u0026#39;testname\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;name, \u0026#39;testname\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;randomElement([\u0026#39;Mark\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;Kevin\u0026#39;]), \u0026#39;testemail\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;numberBetween(1000, 9999), \u0026#39;testnumber\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;numberBetween(1000, 9999), \u0026#39;testpassword\u0026#39; =\u0026gt; bcrypt(\u0026#39;password\u0026#39;), ]; } } Seeder Om effectief dummy data in de database te steken gebruiken we seeders: $ php artisan db:seed --class=DatabaseSeeder\ndatabase/seeders/DatabaseSeeder.php \u0026lt;?php namespace Database\\Seeders; use App\\Models\\Test; // use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents; use App\\Models\\User; use Illuminate\\Database\\Seeder; class DatabaseSeeder extends Seeder { /** * Seed the application\u0026#39;s database. */ public function run(): void { // Clear test table in database Test::truncate(); // Call the TestSeeder $this-\u0026gt;call(TestSeeder::class); // Generate 10 test records using the factory Test::factory()-\u0026gt;count(10)-\u0026gt;create(); } } database/seeders/TestSeeder.php \u0026lt;?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents; class TestSeeder extends Seeder { /** * Run the database seeds. */ public function run(): void { DB::table(\u0026#39;tests\u0026#39;)-\u0026gt;insert([ \u0026#39;testname\u0026#39; =\u0026gt; \u0026#39;Test Name \u0026#39;, \u0026#39;testemail\u0026#39; =\u0026gt; \u0026#39;test@example.com\u0026#39;, \u0026#39;testnumber\u0026#39; =\u0026gt; rand(1000, 9999), \u0026#39;testpassword\u0026#39; =\u0026gt; bcrypt(\u0026#39;password\u0026#39;), \u0026#39;created_at\u0026#39; =\u0026gt; now(), \u0026#39;updated_at\u0026#39; =\u0026gt; now(), ]); } } De public files Waar moet je de files plaatsen die beschikbaar moeten zijn aan de client-side?\n-\u0026gt; in de public folder\npublic\r|-----\u0026gt; assets\r|-------\u0026gt; styles.css\r|-------\u0026gt; script.js\r|-------\u0026gt; example.jpg Inside blade views:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Public Example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;{{ url(\u0026#39;/assets/styles.css\u0026#39;) }}\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Example\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;{{url(\u0026#39;/assets/example.jpg\u0026#39;)}}\u0026#34; alt=\u0026#34;image\u0026#34; width=\u0026#34;200px\u0026#34;/\u0026gt; \u0026lt;script src=\u0026#34;{{url(\u0026#39;/assets/script.js\u0026#39;)}}\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Laravel sessions In de config/sessions.php kan je bepalen hoe sessionvariabelen opgeslagen moeten worden en bepaalde instellingen voor sessies wijzigen. Je kan bijvoorbeeld instellen hoe lang een sessie kan duren.\nSession::put(\u0026#39;variableName\u0026#39;, $value); // To save variable in a session Session::get(\u0026#39;variableName\u0026#39;); // To get a variable in a session Error Handling zie link\nLogging dd($variable); "
},
{
	"uri": "http://localhost:1313/fsweb-course/opdrachten/",
	"title": "Opdrachten",
	"tags": [],
	"description": "",
	"content": "Zie menu links "
},
{
	"uri": "http://localhost:1313/fsweb-course/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": "Full Stack Web Development Academiejaar 2023\u0026mdash;2024.\nPlanning nr datum onderwerp 01 wo 12-02-2024 Introductie + HTML Cursus noties Er worden telkens blokken van 2 uur ingepland voor dit vak. Er zijn geen traditionele hoorcolleges voorzien. Alle notities zijn via deze website te raadplegen (tenzij anders vermeld).\nInhoudsopgave Introductie Frontend: HTML CSS Syllabus Lesgevers: Coördinerend Verantwoordelijke: prof. dr. Kris Aerts (kris.aerts@kuleuven.be) assistent lesgever: ing. Arne Duyver (arne.duyver@kuleuven.be) Kantoor: Technologiecentrum Diepenbeek, Groep ACRO. Cursusbeschrijving Dit opleidingsonderdeel focust op de hele web workflow. De twee belangrijke delen zijn:\nfrontend backend Voor de backend leer je gebruik maken van de frameworks:\nSvelte Kit Laravel Vereiste voorkennis Basiskennis van programmeren. Doelstellingen Zie ook Studiegids UHasselt\nDe context en het overzicht worden aangereikt in de eerste lessen van dit vak.\nAls rode draad doorheen de oefeningen maak je een eigen portfolio site aan.\nAls practicum wordt een grotere probleemstelling als project uitgewerkt. Alle aan te leren aspecten van full stack web development komen in dit project aan bod. Studenten kunnen facultatief buiten het practicum extra thematische oefeningen oplossen.\nKalender Zie Mytimetable UHasselt.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]