[
{
	"uri": "http://localhost:1313/fsweb-course/frontend/html_basics/",
	"title": "HTML",
	"tags": [],
	"description": "",
	"content": "bron 1: HTML, CSS, Bootstrap \u0026amp; Blade. Vormgeving in Laravel. Cursus: Cloud Computing \u0026amp; Toepassingen - 2020/2021 - Kris Aerts bron 2: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 3: W3Schools\nHyperText Markup language HTML staat voor \u0026lsquo;HyperText Markup Language\u0026rsquo; en is een manier om text content te markeren zodat het door een programmeertaal of webbrowser begrepen kan worden. HTML is essentieel voor menselijk begrijpbare webcontent. Je markeert tekstinhoud met tags/elements om structuur en inhoud aan te brengen. HTML is dus een standaard voor het structuren van informatie via een markup-taal gebaseerd op XML, en kan in eender welke browser getoond worden zoals Firefox, Edge, Chrome, Safari, Opera, \u0026hellip;\nHet grote voordeel is dat we zelf geen software moeten gaan installeren de computer van gebruikers en dat we voortdurend updates aan de software kunnen aanbrengen zonder dat we deze expliciet moeten distribueren naar de eindgebruiker. Je kan HTML (en CSS) statisch schrijven of dynamisch laten genereren via een programmeertaal en bijhorend framework, zoals PHP en Laravel, Java en Tomcat, C# en ASP, Flask en Jinja, \u0026hellip;\nSamengevat is HTML de markup-taal waarmee we via tags informatie kunnen structuren.\nHTML beschrijft enkel de structuur, en géén vormgeving. Dat doen we in CSS.\nMerk ten slotte op dat HTML afgeleid is van XML en dat ook CSS een strikte structuur heeft. Om dit te controleren kan je o.a. volgende validators gebruiken:\nValidator voor HTML http://validator.w3.org/ Elements, Tags en Attributes Een HTML element wordt gedefiniëerd door een open-tag, elementinhoud en een sluit-tag. Een HTML tag wordt weergegeven met de naam van het element binnenin \u0026ldquo;\u0026lt; \u0026hellip; \u0026gt;\u0026rdquo; en bestaat steeds uit kleine letters bv. \u0026lt;p\u0026gt;. Een sluit-tag bevat nog een \u0026ldquo;/\u0026rdquo; voor de element naam bv. \u0026lt;/p\u0026gt;. Elke open-tag moet meestal ook gevolgd worden door een sluit-tag van hetzelfde element bv. \u0026lt;p\u0026gt; ... \u0026lt;/p\u0026gt;. Een uitzondering op deze regel zijn een aantal self-closing elements die geen elementinhoud bevatten. Een self-closing element bevat dus maar één tag waarin de \u0026ldquo;/\u0026rdquo; na de elementnaam komt en voor de sluitende \u0026ldquo;\u0026gt;\u0026rdquo; bv. \u0026lt;img src=\u0026quot;/img/html_syntax.png\u0026quot;/\u0026gt; of \u0026lt;br/\u0026gt;.\nHTML syntax and structure of an HTML element bron\rEen element kan verschillende attributes bevatten die extra informatie over een HTML element bevatten. Deze attributen kunnen het gedrag of uiterlijk van een element wijzigen, de functionaliteit ervan definiëren of andere details specificeren, zoals de relatie met andere elementen of het gedrag als reactie op gebruikersinteracties. Attributen worden in de open-tag aan HTML-elementen toegevoegd met behulp van name-value pairs binnen de open-tag van het element. De belangrijkste attributen die wij gebruiken zijn id, class en style. Enkele andere veelgebruikte HTML-attributen zijn: href, src \u0026hellip;\nOp volgende manier gebruik je attributen in HTML tags (Een element kan meerdere attributen bevatten en je zelf ook eigen attributen toevoegen):\n\u0026lt;p attributeName=\u0026#34;attributeValue\u0026#34;\u0026gt;...\u0026lt;/p\u0026gt; Twee belangrijke attributen zijn \u0026lsquo;id\u0026rsquo; en \u0026lsquo;class\u0026rsquo; die je helpen een specifiek element terug te vinden met behulp van CSS-selectors of JavaScript.\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; class=\u0026#34;specialeParagraafKlasse\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt;...\u0026lt;/p\u0026gt; Een element kan maximaal één id hebben maar wel meerdere class namen.\nEen element kan meerdere andere elementen bevatten. Hier spreken we dan van nested elements, bv.:\n\u0026lt;p id=\u0026#34;paragraaf1\u0026#34; value=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;...\u0026lt;/h1\u0026gt; \u0026lt;a\u0026gt;...\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; Structuur van een HTML-document Je kan eender welke simpele tekst- of code-editor gebruiken om HTML bestanden aan te maken of te bewerken (bv. notepad, notepad++, vscode, sublime text, atom, vim, nano \u0026hellip;). Een HTML bestand zou volgende hoofdstuctuur moeten volgen:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; ... \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; ... \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Doctype: Hiermee geven we weer welk type dit document is. In ons geval dus steeds html. html element: Het HTML element met de naam \u0026lsquo;html\u0026rsquo;. Dit wordt de root tag van het HTML bestand genoemd, want alle html code moet binnen de \u0026lt;html\u0026gt; en \u0026lt;/html\u0026gt; tags staan. Deze tags geven aan waar het html-document begint en eindigt. lang attribuut: Met het language attribuut geven we meer informatie mee aan de webbrowser door te vermelden dat de content op deze webpagina in het Engels (en) geschreven is. (Nederlands = nl) Binnen html zijn er slechts twee tags mogelijk: de \u0026lt;head\u0026gt; en de \u0026lt;body\u0026gt; voor respectievelijk informatie in de header die niet rechtstreeks voor de lezer bestemd is en anderzijds de body die de feitelijke inhoud van het document bevat. head element: dit is een container voor de volgende metadata: \u0026lt;title\u0026gt;, \u0026lt;style\u0026gt;, \u0026lt;meta\u0026gt;, \u0026lt;link\u0026gt; and \u0026lt;base\u0026gt;. (eventueel ook \u0026lt;script\u0026gt;) meta element: wordt gebruikt om de karakterset/encoding, paginabeschrijving, trefwoorden, auteur van het document en viewport settings te declareren. character encoding: dit verteld de webbrowser hoe de karakters gecodeerd zijn zodat hij ze correct kan decoderen. Tenzij je een goede reden hebt is de gebruikte codering normaal utf-8. body element: een element container die al de overige inhoud van het HTML bevat. De headers, paragrafen, de tekst \u0026hellip; Boomstructuur Bij het werken met deze tags is het zéér belangrijk dat we een boomstructuur aanhouden: elke tag moet volledig binnen een andere zitten. Anders gezegd betekent dit dat je een omsluitende tag pas mag afsluiten wanneer je alle binnenliggende tags afgesloten hebt. Concreet mag je de \u0026lt;/html\u0026gt; pas afsluiten na de \u0026lt;/body\u0026gt;. Het feit dat je een boomstructuur krijgt, betekent dat je gemakkelijk deeltakken van het document kan selecteren.\nTypes van HTML elements Sectioning elements: elementen die worden gebruikt om de structuur van een webpagina te definiëren door secties van inhoud te scheiden door de verschillende delen semantische betekenissen mee te geven. Bv. \u0026lt;h1\u0026gt;, \u0026hellip;, \u0026lt;h6\u0026gt;, \u0026lt;p\u0026gt;, \u0026lt;header\u0026gt; en \u0026lt;footer\u0026gt;.\nZoals bv. deze webpagina is opgebouwd uit hoofdstuktitels, paragraaf- en subparagraaf-titels van elk een verschillende grootte, of een krant waar je hoofdingen in verschillende groottes hebt afhankelijk van de belangrijkheid van het nieuws. In HTML hebben we 6 soorten hoofdingen, gaande van \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt; tot \u0026lt;h6\u0026gt; en daarnaast de \u0026lt;p\u0026gt; waarin je de eigenlijke paragraaf tekst zet. In principe hoef je niet te weten hoe groot de verschillende headers zijn: de browser is vrij dit zelf te bepalen zolang h1 maar belangrijker is dan h2 (enzoverder), maar sowieso kan je met CSS deze vormgeving nog wijzigen. De \u0026lt;p\u0026gt; plaatst de tekst in principe links uitgelijnd en laat steeds een witte regel tussen twee paragrafen, maar ook dit kan je veranderen met CSS. Visuele onderverdelingen zijn de \u0026lt;br\u0026gt; (break) en de \u0026lt;hr\u0026gt; (horizontal ruler). De eerste voegt een blanco regel toe, terwijl de tweede een horizontale scheider plaatst.\nGrouping elements: elementen die worden gebruikt om meerdere inhoudsitems te groeperen of te bundelen onder één overkoepelend element. Deze elementen dragen niet echt bij tot de inhoud van het document op zich, maar helpen wel de structuur te verfijnen. Enerzijds gaat het om structurende onderverdelingen: tags die een aantal andere tags samen groeperen tot een nieuwe deelverzameling: een sectie van het document. Bv. \u0026lt;div\u0026gt; wordt hiervoor het meest gebruikt. Het is wel een eigenschap van de div dat ze zorgt voor het begin van een nieuwe regel. \u0026lt;span\u0026gt; heeft dezelfde inhoudelijke betekenis, maar zorgt niet voor een visueel zichtbaar nieuwe regel en wordt daarom eerder binnen tags gebruikt.\nOpsommingen: Voor de opsomming hebben we enerzijds de keuze uit de geordende lijst \u0026lt;ol\u0026gt; (ordered list) of de niet-geordende lijst \u0026lt;ul\u0026gt; (unordered list), waarbij elk lijst-element op zijn beurt een \u0026lt;li\u0026gt; is (listitem).\nHypertext: De tags die we voordien zagen, waren puur text-based en gaan voorbij aan de rijkdom van html, een rijkdom die we onder de noemer Hypertext kunnen plaatsen: html biedt immers de kans om meer dan alleen tekst te tonen: figuren, videos, geluiden en hyperlinks: doorverwijzingen naar andere documenten of naar andere plaatsen binnen het huidige document.\n\u0026lt;a\u0026gt; de anker tag: Bij deze tag heb je enerzijds de linktitel: de tekst die (meestal) in het blauw op je webpagina verschijnt, en anderzijds de link zelf: de pagina waar je naar toe springt wanneer je op de link klikt. De linktitel is de inhoud van de tag, terwijl je de link zelf via het attribuut href moet meegeven, bv. \u0026lt;a href=http://www.google.be\u0026gt;De bekendste zoekmachine\u0026lt;/a\u0026gt;\nJe kan ook links (ankers) binnen je webpagina maken. Dan moet je het attribuut name gebruiken, bv. \u0026lt;a name=”halfweg”\u0026gt;...\u0026lt;/a\u0026gt;. Om dan naar zo’n anker te verwijzen, moet je als href # gebruiken + de naam van het anker, bv. \u0026lt;a href=”#halfweg”\u0026gt;\u0026hellip; \u0026lt;img\u0026gt; de image-tag: Dit is een replaced tag omdat hij wordt vervangen door de figuur waarnaar verwezen wordt in het src-attribuut. Dit attribuut is dan ook verplicht. Daarnaast is ook het attribuut alt verplicht voor zoekmachines en blinden of slechtzienden waarbij schermlees software dan de alt-tag voorleest. bv. \u0026lt;img src=”...” alt=”...” /\u0026gt; Voor video- en audio-fragmenten heeft men de \u0026lt;video\u0026gt;- en \u0026lt;audio\u0026gt;-tag voorzien, maar in de praktijk worden echter heel dikwijls iframes gebruikt. Sowieso gebruiken de meeste mensen de embeddable code die krijgen ze van sites zoals youtube of spotify en daarom gaan we daar hier niet dieper op in. Text-level semantics: dit verwijst naar de manier waarop HTML elements de betekenis en structuur van tekst op een webpagina definiëren. Deze elementen worden gebruikt om specifieke delen van de tekst te markeren en hun semantische betekenis aan te geven. Bv. \u0026lt;em\u0026gt; en \u0026lt;strong\u0026gt;. Andere markeringen zijn:\n\u0026lt;title\u0026gt; Verschijnt in de titelbalk van de browser en bij de bookmark. Deze tag moet wel in de head van het html-document. \u0026lt;cite\u0026gt; Een citaat uit een andere tekst. \u0026lt;code\u0026gt; Voor programmacode. Opgelet: witruimte: Opvallend binnen HTML is dat eender welke hoeveelheid witruimte beschouwd wordt als het begrip “witruimte” waarvoor de browser slechts één spatie zal gebruiken. Of je dus 7 spaties gebruikt of 13 enters of 8 tabs, 3 enters en 22 spaties, dit komt allemaal overeen met “witruimte”.\nHTML-entities Omdat de verschillende talen in de wereld veel verschillende accenten hebben, is er gekozen voor een overdraagbaar systeem van accenten: men doet dit met HTML-entities. Dit zijn speciale codes waarmee je speciale tekens kan weergeven. Dit beperkt zich niet alleen tot accenten, maar ook tot tekens zoals \u0026amp;, €, \u0026lt; en \u0026gt; (want die laatste worden anders als deel van een tag beschouwd), \u0026hellip; Typisch is dat ze allen beginnen met \u0026amp; en afgesloten worden met ;, bv. \u0026amp;amp; geeft \u0026amp; of \u0026amp;euro; geeft €.\nVoor de accenten heb je het systeem \u0026amp; + letter + accent + ;. Het accent is dan een van: grave (à), acute (é), uml (ë), cedil (ç), circ (ê), tilde (ñ).\nEnkele interessante zijn voor ampersand (\u0026amp;amp; \u0026amp;), euro (\u0026amp;euro; €), copywright (\u0026amp;copy; ©), reg (\u0026amp;reg; ®), trademark (\u0026amp;trade; ™), less then (\u0026amp;lt; \u0026lt;), greater then (\u0026amp;gt; \u0026gt;), less then or equals (\u0026amp;le; ≤), greater then or equals (\u0026amp;ge; ≥) en non breaking space (\u0026amp;nbsp;) bv: \u0026amp;nbsp; non breaking\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;\u0026amp;nbsp;space\nnon breaking space\nVia volgende link vind je een volledige lijst terug: https://www.freeformatter.com/html-entities.html\nList of useful elements Klik hier om de code te zien/verbergen🔽\r\u0026lt;!-- This is a comment in HTML --\u0026gt; \u0026lt;!-- SECTIONING ELEMENTS --\u0026gt; \u0026lt;nav\u0026gt; The \u0026#39;nav\u0026#39; element is used to mark up a collection of links to external pages or sections within the current page. As well as being used for the main website navigation, the \u0026#39;nav\u0026#39; element is also a good fit for things like a table of contents, or a blogroll. \u0026lt;/nav\u0026gt; \u0026lt;header\u0026gt;Header for webpage\u0026lt;/header\u0026gt; \u0026lt;aside\u0026gt; The \u0026#39;aside\u0026#39; element is used to represent content that is tangibly related to the content surrounding it, but could be considered separate. This includes things like sidebars \u0026lt;/aside\u0026gt; \u0026lt;main\u0026gt; The \u0026#39;main\u0026#39; element should contain the main content for your web page. All of this content should be unique to the individual page, and should not appear elsewhere on the site. Any content that is repeated on multiple pages (logos, search boxes, footer links, etc.) should not be placed within the \u0026#39;main\u0026#39; element. You should only use one \u0026#39;main\u0026#39; element on a page, and it shouldn’t be placed within an \u0026#39;article\u0026#39;, \u0026#39;aside\u0026#39;, \u0026#39;header\u0026#39;, \u0026#39;footer\u0026#39;, or \u0026#39;nav\u0026#39; element. \u0026lt;article\u0026gt; \u0026lt;header\u0026gt; the \u0026#39;header\u0026#39; element is used to represent the introductory content to an article or web page. This will usually contain a heading element as well as some metadata that’s relevant to the content, such as the post date of a news article for example. \u0026lt;h1\u0026gt;Largest Header\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Header 2\u0026lt;/h2\u0026gt; \u0026lt;h3\u0026gt;Header 3\u0026lt;/h3\u0026gt; \u0026lt;h4\u0026gt;Header 4\u0026lt;/h4\u0026gt; \u0026lt;h5\u0026gt;Header 5\u0026lt;/h5\u0026gt; \u0026lt;h6\u0026gt;Smallest Header\u0026lt;/h6\u0026gt; \u0026lt;/header\u0026gt; The \u0026#39;article\u0026#39; element should contain a piece of self-contained content that could be distributed outside the context of the page. This includes things like news articles, blog posts, or user comments. You can nest \u0026#39;article\u0026#39; elements within one another. In this case it’s implied that the nested elements are related to the outer \u0026#39;article\u0026#39; element. \u0026lt;aside\u0026gt;Tangibly related content\u0026lt;/aside\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;section\u0026gt; The \u0026#39;section\u0026#39; element is used to represent a group of related content. This is similar to the purpose of an \u0026#39;article\u0026#39; element with the main difference being that the content within a \u0026#39;section\u0026#39; element doesn’t necessarily need to make sense out of the context of the page. It’s advisable to use a heading element (\u0026#39;h1\u0026#39; – \u0026#39;h6\u0026#39;) to define the topic for the section. If you just need to group content together for styling purposes you should use a \u0026#39;div\u0026#39; element rather than a \u0026#39;section\u0026#39; \u0026lt;footer\u0026gt; The \u0026#39;footer\u0026#39; element is used to represent information about a section such as the author, copyright information, or links to related web pages. \u0026lt;address\u0026gt; This element is not for marking up postal address, but rather for representing the contact information for an article or web page. This could be a link to the author’s website or their email address. \u0026lt;/address\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;/section\u0026gt; Based on content and design, articles can contain sections and/or sections can contain articles. \u0026lt;/main\u0026gt; \u0026lt;footer\u0026gt; Footer for webpage \u0026lt;address\u0026gt; Link to email author webpage \u0026lt;/address\u0026gt; \u0026lt;/footer\u0026gt; \u0026lt;!-- GROUPING ELEMENTS --\u0026gt; \u0026lt;div\u0026gt; Used for grouping blocks for easy styling. \u0026lt;span\u0026gt;Used for grouping inline content\u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;Defines a paragraph\u0026lt;/p\u0026gt; \u0026lt;pre\u0026gt;Defines preformatted text\u0026lt;/pre\u0026gt; \u0026lt;blockquote cite=\u0026#34;citation_source\u0026#34;\u0026gt; Specifies a section that is quoted from another source \u0026lt;/blockquote\u0026gt; \u0026lt;q\u0026gt;For inline (short) quotations\u0026lt;/q\u0026gt; \u0026lt;ol type=\u0026#34;I\u0026#34; start=\u0026#34;1\u0026#34;\u0026gt; \u0026lt;!-- type=\u0026#34;1|a|A|i|I\u0026#34; --\u0026gt; \u0026lt;!-- Defines an ordered list. An ordered list can be numerical or alphabetical. --\u0026gt; \u0026lt;li\u0026gt;List Item I\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List Item II\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;List Item III\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;!-- Defines an unordered list. Used the same a \u0026#39;ol\u0026#39; --\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;table\u0026gt; \u0026lt;!-- Defines an HTML table --\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;!-- Defines a table row --\u0026gt; \u0026lt;th\u0026gt;Defines a table head for column\u0026lt;/th\u0026gt; \u0026lt;!-- --\u0026gt; \u0026lt;th\u0026gt;Header column 2\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Defines a table cell\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Cell row 2, column 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Cell row 3, column 1\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Cell row 3, column 2\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;figure\u0026gt; \u0026lt;img src=\u0026#34;img_source_web/or/local_file.png\u0026#34; alt=\u0026#34;alternative text if img src not found\u0026#34; width=\u0026#34;auto\u0026#34; max-width=\u0026#34;500px\u0026#34;/\u0026gt; \u0026lt;!--src=\u0026#34;./voorbeeld/realtive/path/img.jpg | C://voorbeeld/absolute/path/img.jpg | https://www.voorbeeld-url.com/img.jpg\u0026#34; --\u0026gt; \u0026lt;figcaption\u0026gt;Image caption\u0026lt;/figcation\u0026gt; \u0026lt;/figure\u0026gt; \u0026lt;!-- TEXT-LEVEL SEMANTICS --\u0026gt; All simple text is displayed without line breaks. But \u0026#39;br\u0026#39; creates \u0026lt;br/\u0026gt; a line break.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;a href=\u0026#34;link_to_webpage/or/local_file\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Link text\u0026lt;a\u0026gt; \u0026lt;!-- target=\u0026#34;_blank | _self | _parent | _top\u0026#34; --\u0026gt; \u0026lt;!--href=\u0026#34;./voorbeeld/realtive/path | C://voorbeeld/absolute/path | https://www.voorbeeld-url.com\u0026#34; --\u0026gt;\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;em\u0026gt;em-tag\u0026lt;/em\u0026gt; is used to define emphasized text. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;i\u0026gt;i-tag\u0026lt;/i\u0026gt; defines a part of text in an alternate voice or mood. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;!-- Use the \u0026lt;i\u0026gt; element only when there is not a more appropriate semantic element --\u0026gt; The \u0026lt;strong\u0026gt;strong-tag\u0026lt;/strong\u0026gt; is used to define text with strong importance. The content inside is typically displayed in bold.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;b\u0026gt;b-tag\u0026lt;/b\u0026gt; specifies bold text without any extra importance.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;small\u0026gt;small-tag\u0026lt;/small\u0026gt; defines smaller text (like copyright and other side-comments).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;s\u0026gt;s-tag\u0026lt;/s\u0026gt; specifies text that is no longer correct, accurate or relevant. The text will be displayed with a line through it.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;cite\u0026gt;cite-tag\u0026lt;/cite\u0026gt; defines the title of a creative work (e.g. a book, a poem, a song, a movie, a painting, a sculpture, etc.).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;p\u0026gt; The \u0026lt;dfn\u0026gt;dfn-tag\u0026lt;/dfn\u0026gt; stands for the \u0026#34;definition element\u0026#34;, and it specifies a term that is going to be defined within the content. \u0026lt;/p\u0026gt; The \u0026lt;abbr title=\u0026#34;abbreviation\u0026#34;\u0026gt;ABBR\u0026lt;/abbr\u0026gt;-tag defines an abbreviation or an acronym.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;time datetime=\u0026#34;2024-02-18 19:00\u0026#34;\u0026gt;time-tag\u0026lt;/time\u0026gt; defines a specific time (or datetime).\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;code\u0026gt;code-tag\u0026lt;/code\u0026gt; is used to define a piece of computer code. The content inside is displayed in the browser\u0026#39;s default monospace font.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; The \u0026lt;var\u0026gt;var-tag\u0026lt;/var\u0026gt; is used to defines a variable in programming or in a mathematical expression. The content inside is typically displayed in italic.\u0026lt;br/\u0026gt;\u0026lt;br/\u0026gt; \u0026lt;!-- FORMS AND INPUTS --\u0026gt; \u0026lt;form\u0026gt; fieldset label input text type number, password,email, radio, checkbox, submit, button, file (accept=\u0026#34;image/png, image/jpeg\u0026#34;) Placeholder value name id radiobutton checkbox dropdown met select en option (met value attr) textarea \u0026lt;/form\u0026gt; \u0026lt;!-- EXTRA --\u0026gt; -button -symbols -Details + summary -icons bron1, bron2, bron3\nEen voorbeeld mappenstructuur voor je webpagina\u0026rsquo;s root/\r|\r+---index.html\r|\r+---html/\r|\r+--- about/\r| |\r| +--- about.html\r|\r+--- contact/\r| |\r| +--- contact.html\r...\r+--- assets/\r|\r+--- images/\r|\r+--- image1.png\r... Common website layouts 4 Common website layouts with HTML-elements bron\rHTML vs HTML5 HTML5 is de nieuwere versie van HTML met een aantal nuttige voordelen. Zo is HTML5 zeer vrijgevend gezind in het weglaten van bepaalde attributen en gebruikt HTML5 default waarden voor attributen die nodig zijn maar niet specifiek uitgetyped werden. In XHTML was de basisstructuur ook vrij uitgebreid, maar gelukkig is dit sinds HTML 5 terug sterk vereenvoudigd. Bijvoorbeeld:\n\u0026lt;link href=\u0026#34;CSS/main.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; /\u0026gt; HTML5:\n\u0026lt;link href=CSS/main.css rel=stylesheet \u0026gt; Merk op dat in het HTML5 voorbeeld geen \u0026ldquo;/\u0026rdquo; heeft voor het sluitende groter dan teken, geen quotes gebruikt voor de value van het attribuut \u0026lsquo;href\u0026rsquo; en \u0026lsquo;rel\u0026rsquo; en er geen attribuut \u0026rsquo;type\u0026rsquo; gedefinieerd is. HTML5 zal hier echter niet moeilijk over doen.\nIn het algemeen is het wel een goede strategie om je HTML bestand zo specifiek mogelijk te coderen om problemen in een later stadium te vermijden.\nAangezien HTML5 dus gewoon de nieuwere versie is van HTML gaan we dit gebruiken.\nFormulieren Met de HTML die we tot nu toe gezien hebben, kan je wel informatieve pagina\u0026rsquo;s maken, maar de bezoeker kan niks anders dan dingen bekijken en links aanklikken. Om reacties of andere gegevens op te vragen, heb je formulieren nodig. In dit stuk behandelen we de opmaak van formulieren, maar we kunnen de ingevoerde gegevens nog niet verwerken.\nFormulieropbouw Een formulier bestaat steeds uit een verzameling input-elementen. Omdat er verschillende formulieren op één webpagina kunnen staan, moet je de bij elkaar horende formulierelementen groeperen onder een form-tag:\n... \u0026lt;form\u0026gt; \u0026lt;!-- different form elements --\u0026gt; \u0026lt;/form\u0026gt; ... De form-tag heeft normaal ook nog de attributen method, action en name. De elementen binnenin de form zijn bijna allemaal \u0026ldquo;replaced tags\u0026rdquo;, dus zonder innerHTML en met een /\u0026gt;-sluiting van de tag.\nAttributen van de form: twee belangrijke, de method en de action.\nDe method beschrijft op welke manier de gegevens doorgestuurd worden naar het script dat de formulierinhoud moet verwerken. Er zijn twee mogelijkheden: GET: hierbij worden de gegevens in de URL gecodeerd en wordt de formulierinhoud dus zichtbaar in de URL. Een ander belangrijk nadeel is dat de lengte van de data beperkt is. POST: bij deze methode worden de gegevens in een body ingepakt en zo doorgegeven. De lengte is nu nagenoeg onbeperkt. Deze methode wordt het meeste gebruikt. De action bevat de URL van het script dat het formulier zal moeten verwerken. Wanneer je geen action-attribuut definieert, wordt het formulier naar de huidige pagina doorgestuurd. Zolang je puur in HTML werkt, geeft dit de indruk dat het formulier gereset wordt. Text: Het eenvoudigste en ook meest gebruikte invoerelement is het één-regel tekstvak. De code hiervoor is \u0026lt;input type=\u0026quot;text\u0026quot; /\u0026gt;. De belangrijkste attributen zijn, naast de id, de size en de maxlength, die respectievelijk het aantal zichtbare letters bevatten en het maximaal aantal letters dat ingegeven kan worden. Je kan ook het type meegeven zoals onder andere: email, password, number \u0026hellip; Bijvoorbeeld: \u0026lt;input type=\u0026quot;text\u0026quot; /\u0026gt; geeft Checkbox: Belangrijk is dat je een attribuut value definieert zodat je in je JavaScript kan achterhalen welke waarde geselecteerd is. Wanneer je bovendien checked=\u0026quot;checked\u0026quot; toevoegt, zal het vakje vanaf het inladen van de pagina aangevinkt zijn. Bijvoorbeeld: \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;item\u0026quot; value=\u0026quot;checkvalue\u0026quot; /\u0026gt; check me geeft check me\nen \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;item\u0026quot; value=\u0026quot;checkvalue\u0026quot; checked=\u0026quot;checked\u0026quot; /\u0026gt; I am checked geeft I am checked\nRadio: Bij de radio-button is het belangrijk dat je een radio-groep maakt m.b.v. het attribuut name, omdat radio-knoppen uit een groep bij elkaar horen en uit die groep mag slechts één radio element geselecteerd worden. Hiervoor moet je binnen de radio-groep bij elk element de name dezelfde waarde geven. Anders wordt het beschouwd als een andere radio-groep.\nBijvoorbeeld:\nKlara \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;station\u0026#34; value=\u0026#34;klara\u0026#34; checked=\u0026#34;checked\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; Q-Music \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;station\u0026#34; value=\u0026#34;q\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; MNM \u0026lt;input type=\u0026#34;radio\u0026#34; name=\u0026#34;station\u0026#34; value=\u0026#34;-mnm\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; geeft: Klara Q-Music MNM (De oude) Button en Submit: De types button en submit zien er in de browser hetzelfde uit, maar hebben een heel ander effect. Wanneer je op een submit-knop klikt, wordt de formulierinhoud doorgestuurd naar het script dat je in het action-attribuut van de form gedefinieerd hebt.\nWanneer je op een button-knop klikt, wordt de event-handler (JavaScript) uitgevoerd die bij deze knop hoort. (Hier komen we later op terug in het cursusdeel rond JavaScript)\nBijvoorbeeld\n\u0026lt;input type=\u0026#34;button\u0026#34; value=\u0026#34;Click me\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Submit me\u0026#34; /\u0026gt; (De nieuwe) Button: De button uit de paragraaf hierboven had als groot nadeel dat het een replaced element was. Technisch betekent dit dat je geen volwaardige tag hebt met een open- en een sluit-tag en daartussen html-code die in de tag staat. Visueel houdt het in dat je de browser de html-code vervangt door een standaard knop, maar dat je verder geen structuur kan geven aan de inhoud van de knop. Zo kan je bijvoorbeeld geen figuren op je knop zetten. Daarom vond men het nodig om een volwaardige button-tag toe te voegen (ook al kan je hetzelfde bereiken met de replaced element button en wat specifieke CSS code). Tussen de open- en sluit-tag zet je nu wat op de knop moet verschijnen.\nNaast de name en id is het belangrijkste attribuut van de button het type: button, submit en reset.\nHidden:\nHet hidden input-element is een element dat niet zichtbaar gemaakt wordt in de browser. Het biedt de mogelijkheid om extra informatie door te geven die onzichtbaar is voor de gebruiker, bv. informatie die we op een vorige pagina binnengehaald hebben of eender welke waarde die relevant is voor de formulierverwerking maar die de gebruiker niet zelf moet invullen.\nBijvoorbeeld: \u0026lt;input type=\u0026quot;hidden\u0026quot; name=\u0026quot;geheim\u0026quot; value=\u0026quot;317\u0026quot; /\u0026gt; geeft:\nText Area:\nDe volgende invoerelementen zijn een uitzondering omdat het geen replaced elementen zijn. Hier gaat het om volwaardige tags. De textarea dient om tekst in te kunnen geven die meer dan 1 regel bevat. Met \u0026lt;input type=”text\u0026quot;/\u0026gt; konden we al wel tekst ingeven, maar slechts op één regel. Met textarea kan dit onbeperkt.\nBijvoorbeeld: \u0026lt;textarea\u0026gt;typ hier tekst\u0026lt;/textarea\u0026gt; geeft: typ hier tekst\rMet CSS kunnen we de grootte en vormgeving van de textarea instellen\nSelect en Option:\nBijvoorbeeld:\n\u0026lt;select id=\u0026#34;station\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;klara\u0026#34;\u0026gt;Klara\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;qmusic\u0026#34;\u0026gt;Qmusic\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mnm\u0026#34;\u0026gt;MNM\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; Klara\rQmusic\rMNM\rHier schrijf je dus binnen je select een lijst met option tags. Wat tussen de option staat, verschijnt in het menu en datgene wat bij de value staat, komt terecht in het script dat het formulier verwerkt.\nAan de select kan je een attribuut size meegeven dat bepaalt hoe groot de niet-uitgeklapte lijst is, en wanneer je multiple=\u0026quot;multiple\u0026quot; aanduidt, kan je via Ctrl+klik verschillende elementen tegelijk selecteren.\nBijvoorbeeld:\n\u0026lt;select id=\u0026#34;station\u0026#34; size=\u0026#34;3\u0026#34; multiple=\u0026#34;multiple\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;klara\u0026#34;\u0026gt;Klara\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;qmusic\u0026#34; selected=\u0026#34;selected\u0026#34;\u0026gt;Qmusic\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;mnm\u0026#34; selected=\u0026#34;selected\u0026#34;\u0026gt;MNM\u0026lt;/option\u0026gt; \u0026lt;/select\u0026gt; Klara\rQmusic\rMNM\rTabellen:\nWanneer je gegevens in een tabel wil plaatsen, moet je tabellen gebruiken. Hiervoor bestaan de tags table, tr en td, de afkortingen van table, table row en table data. Merk op dat HTML vooral rijen ziet, terwijl wij eerder kolommen zien. Dat maakt het soms moeilijker om een tabel op te stellen, de structuur blijft wel logisch:\nEerst maak je een tabel aan: \u0026lt;table\u0026gt; ... \u0026lt;/table\u0026gt; Binnen die tabel definieer je verschillende rijen: \u0026lt;tr\u0026gt; ... \u0026lt;/tr\u0026gt; Bovenaan kan je ook een hoofding plaatsen met \u0026lt;th\u0026gt; i.p.v. een gewone rij. En in elke rij kan je verschillende vakjes definiëren met \u0026lt;td\u0026gt;...\u0026lt;/td\u0026gt;. Bijvoorbeeld:\n\u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Arne Duyver\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Informatica \u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Tessenderlo\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Mark Huybrechts\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Elektromechanica\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;Schoten\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; geeft:\nArne Duyver Informatica Tessenderlo Mark Huybrechts Elektromechanica Schoten Tabellen zijn vooral interessant om formulieren te een layout te geven. In de eerste kolom zet je dan de labels (de uitleg bij wat je moet invullen) en in de tweede kolom de inputs, zodat die verticaal uitgelijnd zijn.\nOpdrachten Maak een HTML-bestand en noem het portfolio.html\nGeef de titel van je webpagina de naam \u0026ldquo;portfolio\u0026rdquo;.\nVoeg jezelf toe als auteur van de webpagina\nGebruik het header element om de onderstaande structuur aan te brengen aan je webpagina.\nExpertise Over mij Mijn projecten Technische vaardigheden en CV Contact Gebruik de relevante html elementen om het volgende toe te voegen aan je webpagina: voeg boven de header expertise een welkomstbericht toe. (Voor inspiratie voor het tekstje kan je ChatGPT gebruiken, de vormgeving doe je ZELF). Emphasize een aantal inspirerende woorden door ze in het vetgedrukt/schuin te zetten.\nVoeg ook een mooie afbeelding toe die je online ophaalt. Gebruik hiervoor het \u0026lsquo;figure\u0026rsquo; element en voeg een caption toe\nPlaats de welkomsttekst binnenin een div en geef die div de klasse naam \u0026lsquo;welcometext\u0026rsquo;.\nGeef in de Expertise sectie een lijst waarin je je eigen vaardigheden in de verf zet. (je kan ook inspiratie opdoen op andere portfolio websites).\nPlaats in de Expertise sectie ook een link naar de sectie Technische vaardigheden en CV\nPlaats in de \u0026lsquo;Over mij\u0026rsquo; je favoriete quote van je lievelingsfilm/-boek in de Over mij sectie. Gebruik hier het juiste element voor.\nGeef ook wat meer informatie over jezelf en plaats minstens één belangrijke zin in een span en geef die de id \u0026lsquo;important-sentence\u0026rsquo;.\nPlaats hier ook een afbeelding (de afbeelding moet je lokaal hebben staan)\nMaak onder de sectie \u0026lsquo;Mijn projecten\u0026rsquo; subsecties voor alle projecten die je al eens gemaakt hebt. Bijvoorbeeld je project van ELSY van het eerste jaar, je PES project, eigen andere projecten …\nOnder technische vaardigheden maak je een tabel met je verschillende opleidingen in (naam opleiding, startjaar, eindjaar). Voeg ook een lijst met beheerste talen toe en link hier ergens naar volgende webpagina: https://detaalbrigade.nl/taalniveaus/\nBreng wat meer structuur aan in je teksten met divs, paragrafen en line breaks. Voeg ook eens wat symbolen via hun html-code toe waar nuttig. Gebruik verschillende achtergrond kleurtjes om te bekijken hoe de verschillende structuren werken (doe dit ook voor je span).\nGebruik inputs boxen, knoppen, checkboxen, … om een contactformulier aan te maken. Je vindt hier ontelbare voorbeelden van op het internet.\nNeem nu je \u0026lsquo;Contact\u0026rsquo; sectie en plaats die in een nieuw bestand genaamd \u0026lsquo;contact.html\u0026rsquo; en plaats deze in de subfolder genaamd \u0026lsquo;contact\u0026rsquo;.\nMaak een gepast formulier aan voor deze webpagina. Maak footer aan waarmee je navigeert naar je \u0026lsquo;contact\u0026rsquo; page van je website.\nVoeg in je head een link toe naar fa-icons zodat je die icoontjes kan gebruiken: \u0026lt;link rel=\u0026quot;stylesheet\u0026quot; href=\u0026quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css\u0026quot;\u0026gt;\nVoeg aan je footer ook een link toe via een icoon naar je Github profiel en een icoon voor je linkedIn profiel (indien je dat hebt) Maak een formulier waarin mensen zich kunnen inschrijven voor een nieuwsbrief.\nMaak een formulier om een bespreking van een optreden van een artiest in te vullen.\nMaak een formulier waarin je een pizza kan samenstellen.\nTest jezelf Klik hier om jezelf te testen met de online HTML quiz van w3schools. Of klik hier voor wat extra oefeningen.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/introductie/",
	"title": "Introductie",
	"tags": [],
	"description": "",
	"content": "\rFull Stack Web Development: 4 belangrijke woorden Development: hoofddoel = \u0026ldquo;ontwikkeling\u0026rdquo; = iets maken conform profiel IIW Web: domein = websites geen installatie nodig, gemakkelijk te updaten Stack: verschillende technologieën als lagen op elkaar verschillende doelen =\u0026gt; verschillende aanpakken Full: hoofddoel = \u0026ldquo;ontwikkeling\u0026rdquo; = iets maken verschil met PBA: ook gloednieuwe technologie \u0026lsquo;van de toekomst\u0026rsquo; De \u0026lsquo;stack\u0026rsquo; was er niet altijd. In de beginjaren van de computerwetenschap was er weinig sprake van full stack architectures. Naarmate de technologie evolueerde, ontstond er een groeiende specialisatie per laag, waarbij elke laag specifieke taken en verantwoordelijkheden kreeg. Dit leidde tot een periode van profilatiedrang, waarin verschillende technologieën en protocollen werden ontwikkeld en getest. Uiteindelijk resulteerde dit in een beweging naar standaardisatie, waarbij gemeenschappelijke normen en protocollen werden vastgesteld om interoperabiliteit en efficiëntie te bevorderen. Ondanks deze vooruitgang is de stack nog steeds in volle ontwikkeling en transitie, met voortdurende innovaties en verbeteringen. Interessant genoeg zien we tegenwoordig een trend naar unificatie, waarbij geïntegreerde oplossingen en full-stack benaderingen in populariteit toenemen, wat de cyclus van technologische evolutie voortzet.\nEen kleine historie: ARPANET en CERN Op 29 oktober 1969 werd het eerste bericht via het ARPANET verstuurd, een voorloper van het internet. Deze gebeurtenis markeerde het begin van een nieuw tijdperk in de communicatie. Twintig jaar later, in 1989, stelde Tim Berners-Lee, een Britse wetenschapper die bij CERN (het Europees Laboratorium voor deeltjesfysica) werkte, een systeem voor dat later bekend zou worden als het World Wide Web (www). Voor deze naam bestond had het namen zoals \u0026ldquo;The Information Mine\u0026rdquo; en later \u0026ldquo;Mine of Information\u0026rdquo;. Zijn doel was om wetenschappers wereldwijd in staat te stellen informatie gemakkelijk te delen.\nTim Berners-Lee [1]\rBerners-Lee bracht in dat jaar een proposal voor \u0026ldquo;a large hypertext database with typed links\u0026rdquo; en begon aan de implementatie ervan. Robert Cailliau (manager van Tim Berners-Lee en een Belg) herschreef het proposal gaande over het World Wide Web samen met Tim Berners-Lee wat later werd gepubliceerd in 1990 onder de titel \u0026ldquo;Information Management: A Proposal\u0026rdquo;. [1]\nRobert Cailliau (B, links) [1]\rOp 6 augustus 1991 werd dan de eerste website gelanceerd, wat de basis legde voor het moderne internet zoals we dat nu kennen. Dankzij deze innovaties bij CERN werd het internet toegankelijk voor een breder publiek en begon het snel te groeien en evolueren tot het internet dat je vandaag de dag kent.\nScreenshots van 1992\rIn 1991 bestonden er dus slechts drie websites: CERN, de World Wide Web Virtual Library, een volledig overzicht dat manueel gecureerd werd, en het Stanford Linear Accelerator Center, dat werd opgezet na een bezoek aan CERN door Paul Kunz.\nEen website bestaat uit hypertext dat opgeslagen wordt onder het HTML-formaat (HyperText Markup Language). HTML is gebaseerd op XML waardoor alles in open- en sluit-tags staat die een boomstructuur volgen. Een HTML-bestand beschrijft de structuur van een document (Cfr. wetenschappelijke papers). Met hypertext kan je ook figuren, videos en links inladen. Zonder CSS, wat in de begin jaren nog niet van toepassing was, kiest de browser de vormgeving bv:\nVoorbeeld HTML\rHet client-server model Het client-server model is een architectuurprincipe waarbij taken en verantwoordelijkheden worden verdeeld tussen twee soorten entiteiten: clients en servers. In dit model fungeert de client als de gebruiker of het apparaat dat verzoeken indient voor diensten of middelen, terwijl de server deze verzoeken verwerkt en de gevraagde diensten of middelen levert. Het internet werk volgens dit model waarbij een webbrowser (client) een verzoek stuurt naar een webserver om een webpagina op te halen. De server ontvangt het verzoek, verwerkt het en stuurt de benodigde gegevens terug naar de client, die deze vervolgens weergeeft. Dit model biedt schaalbaarheid, omdat meerdere clients tegelijkertijd verbinding kunnen maken met een enkele server, en flexibiliteit, omdat servers verschillende soorten diensten kunnen aanbieden aan verschillende clients. Nog een groot voordeel werd hierboven al aangehaald namelijk dat je slecht op 1 plaats (de server) je files moet updaten om veranderingen aan je webpagina tot aan de gebruiker te krijgen. Dit is helemaal anders voor software pakketten bijvoorbeeld waarbij elke gebruiker zelf een nieuwe versie moet downloaden en installeren indien die beschikbaar is.\nClient-server model [2]\rHieronder vind je in grote lijnen alle stappen die ondernomen worden zodat je uiteindelijk je gewenste website te zien krijgt:\nJe geef de nodige URL van je website in in je webbrowser. Je voert zo met je webbrowser een HTTP-request uit, meestal van het type GET. Dit verzoek vraagt om de inhoud van een specifieke webpagina. De webbrowser gebruikt DNS (Domain Name System) servers om de domeinnaam om te zetten in een IP-adres, zodat je computer weet waar hij de server kan vinden die de websitebestanden beheert. Je computer maakt een verbinding met de server via het internet. Dit gebeurt meestal via een reeks routers en netwerken die de gegevenspakketten naar de juiste bestemming sturen. De server (de backend) ontvangt het HTTP-verzoek en stuurt de nodige frontend code (ook wel client-side code genoemd) terug naar de computer van de gebruiker. Deze code bestaat meestal uit HTML, CSS en JavaScript. De webbrowser op je computer ontvangt de frontend code en begint met het renderen van de webpagina. Dit houdt in dat de HTML-structuur wordt opgebouwd, de CSS wordt toegepast om de pagina op te maken, en de JavaScript wordt uitgevoerd om interactieve elementen te laden. Zodra de pagina volledig is geladen, kan de gebruiker ermee interageren. Dit kan variëren van het klikken op links en knoppen tot het invullen van formulieren en het uitvoeren van zoekopdrachten. (Tijdens het gebruik van de webpagina kunnen er asynchrone verzoeken, zoals AJAX, worden uitgevoerd om extra gegevens van de server op te halen zonder de hele pagina te vernieuwen. Dit zorgt voor een dynamische en responsieve gebruikerservaring.) Verdere evolutie in de jaren 90 1992: 50 a 60 sites. Volgens Guido Van Rossem (ontwerper Python).\nEind 1993: 623 websites. Volgens Matthew Gray van MIT (World Wide Web Wanderer). Websites zoals: ALIWEB (eerste zoekmachine), Bloomberg, IMDb, Internet Underground Music Archive, NASA, MTV, photo.net, Trojan Room coffee pot (Eerste webcam. Checken of de koffie klaar is), Wired.com \u0026hellip;\nMidden 1994: 2738 websites. Einde 1994: al meer dan 10 000 websites, met onder andere: Apple, Microsoft, Pizzahut, Purple.com \u0026hellip;\nVia de Waybackmachine kan je sites bekijken zoals ze er op een bepaalde datum uitzagen in het verleden\nWebstandaarden HTML5 (HyperText Markup Language 5) is de nieuwste versie van de standaardtaal voor het structureren en presenteren van inhoud op het web. Het introduceert nieuwe elementen en API\u0026rsquo;s die multimedia, grafische weergave en interactieve inhoud ondersteunen zonder de noodzaak van externe plug-ins.\nECMAScript is de standaard waarop JavaScript is gebaseerd. Het definieert de specificaties voor scriptingtalen en zorgt voor consistentie en interoperabiliteit tussen verschillende implementaties van JavaScript.\nJavaScript zelf is een veelzijdige programmeertaal die wordt gebruikt om dynamische en interactieve webpagina\u0026rsquo;s te creëren. Het stelt ontwikkelaars in staat om client-side scripts te schrijven die reageren op gebruikersinvoer, gegevens manipuleren en de gebruikerservaring verbeteren.\nDe eerste stack De eerste echte vorm van een stack doet denken aan het Model-View-Controller (MVC) patroon, dat we al gezien hebben in het vak Software-ontwerp in Java bij de eerstejaars studenten van de opleiding Industriële Ingenieurswetenschappen (1BA IIW). Dit patroon helpt bij het creëren van duurzame software door de applicatie op te splitsen in modules met gescheiden verantwoordelijkheden.\nMeer concreet kan je HTML, wat de inhoud en structuur bepaalt, vergelijken met het Model. CSS wat de styling voorziet, kan je zien als de View en JavaScript wat voor de interactie met de gebruiker zorgt als de Controller.\nEen duidelijk voorbeeld wat weergeeft wat de kracht van CSS kan zijn en hoe je eenzelfde HTML-bestand een compleet ander gevoel kan geven met styling vind je op csszengarden. Verder kan je met CSS ervoor zorgen dat je website voldoet aan de eisen van een Responsive Design wat belangrijker wordt nu we meer en meer met verschillende devices met verschillende soorten schermen websites opvragen.\nMet JavaScript kan je dan weer gebruikersinteractie verzorgen zoals Formuliervalidatie en verwerking of Asynchrone communicatie. Dat laatste is essentieel om een performante en responsive website te garanderen. Door gebruik te maken van technieken zoals AJAX (Asynchronous JavaScript and XML) en Fetch API, kunnen we gegevens van de server ophalen en verwerken zonder de hele pagina te herladen. Dit zorgt voor een soepelere gebruikerservaring, omdat de gebruiker niet hoeft te wachten op volledige pagina-verversingen. Bovendien maakt asynchrone communicatie het mogelijk om meerdere verzoeken tegelijkertijd af te handelen, wat de efficiëntie van de applicatie verhoogt. Hierdoor kunnen we real-time updates en dynamische inhoud bieden.\nUitbreiding van de stack: de backend Een webserver, zoals Apache, Nginx of Xitami, speelt een belangrijke rol in het hosten van websites en het beheren van de communicatie tussen de gebruiker en de server. Deze servers kunnen op een veilige manier verbinding maken met databases en andere systemen om dynamische inhoud te leveren.\nIn de vroege jaren \u0026lsquo;90 werd de Common Gateway Interface (CGI) geïntroduceerd als een manier om externe software, geschreven in talen zoals C en Perl, te integreren met webservers. Dit maakte het mogelijk om dynamische webpagina\u0026rsquo;s te genereren op basis van gebruikersinvoer.\nLater werden modules binnen de webserver zelf populairder, zoals PHP en ASP, die direct in de webserver konden worden geïntegreerd voor betere prestaties en eenvoudiger beheer.\nDaarnaast zijn er taalafhankelijke servers ontwikkeld die specifiek zijn ontworpen voor bepaalde programmeertalen. Voorbeelden hiervan zijn Tomcat voor Java, Flask voor Python en Laravel voor PHP. Deze servers bieden geoptimaliseerde omgevingen voor het uitvoeren van applicaties geschreven in hun respectieve talen, wat de ontwikkeling en het onderhoud van webapplicaties vereenvoudigt.\nEen Full Stack met XAMPP XAMPP is een gratis en open-source cross-platform full stack webserver oplossing, ontwikkeld door Apache Friends. Het is een acroniem dat staat voor Cross-Platform, Apache, MySQL, PHP, en Perl. XAMPP biedt een eenvoudige manier om een lokale webserver op te zetten op je eigen computer, wat ideaal is voor het ontwikkelen en testen van webapplicaties voordat ze naar een live server worden verplaatst.6, 7\nBelangrijkste Componenten van XAMPP Apache HTTP Server: De webserver die HTTP-verzoeken afhandelt en webpagina\u0026rsquo;s levert aan gebruikers. MariaDB: Een relationele database die wordt gebruikt voor het opslaan en beheren van gegevens. PHP: Een server-side scripting taal die wordt gebruikt voor het ontwikkelen van dynamische webpagina\u0026rsquo;s. Perl: Een programmeertaal die vaak wordt gebruikt voor tekstverwerking en systeembeheer. Voordelen van XAMPP Eenvoudige Installatie: XAMPP kan snel en eenvoudig worden geïnstalleerd op verschillende besturingssystemen, zoals Windows, Linux en macOS. Gebruiksvriendelijk: Het bevat een controlepaneel waarmee je gemakkelijk de verschillende componenten kunt starten en stoppen. Veelzijdigheid: Naast de basiscomponenten biedt XAMPP ook ondersteuning voor populaire webapplicaties zoals WordPress en Joomla. Door de eenvoud en veelzijdigheid van XAMPP kunnen ontwikkelaars snel een WAMP (Windows, Apache, MySQL, PHP) of LAMP (Linux, Apache, MySQL, PHP) stack opzetten en direct aan de slag gaan met het bouwen en testen van hun projecten.8\nPHP PHP, wat staat voor Hypertext Preprocessor, is een populaire server-side scripting taal die speciaal is ontworpen voor webontwikkeling. Hier zijn enkele kernpunten over PHP:\nServer-side: PHP wordt uitgevoerd op de server, wat betekent dat de code wordt verwerkt op de server voordat de resulterende HTML naar de browser van de gebruiker wordt gestuurd. Dynamische webpagina\u0026rsquo;s: PHP maakt het mogelijk om dynamische inhoud te genereren, zoals het ophalen van gegevens uit een database en deze weergeven op een webpagina. Gemakkelijk te leren: PHP heeft een relatief lage leercurve, waardoor het toegankelijk is voor beginners. Goed ondersteund: PHP wordt ondersteund door de meeste webservers en kan eenvoudig worden geïntegreerd met verschillende databases, zoals MySQL. Open source: PHP is gratis te gebruiken en heeft een grote gemeenschap die bijdraagt aan de ontwikkeling en ondersteuning ervan. Bovendien is PHP ook lightweight. Dit kan op verschillende manieren geïnterpreteerd worden: kleine footprint, beperkte features, gemakkelijk te leren (zoals hierboven vermeld), gemakkelijk snel en/of handig om uit te rollen. Alhoewel academici wat neerkijken op PHP maakt de makkelijke leercurve en het simpel uitrollen het toch een zeer interessante optie. (w3schools PHP)\nThe full stack met HTML+CSS+JavaScript kan je op verschillende manieren aanmaken bijvoorbeeld met:\nJSP: Java Servlet Pages, dikwijls met Tomcat ASP: Active Server Pages: .NET-technologie React/ReactNative NodeJS HTML + CSS + PHP + Javascript Werken met een framework Definitie van een framework:\n\u0026ldquo;Een universele, herbruikbare software-omgeving die software-ontwikkeling gemakkelijker maakt door enerzijds code aan te bieden en anderzijds een ontwikkelstijl op te leggen\u0026rdquo;\nVoordelen van werken met een framework zijn:\nOntwikkeling gaat sneller Framework kan een aantal taken zelf uitvoeren Minder kans op fouten Gemakkelijker onderhoud Grotere schaalbaarheid Veel ingebouwde features Legt filosofie/ontwerppatroon/ontwikkelstijl op: vooral MVC!! Beschermt ontwikkelaar tegen denkfouten Dwingt je in een weinig flexibele structuur Laravel Het populairste PHP framework is nog steeds Laravel. Dat komt door zijn sterke punten:\nOpen source Mooie MVC Artisan tool die veel code genereert Database migraties \u0026amp; seeders Object georiënteerde code \u0026amp; beschikbare bibliotheken Gemakkelijke authorisatie en authenticatie Out-of-the-box ondersteuning voor zowel applicatiebouw als services Veel tutorials \u0026ldquo;Laracasts\u0026rdquo; MVC-filosofie van Laravel\rEvolutie JavaScript JavaScript is sterk geëvolueerd en wordt nu niet alleen gebruikt voor single page applications in de browser, maar ook als server-side programmeertaal met behulp van Node.js bijvoorbeeld. Node.js maakt het mogelijk om JavaScript buiten de browser te draaien, waardoor het geschikt is voor server-side scripting en het bouwen van schaalbare netwerkapplicaties.\nEen nieuwe en veelbelovende toevoeging aan het JavaScript-ecosysteem is Svelte, samen met SvelteKit. Svelte is een modern framework dat compileert naar uiterst efficiënte JavaScript, wat resulteert in snellere en kleinere applicaties. SvelteKit biedt een complete oplossing voor het bouwen van webapplicaties, inclusief server-side rendering en statische sitegeneratie, waardoor ontwikkelaars nog meer flexibiliteit en kracht krijgen bij het bouwen van moderne webapplicaties.\nSvelte + Svelte kit = Fast Fun Flexible 9\rTermen uitgelegd Het internet: Het internet is een wereldwijd netwerk van verbonden computers en servers dat communicatie en informatie-uitwisseling mogelijk maakt. Het bestaat uit een reeks protocollen en standaarden die zorgen voor de overdracht van gegevens. Het internet stelt gebruikers in staat om toegang te krijgen tot een enorme hoeveelheid informatie, diensten en toepassingen, variërend van eenvoudige e-mails tot complexe webapplicaties. Door middel van het internet kunnen mensen wereldwijd met elkaar communiceren, samenwerken en informatie delen, wat het een essentieel onderdeel maakt van het moderne leven en de digitale economie.\nWat is \u0026lsquo;de Cloud\u0026rsquo; dan?: De cloud verwijst naar een netwerk van servers die via het internet toegankelijk zijn en een breed scala aan diensten en middelen aanbieden, zoals opslag, databases, netwerken, software en analytische tools.\nWorld Wide Web: Dit is een systeem van onderling verbonden documenten en andere webbronnen, toegankelijk via het internet. Het WWW maakt gebruik van hypertext om documenten te koppelen, waardoor gebruikers via hyperlinks van de ene pagina naar de andere kunnen navigeren. Het bestaat uit webpagina\u0026rsquo;s die zijn geschreven in HTML en worden weergegeven door webbrowsers.\nEen server Een server is simpelweg een (krachtige) computer (of systeem) dat middelen, data, diensten of programma\u0026rsquo;s beheert en beschikbaar stelt aan andere computers, de zogenaamde clients, via een netwerk. Servers kunnen verschillende rollen vervullen, zoals het hosten van websites, het beheren van e-mailverkeer, het opslaan van bestanden of het uitvoeren van applicaties. Ze zijn essentieel voor het functioneren van netwerken en het internet, omdat ze de centrale punten zijn waar gegevens worden verwerkt en gedeeld. Servers draaien vaak gespecialiseerde software die is ontworpen om specifieke taken efficiënt en betrouwbaar uit te voeren.\nWebbrowser Dit is een applicatie waarmee gebruikers toegang kunnen krijgen tot en navigeren op het World Wide Web. Het stelt gebruikers in staat om webpagina\u0026rsquo;s te bekijken, multimedia-inhoud af te spelen en online informatie te zoeken. Bekende webbrowsers zijn Google Chrome, Mozilla Firefox, Microsoft Edge en Safari. Webbrowsers interpreteren en tonen HTML-code, waardoor de inhoud van websites op een gebruiksvriendelijke manier wordt gepresenteerd.\nURL Dit is het adres dat wordt gebruikt om een specifieke bron op het internet te vinden. Het bestaat uit verschillende onderdelen die samen aangeven waar de bron zich bevindt en hoe deze kan worden benaderd. Een typische URL ziet er als volgt uit: https://www.voorbeeld.com/pagina. De belangrijkste onderdelen van een URL zijn:\nProtocol: Dit geeft aan welke methode wordt gebruikt om toegang te krijgen tot de bron. Bijvoorbeeld http of https (voor beveiligde verbindingen). Domeinnaam: Dit is het unieke adres van de website, zoals voorbeeld.com, waarbij de .com staat voor \u0026ldquo;commercial\u0026rdquo; en oorspronkelijk bedoeld was voor commerciële organisaties 3. Landcodes, zoals .be voor België of .de voor Duitsland, worden aangeduid met ccTLD\u0026rsquo;s (country code top-level domains) en vertegenwoordigen specifieke landen 4. Het aantal beschikbare domeinnamen is vast, en ze worden verdeeld en beheerd door de Internet Assigned Numbers Authority (IANA), die verantwoordelijk is voor de wereldwijde coördinatie van het Domain Name System (DNS). 4, 5. Pad: Dit geeft de specifieke locatie van een bestand of pagina op de server aan, zoals /pagina. Een URL kan ook aanvullende informatie bevatten, zoals een poortnummer, queryparameters en fragmenten, die verdere specificaties geven over hoe de bron moet worden benaderd of weergegeven. (Deze dingen bespreken we verder in deze cursus en in de cursus van \u0026ldquo;Cloud Computing\u0026rdquo;)\nHTTP-request Een HTTP-request is een verzoek dat door een client, zoals een webbrowser, naar een server wordt gestuurd om toegang te krijgen tot een specifieke bron op het internet. Dit is een protocol dat de regels en standaarden definieert voor de communicatie tussen clients en servers. HTTP (HyperText Transfer Protocol) maakt het mogelijk om webpagina\u0026rsquo;s, afbeeldingen, video\u0026rsquo;s en andere inhoud op te vragen en te ontvangen. Een typisch HTTP-request bevat:\nHeaders: Deze bevatten metadata over het verzoek, zoals de gebruikte browser, de gewenste taal, en de inhoudstypen die de client accepteert, URL: Dit is het adres van de bron die de client wil opvragen, Method: Dit geeft aan welke actie de client wil uitvoeren, zoals GET (gegevens opvragen), POST (gegevens verzenden), PUT (gegevens bijwerken), of DELETE (gegevens verwijderen), Body: Dit is het gedeelte van het verzoek dat gegevens bevat die naar de server worden gestuurd. In de body kunnen verschillende soorten gegevens worden opgenomen, zoals JSON (JavaScript Object Notation) of XML (eXtensible Markup Language). De server ontvangt het verzoek, verwerkt het en stuurt een HTTP-response terug naar de client met de gevraagde gegevens of een foutmelding indien het verzoek niet kan worden vervuld.\nEnkele veelvoorkomende (fout)meldingen zijn:\n200 OK: Dit betekent dat het verzoek succesvol is verwerkt en de gevraagde bron is gevonden en teruggestuurd. 404 Not Found: Deze foutmelding geeft aan dat de gevraagde bron niet is gevonden op de server. Dit kan gebeuren als de URL verkeerd is of de bron is verwijderd. 301 Moved Permanently: Dit geeft aan dat de gevraagde bron permanent is verplaatst naar een nieuwe URL. De client moet de nieuwe URL gebruiken voor toekomstige verzoeken. 500 Internal Server Error: Dit betekent dat er een algemene serverfout is opgetreden die het verzoek niet kon verwerken. Dit kan verschillende oorzaken hebben, zoals een fout in de serverconfiguratie of een probleem met de server zelf. 403 Forbidden: Deze foutmelding geeft aan dat de server het verzoek begrijpt, maar weigert het uit te voeren. Dit kan te maken hebben met toegangsrechten of beveiligingsinstellingen. 400 Bad Request: Dit betekent dat de server het verzoek niet kan verwerken vanwege een clientfout, zoals een onjuiste syntax of een ongeldig verzoek. DNS server Een DNS-server (Domain Name System-server) is een systeem dat domeinnamen vertaalt naar IP-adressen en omgekeerd. Wanneer je een webadres (zoals www.voorbeeld.com) in je browser invoert, stuurt je computer een verzoek naar een DNS-server om het bijbehorende IP-adres op te zoeken. Dit IP-adres is nodig om de juiste server te vinden en de gevraagde website te laden. DNS-servers fungeren als een soort telefoonboek voor het internet, waardoor gebruikers gemakkelijk toegang kunnen krijgen tot websites zonder de complexe numerieke IP-adressen te hoeven onthouden. Ze spelen een cruciale rol in het functioneren van het internet door ervoor te zorgen dat gegevens efficiënt en correct worden gerouteerd. Een populaire DNS Server is deze van google. Je vind deze terug op het IP-adres 4.4.4.4 of 8.8.8.8\nIP adres Een IP-adres (Internet Protocol-adres) is een uniek numeriek label dat aan elk apparaat in een netwerk wordt toegewezen. Het dient twee hoofdfuncties: identificatie van het host- of netwerkinterface en adressering van de locatie. Er zijn twee soorten IP-adressen: IPv4, dat bestaat uit vier groepen cijfers gescheiden door punten (bijv. 192.168.0.1), en IPv6, dat een langere, hexadecimale notatie gebruikt (bijv. 2001:0db8:85a3:0000:0000:8a2e:0370:7334).\nLAN (Local Area Network) en WAN (Wide Area Network) zijn twee soorten netwerken die gebruik maken van IP-adressen, maar er zijn fundamentele verschillen:\nLAN: Dit is een netwerk dat een klein geografisch gebied beslaat, zoals een huis, kantoor of school. Apparaten binnen een LAN communiceren direct met elkaar via lokale IP-adressen. Een router binnen een LAN vertaalt deze lokale IP-adressen naar een openbaar IP-adres voor communicatie met externe netwerken. WAN: Dit is een netwerk dat een groot geografisch gebied beslaat, zoals een stad, land of zelfs de hele wereld. Het internet zelf is een voorbeeld van een WAN. WAN\u0026rsquo;s verbinden meerdere LAN\u0026rsquo;s met elkaar, waardoor apparaten in verschillende LAN\u0026rsquo;s met elkaar kunnen communiceren via openbare IP-adressen. Ports Een port is een numerieke waarde die wordt gebruikt om specifieke processen of diensten op een netwerkapparaat te identificeren. Het fungeert als een communication-endpoint voor netwerkverbindingen. Ports zorgen ervoor dat gegevens naar de juiste applicatie of dienst op een apparaat worden gestuurd.\nEr zijn twee soorten ports: well-known ports en dynamische of private ports. Well-known ports hebben vaste nummers (0-1023) en worden toegewezen aan veelgebruikte diensten zoals HTTP (port 80) en HTTPS (port 443). Dynamische of private ports (1024-65535) worden meestal toegewezen aan clienttoepassingen en kunnen variëren afhankelijk van de behoeften van de applicatie.\nMac adres Een MAC-adres (Media Access Control-adres) is een uniek identificatienummer dat aan de netwerkinterfacekaart (NIC) van een apparaat is toegewezen. Dit adres bestaat uit 48 bits en wordt meestal weergegeven in zes groepen van twee hexadecimale cijfers, gescheiden door dubbele punten of streepjes (bijv. 00:1A:2B:3C:4D:5E).\nHet MAC-adres wordt gebruikt op het datalinkniveau van het OSI-model om apparaten binnen een lokaal netwerk (LAN) te identificeren en te communiceren. In tegenstelling tot IP-adressen, die kunnen veranderen afhankelijk van het netwerk, blijft een MAC-adres constant voor een specifieke netwerkinterface. Dit maakt het een essentieel onderdeel voor netwerkbeheer, beveiliging en het oplossen van netwerkproblemen.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/php_basics/",
	"title": "PHP: Hypertext Preprocessing",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nPHP: Hypertext Preprocessing We gaan met PHP leren:\ndynamische webpagina\u0026rsquo;s maken onze website te beveiligen te communiceren met een database De PHP syntax PHP is een scripting language die voornamelijk ontworpen werd en gebruikt wordt voor webdevelopment. De PHP code kan onmiddellijk in HTML geïntegreerd worden en wordt uitgevoerd aan de serverside. Aangezien de code aan de serverside uitgevoerd wordt, blijft de broncode verborgen voor de client (goed voor de veiligheid).\nPHP is al een oudere taal maar wordt nog steeds gebruikt in ongeveer 78% van alle websites (Python 2%). Er worden ook nog steeds updates geproduceerd. PHP is namelijk specefiek ontwikkeld voor webdevelopment en Python is een meer all-round language, wat dit verschil meer verklaard. Dit wil niet zeggen dat je enkel webapplicaties kan maken met PHP, Je kan ook standalone applicaties maken maar hiervoor wordt PHP minder gebruikt. Enkele prominenten bedrijven die nog PHP gebruiken als deel van hun backend zijn: Facebook, Wikipedia, Canva \u0026hellip;\nOm PHP te leren gaan we gebruik maken van XAMPP. Met behulp van XAMPP kunnen we op onze pc een lokale server laten draaien die onze backend implementeerd en onze website gaat kunnen displayen. Later gaan we PHP zien gebruikt worden in het populaire framework Laravel. Laravel gaat voor ons al veel organisatorisch werk verrichten.\nEen PHP file kan ook enkel HTML code bevatten. Je kan dus gewoon bij alle documenten met de .html extentie de extentie vervangen door .php. Om dan effectief PHP code te laten uitvoeren in gebruik je volgende syntax:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt;...\u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;?php //Je php-code komt hier ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Je kan ook pure PHP-code gebruiken in je .php file (Bijvoorbeeld pagina dient enkel voor dataprocessing maar bevat geen visuele elementen om te tonen). Je opent dan ook nog met \u0026lt;?php maar de sluitingstag wordt dan weggelaten:\n\u0026lt;?php //Je php-code komt hier XAMPP Om onze site te hosten moeten al onze bronbestanden staan in de htdocs. Dan kan je surfen naar http://localhost/ om je webpagina te bezoeken.\nOpdrachten Overloop de PHP Tutorials op W3Schools. Maak op W3Schools.com de exercises rond php (Je mag advanced php overslaan). Maak op W3Schools de PHP Quiz. (Sommige antwoorden hebben we nog niet gezien, maar 90% wel) Gebruik een HTML form, POST-method en PHP om een rekenmachine webpagina te maken. Connect to database + security demos Opdrachten Maak een volledig werkende signup, signin website die gebruik maakt van session-storage om bij te houden welke gebruiker is ingelogd. Zorg voor login, logout, change pwd. Zorg ervoor dat wachtwoorden veilig opgslagen worden in de database. De index.php moet je automatisch redirecten naar de login/signup page als je er nog geen gebruiker ingelogd is. "
},
{
	"uri": "http://localhost:1313/fsweb-course/extra/webdevelopmenttools/",
	"title": "Web development tools",
	"tags": [],
	"description": "",
	"content": " Er bestaan een zeer grote range aan tools die ontwikkeld zijn om het leven van een web developer makkelijker te maken. Het kan echter zeer verwarrend zijn om tijdens de leerfase steeds verschillende tools te horen omdat er ook gewoon zoveel zijn en je ook nog niet weet wat soort tools er allemaal zijn en wat ze allemaal doen. Zo bestaan er tools zoals volledige frameworks die je helpen een volledige stack op te zetten of gewoon simpele libraries die één aspect versnellen en/of versimpelen voor de developer. Daarom lijsten we hieronder al een reeks populaire tools op zodat je ten minste ongeveer weet wat ze doen wanneer je ze tegenkomt.\nFull Stack Development Tools Deze sectie biedt een overzicht van diverse tools gebruikt in full stack development, onderverdeeld in categorieën. Elke tool bevat een korte beschrijving, de categorie waarin het valt en of het vooral voor de front-end of back-end is. Wanneer in een beschrijving een tool wordt genoemd die elders wordt besproken, wordt er een link gelegd naar de betreffende sectie (bijvoorbeeld React of Angular).\nFrontend Tools CSS Frameworks \u0026amp; Libraries Tailwind CSS Tailwind CSS is een utility-first CSS-framework dat een uitgebreide set utility-klassen biedt voor het snel stylen van componenten.\nCategorie: CSS-framework\nGebruik: Voornamelijk front-end\nBootstrap Bootstrap is een populair CSS-framework met kant-en-klare componenten en een responsive grid-systeem voor snel prototypen van gebruikersinterfaces.\nCategorie: CSS-framework/library\nGebruik: Voornamelijk front-end\nJavaScript Frameworks \u0026amp; Libraries Angular Angular is een krachtig, TypeScript-gebaseerd front-end framework ontwikkeld door Google, dat de MVC/MVVM-architectuur toepast.\nCategorie: Front-end framework\nGebruik: Voornamelijk front-end\nReact React is een JavaScript-library voor het bouwen van gebruikersinterfaces met behulp van componenten en de virtuele DOM. In vergelijking met Angular biedt het een flexibeler maar minder gestructureerd alternatief.\nCategorie: Front-end library\nGebruik: Voornamelijk front-end\nReact Native React Native stelt ontwikkelaars in staat om native mobiele applicaties te bouwen met React, waarbij de componenten worden vertaald naar native widgets.\nCategorie: Cross-platform mobiel framework\nGebruik: Voornamelijk front-end (mobiele interfaces)\nSvelte Svelte is een compiler-gebaseerd front-end framework dat tijdens de build-stap de code omzet in efficiënte JavaScript zonder de runtime overhead van een virtuele DOM.\nCategorie: Front-end framework\nGebruik: Voornamelijk front-end\nSvelteKit SvelteKit bouwt voort op Svelte en biedt ondersteuning voor server-side rendering en routing, waardoor het een full-stack framework wordt.\nCategorie: Full-stack framework (gebaseerd op Svelte)\nGebruik: Zowel front-end als back-end, met nadruk op front-end\nNext Next.js is een React-gebaseerd framework dat server-side rendering en statische sitegeneratie ondersteunt. Het breidt React uit met extra functionaliteiten zoals API-routes.\nCategorie: Full-stack framework\nGebruik: Zowel front-end als back-end, met nadruk op front-end\nNuxt Nuxt.js is vergelijkbaar met Next.js, maar dan voor Vue. Het ondersteunt server-side rendering en statische generatie en zorgt voor een gestructureerde aanpak van Vue-applicaties.\nCategorie: Full-stack framework\nGebruik: Zowel front-end als back-end, met nadruk op front-end\nFlutter + Dart Zie ook de Dart gids\nFlutter is een UI-toolkit van Google voor het ontwikkelen van cross-platform applicaties met één codebase, waarbij Dart de onderliggende programmeertaal is.\nCategorie: Cross-platform UI-framework\nGebruik: Voornamelijk front-end (mobiele en webinterfaces)\nTypeScript TypeScript is een getypeerde superset van JavaScript die statische typecontrole toevoegt, wat helpt bij het vroegtijdig opsporen van fouten.\nCategorie: Taaluitbreiding\nGebruik: Zowel front-end als back-end\nStatic Site Generators \u0026amp; Browsers Hugo Hugo is een statische sitegenerator die Markdown-bestanden omzet in statische HTML-pagina’s, ideaal voor snelle en eenvoudige websites.\nCategorie: Statische sitegenerator\nGebruik: Voornamelijk front-end\nLynx Lynx is een tekstgebaseerde webbrowser die werkt vanuit de terminal, wat een puur tekstuele weergave van webpagina’s biedt.\nCategorie: Webbrowser (CLI-tool)\nGebruik: Niet specifiek front-end of back-end\nBackend \u0026amp; Full-Stack Frameworks Full-Stack \u0026amp; Back-end Frameworks Laravel Laravel is een PHP-framework dat het MVC-patroon volgt en uitgebreide functionaliteiten biedt zoals routing, authenticatie en database-migraties.\nCategorie: Full-stack framework\nGebruik: Zowel front-end (via Blade templates) als back-end, met nadruk op back-end\nRuby on Rails Ruby on Rails is een server-side framework in Ruby dat snelle ontwikkeling mogelijk maakt door conventies en een uitgebreide toolset.\nCategorie: Full-stack framework\nGebruik: Zowel front-end (via embedded Ruby) als back-end, met nadruk op back-end\nDjango Django is een Python-framework dat de MVT-architectuur hanteert en een ingebouwde admin interface en ORM biedt voor snelle ontwikkeling.\nCategorie: Full-stack framework\nGebruik: Zowel front-end (met templates) als back-end, met nadruk op back-end\nFlask Flask is een lichtgewicht microframework in Python dat ontwikkelaars veel vrijheid geeft bij het structureren van applicaties.\nCategorie: Microframework\nGebruik: Voornamelijk back-end\nSpring Boot Spring Boot vereenvoudigt het opzetten van Java-applicaties door auto-configuratie en embedded servers te bieden, wat het ideaal maakt voor snelle ontwikkeling.\nCategorie: Back-end framework\nGebruik: Voornamelijk back-end\nNestJS NestJS is een Node.js-framework dat met TypeScript werkt en een modulaire, gestructureerde aanpak biedt voor server-side applicaties, geïnspireerd door Angular.\nCategorie: Back-end framework\nGebruik: Voornamelijk back-end\nRuntimes \u0026amp; Talen Node.js Node.js is een JavaScript-runtime gebouwd op de V8-engine, waarmee je asynchrone server-side applicaties kunt ontwikkelen.\nCategorie: Runtime-omgeving\nGebruik: Voornamelijk back-end\nDeno Deno is een moderne runtime voor JavaScript en TypeScript, ontwikkeld met een focus op veiligheid en moderne ES-modules.\nCategorie: Runtime-omgeving\nGebruik: Voornamelijk back-end\nElixir Elixir is een functionele programmeertaal die draait op de Erlang VM, bekend om zijn schaalbaarheid en fouttolerantie, vaak gebruikt met het Phoenix-framework.\nCategorie: Programmeertaal\nGebruik: Voornamelijk back-end\nBuild Tools Vite Vite is een moderne buildtool en ontwikkelserver die ES-modules en hot module reloading gebruikt voor een snelle ontwikkelervaring.\nCategorie: Buildtool/Bundler\nGebruik: Voornamelijk front-end\nPayment Processing Stripe Stripe is een API-gedreven betaaldienst die je helpt om online betalingen te integreren in webapplicaties.\nCategorie: Externe service/API\nGebruik: Integratie in zowel front-end als back-end, met nadruk op back-end\nDatabases \u0026amp; Backend as a Service (BaaS) Databases Postgres Postgres is een krachtige, open-source relationele database die bekendstaat om zijn robuuste en uitgebreide functionaliteiten.\nCategorie: Relationele database\nGebruik: Back-end\nMongoDB MongoDB is een NoSQL-database waarin data wordt opgeslagen in flexibele, JSON-achtige documenten, ideaal voor schaalbare applicaties.\nCategorie: NoSQL-database\nGebruik: Back-end\nBackend as a Service (BaaS) Firebase Firebase is een cloudplatform van Google dat realtime databases, hosting en authenticatie aanbiedt, en zo de noodzaak voor een traditionele back-end vermindert.\nCategorie: Backend as a Service (BaaS)\nGebruik: Zowel front-end (via SDK’s) als back-end\nSupabase Supabase is een open-source alternatief voor Firebase dat gebruikmaakt van Postgres en realtime functionaliteit biedt, zoals authenticatie en opslag.\nCategorie: Backend as a Service (BaaS)\nGebruik: Back-end\nCloud \u0026amp; Hosting / Deployment Platforms Cloud Platforms \u0026amp; Infrastructuur AWS AWS is een uitgebreid cloud computing platform dat diensten levert variërend van opslag en databases tot machine learning en analytics.\nCategorie: Cloud Platform\nGebruik: Back-end (en infrastructuur)\nAzure Azure is Microsofts cloud computing platform, met een breed aanbod aan diensten voor computing, opslag, en netwerkbeheer.\nCategorie: Cloud Platform\nGebruik: Back-end (en infrastructuur)\nCloudflare Cloudflare biedt CDN, DNS, en beveiligingsdiensten en fungeert als een reverse proxy voor webapplicaties.\nCategorie: CDN/Cloud Infrastructure\nGebruik: Back-end (en infrastructuur)\nHeroku Heroku is een Platform as a Service (PaaS) waarmee ontwikkelaars snel applicaties kunnen deployen en schalen zonder zich bezig te houden met de onderliggende infrastructuur.\nCategorie: PaaS/Deployment Platform\nGebruik: Voornamelijk back-end\nVercel Vercel is een deployment platform dat vooral populair is voor statische sites en serverless functies, met naadloze integratie voor frameworks zoals Next.\nCategorie: Deployment Platform / PaaS\nGebruik: Voornamelijk front-end en serverless back-end\nStatic Hosting GitHub Pages GitHub Pages biedt gratis hosting voor statische websites, ideaal voor projectpagina’s, portfolio’s en documentatie.\nCategorie: Static Hosting\nGebruik: Voornamelijk front-end\nstatic.app static.app is een platform dat zich richt op het hosten van statische websites met eenvoudige deployment en snelle laadtijden.\nCategorie: Static Hosting\nGebruik: Voornamelijk front-end\ntiny.host tiny.host biedt een minimalistische oplossing voor het hosten van statische sites, met nadruk op eenvoud en snelheid.\nCategorie: Static Hosting\nGebruik: Voornamelijk front-end\nLokale Ontwikkeling / Webservers XAMPP XAMPP is een bundel bestaande uit Apache, MariaDB, PHP en Perl, bedoeld om een lokale ontwikkelomgeving op te zetten.\nCategorie: Lokale serveromgeving\nGebruik: Back-end (ontwikkelomgeving)\nNginx Nginx is een krachtige webserver en reverse proxy, vaak ingezet voor load balancing en het serveren van statische content.\nCategorie: Webserver/Reverse Proxy\nGebruik: Back-end (infrastructuur)\nSaaS (Software as a Service) SaaS SaaS is een model waarbij software via de cloud als dienst wordt aangeboden, zodat gebruikers geen lokale installatie of beheer van infrastructuur hoeven te verzorgen.\nCategorie: Cloud-dienstverleningsmodel\nGebruik: Niet specifiek front-end of back-end; leveringsmodel voor software\nDesktop \u0026amp; Andere Tools Desktop Application Frameworks Tauri Tauri maakt het mogelijk om desktopapplicaties te bouwen met webtechnologieën zoals HTML, CSS en JavaScript, in combinatie met een lichte backend geschreven in Rust.\nCategorie: Desktop application framework\nGebruik: Voornamelijk front-end (UI) met een lichte back-end\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/css_basics/",
	"title": "CSS",
	"tags": [],
	"description": "",
	"content": "bron 1: HTML, CSS, Bootstrap \u0026amp; Blade. Vormgeving in Laravel. Cursus: Cloud Computing \u0026amp; Toepassingen - 2020/2021 - Kris Aerts bron 2: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 3: W3Schools\nCascading Style Sheet HTML alleen maakt een website niet visueel aantrekkelijk. CSS is dan nodig voor de vormgeving. Met CSS-regels kun je ontwerpen hoe de afzonderlijke componenten die je eerder in HTML hebt gedefinieerd, moeten worden weergegeven. Je kan CSS dus gebruiken om het ontwerp en de lay-out van een webpagina te definiëren. Je kan bijvoorbeeld tekstkleuren, tekstgroottes, randen, achtergrondkleuren, kleurverlopen enzovoort definiëren.\nVooraleer we dit doen en de algemene regels bespreken, willen we wel vermelden dat we slechts een beperkt deel van CSS zien. Het doel van deze cursus is enkel individuele pagina’s toch wat vormgeving te kunnen geven zodat we op zijn minst wat accenten kunnen leggen en de verschillende onderdelen van een webpagina kunnen positioneren. We gaan geen professioneel ogende sites maken met complexe layoutschema’s of uitgebreide websites met uitgebreide navigatie. Daarom mag en zal onze portie CSS relatief beperkt blijven.\nCSS definiëren op verschillende niveaus CSS kan op verschillende manieren worden gedefinieerd: in een apart CSS-bestand, in de \u0026lt;head\u0026gt; van je HTML-document, of inline in de open-tag van een HTML-element. Elk van deze methoden heeft zijn eigen voor- en nadelen, afhankelijk van de situatie en het doel van de styling.\nEen apart CSS bestand\nHet gebruik van een apart CSS-bestand is de meest gebruikelijke en aanbevolen methode. Dit zorgt voor een duidelijke scheiding tussen de structuur (HTML) en de opmaak (CSS), wat de leesbaarheid en onderhoudbaarheid van de code bevordert. Bovendien kunnen meerdere HTML-pagina\u0026rsquo;s dezelfde CSS-bestand gebruiken, wat consistentie in de styling garandeert en de laadtijd van de website kan verbeteren door caching. Je gebruikt hiervoor het \u0026lt;link\\\u0026gt;-element in de head van je HTML-bestand. Als href-attribuut geef je het pad naar je .css-bestand mee:\n\u0026lt;head\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;mystyle.css\u0026#34;\u0026gt; \u0026lt;/head\u0026gt; In het HTML-element \u0026lt;style\u0026gt; in de head van je HTML-bestand\nHet definiëren van CSS in de \u0026lt;head\u0026gt; van een HTML-document, ook wel interne of embedded CSS genoemd, kan handig zijn voor kleinere projecten of wanneer specifieke stijlen alleen voor een enkele pagina gelden. Dit kan echter de leesbaarheid van de HTML-code verminderen en maakt het moeilijker om stijlen te hergebruiken op andere pagina\u0026rsquo;s.\n\u0026lt;head\u0026gt; \u0026lt;style\u0026gt; /*Write your CSS code here*/ \u0026lt;style\u0026gt; \u0026lt;/head\u0026gt; Met /* en */ kan je commentaar schrijven bij je CSS-code. Bv. /* Dit is een CSS comment*/\nInline CSS: het style-attribuut\nMet inline CSS wordt de styling direct in de open-tag van een HTML-element geplaatst. Dat kan nuttig zijn voor snelle, eenmalige aanpassingen of voor het toepassen van unieke stijlen op specifieke elementen. Deze methode wordt echter over het algemeen afgeraden omdat het de HTML-code rommelig maakt en de scheiding tussen structuur en opmaak vervaagt. Bovendien is inline CSS moeilijker te onderhouden en te updaten.\n\u0026lt;htmlElement style=\u0026#34;property1:value1 ; property2:value2;\u0026#34;\u0026gt; ... \u0026lt;/htmlElement\u0026gt; Met een goede code-editor krijg je vaak hints over welke css-properties en corresponderende values allemaal mogelijk zijn. Dat versnelt de productie significant.\nDe plaats van het definiëren van de CSS-code is dus een afweging tussen de specificiteit, leesbaarheid, onderhoudbaarheid en herbruikbaarheid van de code\nSyntax Een CSS-rule (CSS-regel) bestaat steeds uit een selector en één of meerdere declaraties. De declaraties moeten tussen accolades geplaatst worden: { en }. Elke declaratie bestaat op zijn beurt uit een property gevolgd door een :, een geschikte value en wordt afgesloten met een ;. Selectors, Pseudo-classes en Pseudo-elements Een selector is een patroon dat wordt gebruikt om HTML-elementen te selecteren die je wilt stylen. Je kan op verschillende manieren elementen selecteren, met behulp van:\neen element selector kan je alle HTML-elementen van een bepaald type selecteren en stylen. Bijvoorbeeld, de selector p selecteert alle paragraafelementen (\u0026lt;p\u0026gt;) op een webpagina. een klasse selector: kan je all HTML-elementen van een bepaalde klasse selecteren en stylen. Bijvoorbeeld, de selector .mijnKlasseNaam selecteert alle elementen (\u0026lt;element class=\u0026quot;mijnKlasseNaam\u0026quot;\u0026gt;) op een webpagina. een id selector: kan je het HTML-element met een bepaalde id selecteren en stylen. Bijvoorbeeld, de selector #mijnIdNaam selecteert het element (\u0026lt;element id=\u0026quot;mijnIdNaam\u0026quot;\u0026gt;) op een webpagina. een samengestelde/complexe selector: bv. li.belangrijk. Dit betekent dat elke li met als klasse belangrijk de bijhorende vormgeving moet krijgen, en de andere li’s niet, evenmin als de elementen van klasse belangrijk die géén li zijn. Wanneer je een spatie laat tussen de combinatie, bv. p .belangrijk, betekent dit \u0026ldquo;met daarbinnen\u0026rdquo;, dus elk element met klasse belangrijk binnen een p krijgt de vormgeving, maar andere elementen binnen p niet, evenmin als elementen met klasse belangrijk die niet binnen p staan. een attribuut selector: je kan dan ook nog dieper gaan selecteren op attributen ([attribuut=\u0026quot;waarde\u0026quot;]). Bijvoorbeeld, de selector die de \u0026lt;p\u0026gt;-elementen selecteert die als waarde yes van het attribuut mijnAttribuut hebben ziet er als volgt uit: p[mijnAttribuut=yes]. elementName {...;} .className {...;} #idName {...;} /*Dit is een comment*/ element:pseudo-classname {...;} /*e.g.: a:hover{...;}*/ element::pseudo-elementname {...;} /*e.g.: h1:before{...;}*/ /*Attribute selectors*/ element[attribute] {...;} element[attribute=\u0026#34;value\u0026#34;] {...;} element[attribute~=\u0026#34;value\u0026#34;] {...;} /*contains specific words*/ element[attribute|=\u0026#34;value\u0026#34;] {...;} /*specific value or followed by - */ element[attribute^=\u0026#34;value\u0026#34;] {...;} /*starts with specific value*/ element[attribute$=\u0026#34;value\u0026#34;] {...;} /*ends with specific value*/ element[attribute*=\u0026#34;value\u0026#34;] {...;} /*contains a specified value*/ Types of combinators:\ndescendant selector (space) specifies all descendants child selector (\u0026gt;) only goes one deep adjacent sibling selector (+) selects an element that is directly after another specific element. general sibling selector (~) selects all elements that are next siblings of a specified element. Margin, padding en outline Sizing Absolute: px, pt, pc, in, cm, mm Relative: %, em, rem, ex, ch, fr Viewport (define in head): vw, vh, vmin, vmax We gaan in 99% van de gevallen enkel gebruik maken van px, rem en % (af en toe em relatief t.o.v. font-size eigen element)!!!\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; Positioning Static: An element with position: static; is not positioned in any special way; it is always positioned according to the normal flow of the page. Static positioned elements are not affected by the top, bottom, left, and right properties. Relative: An element with position: relative; is positioned relative to its normal position. Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element. Fixes: An element with position: fixed; is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. A fixed element does not leave a gap in the page where it would normally have been located. Absolute: An element with position: absolute; is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). Absolute positioned elements are removed from the normal flow, and can overlap elements. Sticky: An element with position: sticky; is positioned based on the user\u0026rsquo;s scroll position. A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it \u0026ldquo;sticks\u0026rdquo; in place (like position:fixed). List of usefull properties #elementId { background-color: red; /*rgb(255,0,0) , #FF0000, hsl(0, 100%, 50%) , rgba(255,0,0,0.5), hsla(0, 100%, 50%, 0.5)*/ opacity: 0.3; /*Doorschijnbaarheid 0-1*/ background-image: url(\u0026#34;image.jpg\u0026#34;); background-repeat: repeat-x; /*repeat-y, no-repeat*/ background-position: right top; background-attachment: fixed; /*scroll*/ border-style: dotted; /*dashed, solid, double, groove, ridge, inset, outset, none, hidden*/ /*border-top-style, border-right-style, border-bottom-style, border-left-style*/ border-width: 5rem; /*top right bottom left*/ border-width: black; border-radius: 5px; margin: 10px; /*top right bottom left*/ /*margin-top, margin-right, margin-bottom, margin-left*/ padding: 10px; /*top right bottom left*/ /*padding-top, padding-right, padding-bottom, padding-left*/ height: 200rem; max-height: 20px; width: 80%; /*relative to parent*/ max-width: 60ch; outline: 1px solid red; /*width style color*/ outline-offset: 15px; color: black; /*Text color*/ text-align: center; /*left, right, justify*/ text-align-last: center; /*right, justify*/ direction: rtl; /*ltr*/ vertical-align: baseline; /*text-top, text-bottom, sub, super*/ text-decoration-line: overline; /*line-through, underline, overline underline*/ text-decoration-color: red; text-decoration-style: solid; /*double, dotted, dashed, wavy*/ text-decoration-thickness: 5px; text-transform: uppercase; /*lowecase, capitalize*/ text-indent: 5px; /*first line indent*/ letter-spacing: -2px; line-height: 0.8; word-spacing: 5rem; white-space: nowrap; text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue; /*horizontal vertical blur color, ...*/ font-family: \u0026#34;Times New Roman\u0026#34;, Times, serif; /*desired, fallback1, fallback2*/ font-style: normal; /*itallic, oblique*/ font-weight: normal; /*bold*/ font-size: 0.5rem; font-variant: normal; /*small-caps*/ overflow-x: scroll; /*hidden, auto, visible*/ overflow-y: scroll; /*hidden, auto, visible*/ display: inline; /*block, inline-block, contents, flex, grid*/ position: static; /*relative, fixed, absolute, sticky (to parent)*/ bottom: 0; right: 0; z-index: -1; /*lower = further in background*/ float: right; /*left, none, inherit*/ /*in parent*/ clear: left; /*right, none, inherit*/ box-sizing: content-box; /*border-box*/ /*IF display: flex*/ flex-direction: row; /*column, column-reverse, row-reverse*/ flex-wrap: wrap; /*nowrap, wrap-reverse*/ /*flex-flow: row wrap;*/ /*direction wrap*/ justify-content: flex-start; /*center, flex-end, space-around, space-between*/ align-items: stretch; /*baseline, flex-start, center, flex-end*/ align-content: space-between; /*space-around, stretch, center, flex-start, flex-end*/ /*IF display: grid*/ } ul { list-style-type: circle; /*square, upper-roman, lower-alpha, none*/ list-style-image: url(\u0026#39;sqpurple.gif\u0026#39;); list-style-position: outside; /*inside*/ } table { border-collapse: collapse; } tr:nth-child(even) {background-color: #f2f2f2;} input { outline: none; } a:link {...;} a:visited {...;} a:hover {...;} a:active {...;} /*COUNTERS*/ #containerElement { counter-reset: section; } element::before{ counter-increment: section; content: \u0026#34;Section \u0026#34; counter(section) \u0026#34;: \u0026#34;; } Icons \u0026lt;script src=\u0026#34;https://kit.fontawesome.com/yourcode.js\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- In the head --\u0026gt; \u0026lt;i class=\u0026#34;fas fa-cloud\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Text effects text-overflow: hoe moet verborgen overflowing content weergegeven worden?\nclip ellipsis overflow moet hidden zijn (werkt niet vij overflow visible) #textOverflow { text-overflow: clip; overflow: hidden; } #textOverflow2 { text-overflow: ellipsis; overflow: hidden; } word-wrap: om lange woorden op te breken en te wrappen naar de volgende regel\n#wordWrap { word-wrap: break-word; } word-break: hoe moeten lijnen text gebroken worden.\n#wordWrap { word-break: keep-all; } #wordWrap2 { word-break: break-all; } writing-mode: horizontaal of verticaal.\n#writingMode { writing-mode: horizontal; } #writingMode { writing-mode: vertical; } Calculations e.g.:\nwidth: calc(100% - 100px); width: max(50%, 300px); width: min(50%, 300px); CSS variables :root { --blue: #1e90ff; --white: #ffffff; } body { background-color: var(--blue); } Extra Andere CSS files importeren in de main.css\n@import url(\u0026#39;./animations.css\u0026#39;); Moet helemaal in het begin van je CSS-file staan\n!important: om alle andere styling te overschrijven.\nelement { background-color: red !important; } simple linear gradient: gebruik background-image property en niet background-color.\n#grad { background-image: linear-gradient(to right, red , yellow); /*direction, color-stop1, color-stop2, ...*/ } Divs, columns, User Interface\ndiv { column-count: 3; column-gap: 40px; column-width: 100px; column-rule-style: solid; column-rule-width: 1px; column-rule-color: lightblue; /*element inside the div*/ column-span: all; resize: horizontal; /*vertical, both*/ overflow: auto; } img:\nimg { border-radius: 8px; opacity: 0.5; filter: grayscale(100%); box-shadow: 0 0 2px 1px rgba(0, 140, 186, 0.5); -webkit-box-reflect: below; /*above, left, right*/ object-fit: cover; /*contain, fill, none, scale-down*/ object-position: 80% 100%; -webkit-mask-image: url(img1.png); mask-image: url(img1.png); -webkit-mask-repeat: no-repeat; mask-repeat: no-repeat; } Opdrachten Maak je footer fixed onderaan de pagina Voeg een afbeelding van jezelf (of) een stockfoto toe aan je over mij sectie en zorg ervoor dat de afbeelding steeds rechts staat Maak een nav sectie die 2 anchor elementen heeft: 1 voor de home page en een voor de contact page. Gebruik volgende bron om je nav sectie te stijlen zodat je een verticale navigatie sectie hebt aan de linkerkant van je pagina die 100% van de hoogte in beslag neemt. Gebruik een input checkbox die je gefixed houd in de linkerboven hoek. Zorg ervoor dat je navigatie sectie verborgen wordt wanneer de checkbox niet is aangevinkt en getoond wordt wanneer je de checkbox aanduidt. Gebruik volgende bron om je formulier in je contact pagina te stijlen.. Gebruik volgende bron om de globale layout van je site te updaten. Zorg al voor een responsive design door al je font-sizes aan te passen aan een vaste font-size die zich aanpast aan de grootte van de pagina. Kies een leuke font voor je pagina en eventueel complementaire fonts voor speciale secties zoals quotes. (zorg ook voor fallback fonts) Gebruik icons in plaats van tekst in je navigation sectie. Geef je creativiteit de vrije loop om je site zo mooi mogelijk te maken. Test jezelf Klik hier om jezelf te testen met de online HTML quiz van w3schools. Of klik hier voor wat extra oefeningen.\nLibraries en CDN Je kunt libraries zoals CSS-frameworks toevoegen aan je websitecode om je ontwikkelproces te versnellen en consistente, professionele ontwerpen te creëren. Dit doe je door de benodigde bestanden te downloaden en lokaal op te slaan, waarna je ze via \u0026lt;link\u0026gt;-tags in de \u0026lt;head\u0026gt; van je HTML-document opneemt. Bijvoorbeeld, voor Bootstrap, een populaire CSS-library, zou je een link naar het gedownloade CSS-bestand toevoegen:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;path/to/bootstrap.min.css\u0026#34;\u0026gt; Een eenvoudigere manier om libraries toe te voegen is via een Content Delivery Network (CDN). CDNs hosten de bestanden van de library op servers over de hele wereld, waardoor je website sneller kan laden doordat de bestanden van een server dichtbij de gebruiker worden opgehaald. Om een library via een CDN toe te voegen, hoef je alleen maar een \u0026lt;link\u0026gt;-tag met de URL van de CDN op te nemen in je HTML-document. Voor Bootstrap zou dit er als volgt uitzien:\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\u0026#34;\u0026gt; Het gebruik van een CDN heeft als voordeel dat je geen bestanden lokaal hoeft op te slaan en te beheren, en dat de laadtijd van je website kan verbeteren door de geografische spreiding van de CDN-servers.\nBootstrap Met het beperkte stuk HTML en CSS dat we hierboven hebben behandeld, kun je functionele HTML-pagina\u0026rsquo;s maken die met CSS worden gestyled. Veel ingenieurs zijn echter niet altijd bedreven in het creëren van aantrekkelijke layouts. Daarom kan het een goed idee zijn om gebruik te maken van kant-en-klare layouts en deze aan te passen naar je eigen smaak. Omdat er veel vraag is naar dergelijke oplossingen, zijn er verschillende frameworks ontwikkeld waarmee je de layout van webpagina\u0026rsquo;s kunt instellen. Wij richten ons hier op Bootstrap, een simpel en beginnersvriendelijk framework voor responsive designs.\nBootstrap werkt door een verzameling van CSS- en JavaScript-componenten te voorzien die je kunt gebruiken om je webpagina\u0026rsquo;s snel te stylen en functionaliteit toe te voegen via class names.\nVoeg Bootstrap via CDN of link naar gedownloade bestanden toe aan je HTML-bestand. Bootstrap biedt een breed scala aan vooraf ontworpen componenten zoals knoppen, formulieren, navigatiebalken en kaarten. Je kunt deze componenten eenvoudig in je HTML-code opnemen door de juiste Bootstrap-classes toe te voegen. ... \u0026lt;div class=\u0026#34;container mt-5\u0026#34;\u0026gt; \u0026lt;!-- Bootstrap-knop --\u0026gt; \u0026lt;button type=\u0026#34;button\u0026#34; class=\u0026#34;btn btn-primary\u0026#34;\u0026gt;Klik hier\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ... Bootstrap heeft een krachtig grid-systeem waarmee je de layout van je pagina kunt structureren. Het grid-systeem is gebaseerd op rows en columns, en maakt het eenvoudig om responsieve layouts te creëren die zich aanpassen aan verschillende schermgroottes. ... \u0026lt;div class=\u0026#34;container mt-5\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;row\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;p-3 border bg-light\u0026#34;\u0026gt;Kolom 1\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;p-3 border bg-light\u0026#34;\u0026gt;Kolom 2\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;col-md-4\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;p-3 border bg-light\u0026#34;\u0026gt;Kolom 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ... Hoewel Bootstrap veel standaardstijlen biedt, kun je deze altijd aanpassen door je eigen CSS toe te voegen of de bestaande Bootstrap-klassen te overschrijven.\nEen aantal handige links:\nBootstrap documentatie w3schools tutorial tutorialrepublic bootstrap "
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/",
	"title": "Frontend",
	"tags": [],
	"description": "",
	"content": "Wat is de frontend? De frontend, ook wel bekend als de client-side, omvat alle code waarmee de gebruiker direct interageert in de webbrowser. Dit omvat het bekijken van inhoud, het invoeren van gegevens en andere interacties. Deze code wordt aanvankelijk van de server opgehaald en vervolgens in de webbrowser gecached voor snellere toegang.\nDe frontend bestaat uit de visuele en interactieve elementen van een website of webapplicatie, zoals knoppen, formulieren, afbeeldingen en tekst. De technologieën die hierbij vaak worden gebruikt, zijn HTML, CSS en JavaScript. HTML zorgt voor de structuur van de webpagina, CSS voor de opmaak en stijl, en JavaScript voor de interactiviteit en dynamische functionaliteiten. Een goed ontworpen frontend zorgt voor een gebruiksvriendelijke en responsieve ervaring, wat essentieel is voor het succes van een webapplicatie.\nWaaruit bestaat de frontend? De frontend bestaat dus uit:\nHTML code voor de structuur van de inhoud CSS code voor het stijlen van de inhoud JavaScript code zorgt voor interactie met de gebruiker Static vs dynamic websites Een statische website bestaat uit webpaginas met vaste inhoud die hetzelfde is voor elke gebruiker.\nEen dynamische website genereert webcontent op basis van gebruiker interacties. Dit wordt gebeurt door server-side (of client-side) scripts. De inhoud van de webpagina verschilt dus voor elke gebruiker op basis van hun interactie met de website.\nEen statische website bestaat uit webpagina\u0026rsquo;s met vaste inhoud die hetzelfde is voor elke gebruiker. Dit betekent dat de inhoud van de pagina\u0026rsquo;s niet verandert, ongeacht wie de website bezoekt. Statische websites worden vaak gebruikt voor eenvoudige, informatieve sites waar de inhoud niet vaak bijgewerkt hoeft te worden. Ze zijn meestal sneller te laden en eenvoudiger te hosten omdat ze geen server-side scripting vereisen.\nEen dynamische website daarentegen genereert webcontent op basis van gebruikersinteracties. Dit gebeurt door middel van server-side (of client-side) scripts, die de inhoud van de webpagina aanpassen aan de hand van de input van de gebruiker. Hierdoor kan de inhoud van de website variëren voor elke gebruiker, afhankelijk van hun interacties en voorkeuren. Een simpel voorbeeld hiervan is dat wanneer je inlogt op een website je alleen je eigen persoonlijke gegevens ziet en niet die van een andere gebruiker bijvoorbeeld. Dynamische websites zijn ideaal voor toepassingen zoals sociale netwerken, e-commerce platforms en content management systemen, waar gepersonaliseerde en interactieve ervaringen essentieel zijn.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/laravel_basics/",
	"title": "Laravel: basics",
	"tags": [],
	"description": "",
	"content": "Laravel Why Laravel? framework -\u0026gt; templates faster libraries MVC model very popular option -\u0026gt; a lot of information more secure -\u0026gt; because php is datasensitive built-in security features automatic integration with database Install Laravel Edit php.ini file line 962 uncomment (delete semicolon in fromt) extention=zip line 930 uncomment extention=fileinfo line 942 uncomment extention=openssl line 944 uncomment extention=pdo_mysql\nAdd php.exe to path variables (new system variable) name: PHP location: C:\\xampp\\php\\php.exe\nAdd dependency manager: Composer download .exe add to path: C:\\ProgramData\\ComposerSetup\\bin\nInstall Laravel using Composer $ composer global require laravel/installer\nReinstall XAMPP and move project into Dashboard -\u0026gt; Laravel first delete all files inside the dashboard directory\nCreate laravel project in your project folder $ laravel new \u0026lt;projectName\u0026gt; starterkit -\u0026gt; none Pest -\u0026gt; 0 (testing framework, PHPUnit is older) Git -\u0026gt; no\ndb -\u0026gt; mysql (via XAMPP) default database migrations -\u0026gt; yes (make sure MySQL server is turned on in XAMPP)\nFront page is in public/index.php Setup database inside phpmyadmin -\u0026gt; new database (give same name as laravel project \u0026lsquo;-\u0026rsquo; becomes \u0026lsquo;_\u0026rsquo;).\nOR set name in .env file\n($ php artisan migrate)\ncreates tables that integrate with laravel !\n(Start webserver without apache: inside project folder) $ php artisan serve\nIntro into Laravel TodoList resources/views/welcome.blade.php routes/web.php public/index.php Create object and db migration $ php artisan make:model \u0026lt;modelName\u0026gt; -m $ php artisan migrate check migration in /database/migrations/ update migration so it interacts with table correctly (set correct model properties) model will be in app/model\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/css_advanced/",
	"title": "Advanced CSS",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nQuicktip Je css code spreiden over meerdere stylesheets is mogelijk door in je main.css andere CSS-bestanden te importeren. Je kan bijvoorbeeld al je animation klassen in een aparte animations.css plaatsen en dat bestand dan importeren met onderstaande code in je main.css:\n@import url(\u0026#39;./animations.css\u0026#39;); Moet helemaal in het begin van je CSS-file staan\nTransformations CSS-transformations zijn krachtige tools die developers in staat stellen om HTML-elementen visueel te manipuleren zonder hun oorspronkelijke structuur te veranderen. Met CSS-transformations kunnen elementen worden verplaatst, gedraaid, geschaald en scheefgetrokken, waardoor dynamische en interactieve ontwerpen mogelijk worden.\nDeze transformaties worden toegepast met de transform-property en kunnen meerdere transformaties combineren voor complexe effecten. Bijvoorbeeld, een element kan tegelijkertijd worden verplaatst en gedraaid, wat zorgt voor vloeiende animaties en visuele aantrekkingskracht.\nMet CSS-transformaties kun je elementen dus verplaatsen, roteren, schalen en scheef trekken. Volgende 2D-transformaties zijn beschikbaar:\ntranslate(): Verplaatst een element van zijn huidige positie. transform: translate(50px, 100px); /* Verplaatst het element 50px naar rechts en 100px naar beneden */ rotate(): Draait een element rond een vast punt. transform: rotate(45deg); /* Draait het element 45 graden met de klok mee */ scaleX(): Schaal een element horizontaal. transform: scaleX(1.5); /* Vergroot de breedte van het element met 50% */ scaleY(): Schaal een element verticaal. transform: scaleY(0.5); /* Verkleint de hoogte van het element met 50% */ scale(): Schaal een element zowel horizontaal als verticaal. transform: scale(2); /* Verdubbelt de grootte van het element in beide richtingen */ skewX(): Scheeftrekken van een element langs de X-as. transform: skewX(30deg); /* Scheeftrekt het element 30 graden langs de X-as */ skewY(): Scheeftrekken van een element langs de Y-as. transform: skewY(20deg); /* Scheeftrekt het element 20 graden langs de Y-as */ skew(): Scheeftrekken van een element langs zowel de X- als de Y-as. transform: skew(30deg, 20deg); /* Scheeftrekt het element 30 graden langs de X-as en 20 graden langs de Y-as */ matrix(): Combineert meerdere transformaties in één. transform: matrix(1, 0.5, -0.5, 1, 100, 50); /* Voert een combinatie van translaties, rotaties, schalingen en scheeftrekkingen uit */ Extra Examples:\ndiv { transform: translate(50px, 100px); transform: rotate(20deg); transform: rotate(-20deg); transform: scale(2, 3); transform: scale(0.5, 0.5); /* transform: scaleX(2); transform: scaleY(3); */ transform: skew(20deg, 10deg); /* transform: skewX(20deg); transform: skewY(20deg); */ } Matrix De methode matrix() combineert alle 2D-transformatiemethoden in één. De matrix() methode neemt zes parameters, die wiskundige functies bevatten, waarmee je elementen kunt roteren, schalen, verplaatsen (vertalen) en schuin houden.\nDe parameters zijn als volgt: matrix(scaleX, skewY, skewX, scaleY, translateX, translateY)\ndiv{ transform: matrix(1, 0.5, -0.5, 1, 100, 50); } De matrix(1, 0.5, -0.5, 1, 100, 50)-transformatie voert een combinatie van schalen, scheeftrekken en verplaatsen uit op een element. Hier is wat elke parameter doet:\nscaleX (1): Schaal de breedte van het element met een factor van 1 (geen verandering). skewY (0.5): Scheeftrek het element langs de Y-as met een hoek van ongeveer 26,57 graden (0.5 radian). skewX (-0.5): Scheeftrek het element langs de X-as met een hoek van ongeveer -26,57 graden (-0.5 radian). scaleY (1): Schaal de hoogte van het element met een factor van 1 (geen verandering). translateX (100): Verplaats het element 100 pixels naar rechts. translateY (50): Verplaats het element 50 pixels naar beneden. Net zoals het werken met andere CSS-code is \u0026ldquo;doing it yourself\u0026rdquo; de boodschap om meer feeling te krijgen.\nTransitions CSS-transitions zijn een manier om geleidelijke veranderingen in de stijl van een element te creëren wanneer een eigenschap wijzigt. Ze maken het mogelijk om animaties te maken die soepel en visueel aantrekkelijk zijn, zonder dat er complexe JavaScript nodig is. Met transitions kun je specificeren welke eigenschappen moeten veranderen, de duur van de verandering, de timing-functie (zoals lineair of versneld) en eventuele vertragingen. Bijvoorbeeld, je kunt een knop laten veranderen van kleur wanneer de muis eroverheen beweegt, of een afbeelding laten vergroten wanneer deze wordt aangeklikt.\nMet andere woorden kan je CSS-transitions kun je de waarden van eigenschappen soepel veranderen gedurende een bepaalde tijd. We bespreken de volgende overgang properties:\ntransition transition-property transition-duration transition-timing-function transition-delay Om een transition effect te maken, moet je minstens twee dingen specificeren:\nde CSS-property waaraan je een effect wilt toevoegen de duur van het effect Opmerking: Als het onderdeel duur niet wordt opgegeven, heeft de overgang geen effect, omdat de standaardwaarde 0 is. Om een transition te laten plaatsvinden, moet een element een verandering in state hebben en moeten voor elke state verschillende styles worden bepaald. De eenvoudigste manier om styles voor verschillende states te bepalen is door gebruik te maken van de :hover, :focus, :active en :target pseudo-klassen.\nExample:\ndiv { width: 100px; height: 100px; background: red; transition: width 2s; } div:hover { width: 300px; } Je kan de transition properties apart definiëren of allemaal samen in een shorthand:\ndiv { transition-property: width; transition-duration: 2s; transition-timing-function: linear; transition-delay: 1s; } /* Shorthand */ div { transition: width 2s linear 1s; } Voor de transition-timing-function zijn er een aantal mogelijkheden. (In de developper tools van je browser kan je met deze waarden spelen en de gewenste beziercurve kopiëren):\nease - specifies a transition effect with a slow start, then fast, then end slowly (this is default) linear - specifies a transition effect with the same speed from start to end ease-in - specifies a transition effect with a slow start ease-out - specifies a transition effect with a slow end ease-in-out - specifies a transition effect with a slow start and end cubic-bezier(n,n,n,n) - lets you define your own values in a cubic-bezier function Je kan transitions voor meerdere elementen definiëren door ze te splitsen met een \u0026lt;;\u0026gt;: bv.\n/* multiple transitions */ div { transition: width 2s linear 1s, padding-top 1s ease-out; } Animations Met CSS-animations laat je een element geleidelijk veranderen van de ene stijl naar de andere. Je kunt zoveel CSS-properties wijzigen als je wil, zo vaak je wil. We bespreken de volgende animation properties:\nanimation @keyframes animation-name animation-duration animation-delay animation-iteration-count animation-direction animation-timing-function animation-fill-mode animation Om CSS-animations te gebruiken, moet je eerst een aantal keyframes opgeven voor de animatie. Keyframes geven aan welke stijlen het element op bepaalde momenten zal hebben.\nJe kan ook meerdere keyframes meegeven zodat je meerdere states tussen de animation hebt. Deze tussenstates geef je dan aan met percentages, %.\n/* The animation code */ @keyframes example { from {background-color: red;} to {background-color: yellow;} } /* The element to apply the animation to */ div { width: 100px; height: 100px; background-color: red; animation-name: example; animation-duration: 4s; } Shorthand:\ndiv { animation-name: example; /*keyframe name*/ animation-duration: 5s; animation-timing-function: linear; /*linear, ease, ease-in, ease-out, ease-in-out*/ animation-delay: 2s; animation-iteration-count: infinite; animation-direction: alternate; /*normal, reverse, alternate, alternate-reverse*/ animation-fill-mode: forwards; /*none, forwards, backwards, both*/ } /* Shorthand */ div { animation: example 5s linear 2s infinite alternate forwards; } animation-timing-function: zie transitions\nanimation-direction: -normal - The animation is played as normal (forwards). This is default -reverse - The animation is played in reverse direction (backwards) -alternate - The animation is played forwards first, then backwards -alternate-reverse - The animation is played backwards first, then forwards\nanimation-fill-mode: -none - Default value. Animation will not apply any styles to the element before or after it is executing -forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count) -backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period -both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions\nVerschil met transitions CSS-animations definiëren complexe bewegingen met keyframes, zoals rotate of fade, terwijl CSS-transitions soepele veranderingen maken in elementeigenschappen, zoals grootte of kleur, tijdens gebeurtenissen zoals hover. Animaties gebruiken keyframes en kunnen oneindig herhalen, terwijl overgangen optreden bij eigenschapsveranderingen en meer geschikt zijn voor subtiele effecten. Beiden voegen interactiviteit en aantrekkelijkheid toe aan webpagina\u0026rsquo;s, maar hebben verschillende toepassingen.\nAnimation utility classes en dubbele classes Je gebruikt animation utility classes om de relatie tussen animatie en element te ontkoppelen en voor herbruikbaarheid. Je kan op die manier ook verschillende animatie eigenschappen opsplitsen in verschillende klassen en dan via de juiste klassenamen snel gaan combineren in je html.\n.fade-in { animation-name: fadeIn; } .animate { animation-duration: 1s; animation-fill-mode: both; } .animate.animate--infinite { animation-iteration-count: infinite; } .animate.animate--delay-1s { animation-delay: 1s; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } @keyframes fadeAnimation { 0%, 50%, 100% {opacity: 1;} 25%, 75% {opacity: 0.5;} } met HTML\n\u0026lt;div class=\u0026#34;animate fade-in animate--delay-1s\u0026#34;\u0026gt; ... \u0026lt;/div\u0026gt; Je gebruikt dubbele klasse notaties ter bescherming:\n.animatie.fade-in { animation: fadeIn 0.5s ease-in forwards; } @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } } Dit biedt verschillende voordelen:\nSpecifieke Stijlen Toepassen: Door dubbele klassen te gebruiken, kun je zeer specifieke stijlen toepassen op elementen. Dit helpt bij het verfijnen van je CSS en voorkomt conflicten tussen stijlen. Herbruikbaarheid van CSS: Je kunt algemene stijlen in één klasse definiëren en specifieke animaties of effecten in een andere. Dit maakt je CSS herbruikbaarder en gemakkelijker te onderhouden. Bescherming tegen Stijlconflicten: Door specifieke combinaties van klassen te gebruiken, verminder je de kans op stijlconflicten. Dit is vooral handig in grotere projecten met veel CSS. Animation play state Door gebruik te maken van de animation-play-state property kun je eenvoudig animaties pauzeren en hervatten. De mogelijke values zijn:\npaused: De animatie stopt op het huidige frame running: De animatie wordt afgespeeld. initial: De animatie keert terug naar de standaardwaarde \u0026lsquo;running\u0026rsquo;. inherit: De animatie neemt de waarde over van het bovenliggende element. div:hover { animation-play-state: paused; /*running, initial, inherit*/ } Animatie klasse dynamisch toevoegen met JavaScript Dit zien we in het deel rond JavaScript.\nOpdrachten Exercise 1, 2, 3, 4: Er worden drie transitions getoond. Je hebt ongeveer 8 minuten om de transities zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nExercise 5, 6, 7, 8: Er worden drie animations getoond. Je hebt ongeveer 8 minuten om de animations zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nExercise 9, 10, 11, 12, 13, 14, 15: Er worden 7 transitions of animations getoond. Je hebt ongeveer 15 minuten om de voorbeelden zo goed mogelijk te evenaren. Daarna wordt de oplossing overlopen. (De exacte pixel afstanden worden niet verwacht, het is voldoende wanneer de transitie gelijkaardig is).\nDe oplossingen vind je hier\nPortfolio website Fleur nu je eigen portfolio website op door wat transitions en animaties toe te voegen waar nuttig.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/javascript_basics/",
	"title": "JavaScript",
	"tags": [],
	"description": "",
	"content": "bron 1: Rich(er) client met Javascript: Cloud Computing \u0026amp; Toepassingen - 2020/2021 - Kris Aerts bron 2: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 3: W3Schools\nJavaScript Met HTML en CSS maak je in feite statische webpagina\u0026rsquo;s in de zin dat de inhoud en de vormgeving vast zijn: de HTML en CSS blijven hetzelfde, ook wanneer je de pagina ververst. Als je bijvoorbeeld een klok wil maken waar de tijd live tickt en waar de achtergrond donkerder wordt naargelang de nacht valt, dan heb je nog iets extra nodig buiten HTML en CSS. Elke web-browser-bouwer kan hiervoor vrij een aantal talen kiezen, maar in de praktijk wordt énkel JavaScript (officieel ECMAscript) gebruikt.\nMet JavaScript kan je direct reageren wanneer de gebruiker een veld van dat formulier invult, maar je kan ook veel andere dingen doen afhankelijk van de actie(s) van de gebruiker, tot zelfs volledige games spelen. Javascript zorgt er voor dat je allerlei dynamische effecten in webpagina\u0026rsquo;s kan bekomen en hiermee verkrijg je volwaardige interactiviteit en dynamisch ogende webapplicaties.\nJavaScript wordt dus gebruikt om interactie en dynamische functionaliteit aan je website toe te voegen. Het stelt ontwikkelaars in staat om webpagina\u0026rsquo;s te manipuleren, gebruikersacties te verwerken en te communiceren met servers zonder de pagina opnieuw te laden. JavaScript is veelzijdig en wordt ondersteund door alle belangrijke webbrowsers. Het maakt deel uit van de frontend is vaak niet of minimaal aanwezig op statische websites.\nWat nog belangrijk is om te weten, is dat de JavaScript standaard (ECMAScript) beheerd wordt door Ecma International, vroeger ook wel de European Computer Manufacturers Association (ECMA) genoemd. Een overzicht van de historische details zijn terug te vinden op de JS wikipage.\nWe gaan er vanuit dat je al een basiskennis programmeren bezit. In deze sectie zoomen we vooral in op de interactie die JavaScript ons biedt met HTML-elementen en andere functionaliteiten die specifiek zijn voor het maken van websites.\nJavaScript is geen Java Hoewel de namen vergelijkbaar zijn, zijn JavaScript en Java twee heel verschillende programmeertalen met verschillende toepassingen en eigenschappen. JavaScript is een scripttaal die voornamelijk wordt gebruikt voor het toevoegen van interactieve elementen aan webpagina\u0026rsquo;s en het manipuleren van de DOM (Document Object Model). Het wordt direct in de browser uitgevoerd en is essentieel voor het creëren van dynamische en responsieve webapplicaties. Java daarentegen is een objectgeoriënteerde programmeertaal die vaak wordt gebruikt voor het ontwikkelen van server-side applicaties, mobiele apps (vooral Android), en enterprise-software. Java-code wordt gecompileerd naar bytecode die draait op de Java Virtual Machine (JVM), waardoor het platformonafhankelijk is. Ondanks de naamovereenkomst zijn de syntaxis, het gebruik en de onderliggende architectuur van JavaScript en Java dus fundamenteel verschillend.\nDe namen JavaScript en Java lijken op elkaar vanwege marketing en historische redenen. Toen JavaScript werd ontwikkeld door Brendan Eich bij Netscape in 1995, was Java al een populaire programmeertaal. Netscape zag een kans om mee te liften op het succes van Java en besloot de naam van hun nieuwe scripttaal te veranderen van \u0026ldquo;LiveScript\u0026rdquo; naar \u0026ldquo;JavaScript\u0026rdquo;. Dit zorgde voor verwarring, maar het hielp ook om JavaScript snel bekendheid te geven. [1], [2]\nEen Rich client side experience JavaScript speelt een cruciale rol in de ontwikkeling van Rich Internet Applications (RIA\u0026rsquo;s). RIA\u0026rsquo;s zijn webapplicaties die dezelfde functionaliteit en interactiviteit bieden als desktopapplicaties, maar toegankelijk zijn via een webbrowser. JavaScript maakt het mogelijk om dynamische en interactieve gebruikersinterfaces te creëren door het manipuleren van de DOM, het verwerken van gebruikersinvoer, en het communiceren met servers via AJAX (Asynchronous JavaScript and XML). Hierdoor kunnen RIA\u0026rsquo;s snel reageren op gebruikersacties zonder de hele pagina te vernieuwen, wat resulteert in een vloeiendere en meer responsieve gebruikerservaring. Bekende voorbeelden van RIA\u0026rsquo;s zijn webmaildiensten, online tekstverwerkers, en interactieve dashboards.\nHoe JavaScript toevoegen aan je website Je kan JavaScipt rechtstreeks in je html-document toevoegen via het \u0026lt;script\u0026gt; element. Deze manier wordt echter niet aangeraden. Je kan het \u0026lt;script\u0026gt;-element toevoegen in de sectie head of in de body van je HTML-document. Het is echter aan te raden om scripts onderaan het \u0026lt;body\u0026gt;-element toe te voegen, omdat dit de laadtijd van een webpagina kan verbeteren. [3]\nOm de code leesbaar en herbruikbaar te houden en te maken, kan je er ook voor kiezen om de functie declaraties toch in de head te doen omdat die gebruikt wordt voor algemene definities.\n... \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; //Jouw code komt hier \u0026lt;/script\u0026gt; ... Je kan commentaar schrijven in JS met // zoals in Java of /* */ zoals in CSS\nJavaScipts worden echter beter verzameld in een scripts-directory. Op die manier heb je betere scheiding van verantwoordelijkheden tussen HTML en JavaScript (JS). Je kan ook zeer makkelijk verschillende JS-scripts aanmaken voor je verschillende webpaginas. Je kan hier weer het \u0026lt;script\u0026gt;-element voor gebruiken, maar dit keer laten we de content leeg en verwijzen we met behulp van het scr-attribuut naar de juiste JS-file.\n... \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;./path_to_your/javascript_file.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; ... Zo importeren we ook voorgemaakte libraries van JS of importeren we JS code vanaf een DNS\nEen veelgebruikte directory structuur voor het beheren van al je client-side files ziet er zo uit.\nroot/\r|\r+--- index.html\r| +--- scripts/\r| |\r| +--- main.js\r| ...\r+--- styles/\r|\r+--- main.css\r...\r... Basis JavaScript syntax Variabelen In talen zoals Java, C++, C#, \u0026hellip; moet je elke variabele die je gebruikt, verplicht declareren. In JS moet dit niet: je kan gewoon ter plekke een nieuwe variabele beginnen gebruiken. Moderne stijlgidsen raden dit echter ten zeerste af! In Javascript heeft het echter geen zin om het type van een variabele te declareren omdat een variabele geen type heeft. De variabele kan in het begin een integer bevatten, even later een String, nog wat later een HTML-node, \u0026hellip; Je moet in feite dus alleen aangeven dat je een variabele gaat gebruiken. Tot ECMAScript 2015 kon je dit alleen met de var doen, bv. var getal; Sinds 2017 ondersteunen echter alle moderne browsers ECMAScript 2015 en heb je ook de keuze uit let en const:\nconst gebruik je om aan te geven dat de inhoud van een variabele constant is en dus niet mag veranderen. let is ingevoerd om beter aan te sluiten bij de praktijk van zowat alle andere programmeertalen. De let heeft block scope. Dat betekent dat de let enkel gekend is in de lexicale blok omsloten door accolades. In het voorbeeld hieronder is de i nà de lus niet meer gekend. var heeft function scope. Dat betekent dat de variable \u0026ldquo;gehoist\u0026rdquo; wordt tot het niveau van de functie en dat je een herdeclaratie kan doen die dan direct impact heeft op functieniveau. for (let i=0; i\u0026lt;10; i++) { console.log(i); } console.log(i); // i is unknown here, because i defined with block scope in the loop // VERSUS for (var i=0; i\u0026lt;10; i++) { console.log(i); } console.log(i); // prints 10, because i has function scope. Omdat het gedrag van de let dus perfect overeenstemt met wat we in andere talen gewoon zijn, raden we aan om overal te declareren met let.\nAndere voorbeelden:\nvar x = 1; // met \u0026#39;var\u0026#39; definiëer je een variabele die beschikbaar blijft binnen de functie scope. let y = \u0026#34;let\u0026#34;; // met \u0026#39;let\u0026#39; definiëer je een variabele die beschikbaar blijft binnen de block scope. (bv enkel binnenin die if-statement) const z = \u0026#34;Ik verander niet\u0026#34;; // met \u0026#39;const\u0026#39; definiëer je een variabele die niet meer verandert Dankzij onze kennis van Java en aanverwante talen is beginnen programmeren in Javascript enorm eenvoudig: de syntax met zijn accolades en punt-komma\u0026rsquo;s en de belangrijkste controlestructuren zoals de toekenning, de ++, if-then-else, de for, de while, \u0026hellip; zijn allemaal exact hetzelfde als in Java.\nWil je toch even een herhaling in JavaScript klik dna hier om de code te bekijken 🔽\rTypes // Numbers: let length = 16; let weight = 7.5; // Strings: let color = \u0026#34;Yellow\u0026#34;; let lastName = \u0026#34;Johnson\u0026#34;; // Booleans let x = true; let y = false; // Object: const person = {firstName:\u0026#34;John\u0026#34;, lastName:\u0026#34;Doe\u0026#34;}; const person = { firstName: \u0026#34;John\u0026#34;, lastName : \u0026#34;Doe\u0026#34;, id : 5566, fullName : function() { return this.firstName + \u0026#34; \u0026#34; + this.lastName; } }; // Array object: const cars = [\u0026#34;Saab\u0026#34;, \u0026#34;Volvo\u0026#34;, \u0026#34;BMW\u0026#34;]; // Date object: const date = new Date(\u0026#34;2022-03-25\u0026#34;); If, switch, for, while en try-catch //IF-STATEMENT if (condition1) { // block of code to be executed if condition1 is true } else if (condition2) { // block of code to be executed if the condition1 is false and condition2 is true } else { // block of code to be executed if the condition1 is false and condition2 is false } //SWITCH switch(expression) { case x: // code block break; case y: // code block break; default: // code block } //FOR-LOOP for (let i = 0; i \u0026lt; cars.length; i++) { text += cars[i] + \u0026#34;\u0026lt;br\u0026gt;\u0026#34;; } //WHILE while (condition) { // code block to be executed } //TRY CATCH try { //Block of code to try } catch(err) { //Block of code to handle errors } finally { //Block of code to be executed regardless of the try / catch result } Functies en klassen definiëren //FUNCTIE function(parameter) { //mijn code return result; } //EXAMPLE Class class Car { constructor(name, year) { this.name = name; this.year = year; } age(x) { return x - this.year; } } const myCar = new Car(\u0026#34;Ford\u0026#34;, 2014); Developper tools and logging Om onze JS code te debuggen gaan we veel gebruik maken van de developper tools die beschikbaar zijn in je browser. In google chrome kan je de develepper tools openen met F12. De plaats waar we de meeste tijd gaan doorbrengen in de console. We kunnen namelijk allerhande informatie laten printen naar de console. Dit kan op volgende manieren:\nconsole.log(\u0026#34;Ik ben een normaal log bericht\u0026#34;); console.debug(\u0026#34;Ik ben een debug bericht\u0026#34;); console.error(\u0026#34;Ik ben een error\u0026#34;); console.info(\u0026#34;Ik ben info\u0026#34;); console.warn(\u0026#34;Ik ben een warning\u0026#34;); In de developper console kan je dan ook filteren op de verschillende soorten logberichten.\nWebcontent inspecteren Om informatie over bepaalde content op te vragen moeten we eerst weten hoe we HTML-elementen kunnen opvragen om ze daarna te inspecteren.\nOmdat HTML gebaseerd is op XML, heb je een boomstructuur en kan je relatief – gemakkelijk individuele takken opvragen. Stel dat je binnen het HTML-document twee divs hebt. Met document.div[0] en document.div[1] kan je dan de 1e en 2e div opvragen. De eerste div binnen de tweede div zou dan document.div[1].div[0] zijn. Op analoge wijze kan je eender welke blok opvragen. Deze techniek van het document doorlopen verwijst naar het DOM – Document Object Model.\nHet grote nadeel aan deze techniek is dat je sterk afhankelijk bent van de opbouw van je HTMLpagina, terwijl dit net iets is wat gemakkelijk wijzigt: je gaat blokken toevoegen, verwijderen of op andere plaatsen zetten, of zelfs bijna alles herstructureren. In zo een gevallen zou je al je verwijzingen naar elementen moeten wijzigen in je code en dat is niet houdbaar.\nDaarom is één van de gemakkelijkste manieren om een specifiek element op te vragen gebaseerd op de id:\ndocument.getElementById(\u0026#34;idName\u0026#34;); //returns an HTMLObject Als je een element in een HTML-pagina wilt opvragen, begin je altijd met het refereren naar het document-object.\nOmdat een id uniek is (of moet zijn) geeft deze functie één HTML-node terug. Het is een goed idee om die in een variabele op te slaan (let mijn_html_object = document.getElementById(\u0026quot;idName\u0026quot;);), omdat we dikwijls verschillende dingen met die node gaan doen, bijvoorbeeld de inhoud ervan aanpassen of de stijl op verschillende manieren aanpassen.\nAndere manieren om een element te krijgen is via de klassenaam of de tagnaam. Hier wordt dan echter steeds een lijst greturned op basis van de volgorde in het HTML-bestand.\ndocument.getElementsByClassName(\u0026#34;className\u0026#34;); //returns an HTMLCollection document.getElementsByName(\u0026#34;valueOfAttributeName\u0026#34;); //returns an HTMLCollection document.getElementsByTagname(\u0026#34;tagName\u0026#34;); //returns an HTMLCollection Verder kan je ook CSS-selector syntax gebruiken om een element op te vragen. De querySelector-functie geeft telkens het eerste HTMLObject terug dat voldoet aan de query. De querySelectorAll-functie geeft een NodeList met alle objecten terug die voldoen aan de query.\ndocument.querySelector(\u0026#34;#idName\u0026#34;); //returns an HTMLObject document.querySelector(\u0026#34;.className\u0026#34;); //returns an HTMLObject document.querySelector(\u0026#34;tagName.className:not(.className) tagName[attibuteName=\u0026#39;attibuteValue\u0026#39;]\u0026#34;); //returns an HTMLObject document.querySelectorAll(\u0026#34;#idName\u0026#34;); //returns a NodeList Sommige functies geven een HTMLCollection terug terwijl anderen een NodeList teruggeven. Een NodeList bevat bovenop descendent HTML-elementen ook de stukken tekst die tussen andere eventuele HTML-elementen gebruikt worden. Dit wordt belangrijk bij het opvragen van children (HTMLCollection) of childNodes (NodeList)\nWil je over zo een lijst elementen itereren dan kan je de for(let ... of ...)-syntax gebruiken.\nInformatie over elementen inspecteren Nu we een element kunnen opvragen, kunnen we meer specifieke informatie over dat element inspecteren zoals de waarde van attributen, textcontent, descendents \u0026hellip;\nconsole.log(html_object.innerText); console.log(html_object.textContent); console.log(html_object.innerHTML); console.log(html_object.children); console.log(html_object.childNodes); console.log(html_object.getAttributeNames()); console.log(html_object.getAttribute(\u0026#34;attributeName\u0026#34;)); console.log(html_object.getAttributeNode(\u0026#34;attributeName\u0026#34;)); console.log(html_object.style.fontsize); //Dit werkt niet altijd op deze manier wanneer er specifieke CSS styling werd toegepast. //Gebruik dan volgende methode in de plaats: console.log(window.getComputedStyle(html_object, null).getPropertyValue(\u0026#39;font-size\u0026#39;)); Je kan de console gebruiken om te inspecteren welke attributen een HTML-element allemaal bevat. Bovendien kan je in de documentatie steeds terugvinden wat de return-typen zijn van de verschillende functie. Je kan echter ook zeer snel het type controleren met de JS-functie typeof naamObject.\nWanneer een attribuut of object niet gevonden wordt, wordt meestal undefined gereturned.\nWebcontent manipuleren Je kan nu ook snel content aanpassen door de attribuut waarde te veranderen:\nhtml_object.innerText = \u0026#34;nieweTekst\u0026#34;; html_object.innerText = \u0026#39;\u0026lt;h1 id=\u0026#34;nieuweId\u0026#34; \u0026gt; Nieuwe header \u0026lt;/h1\u0026gt;\u0026#39;; // Je kan dus zelfs dynamisch HTML-elementen toevoegen of verwijderen html_object.style.fontsize = \u0026#34;15px\u0026#34;; html_object.setAttribute(\u0026#34;attributeName\u0026#34;, \u0026#34;newValue\u0026#34;); //Examples voornaamInput_object.setAttribute(\u0026#34;value\u0026#34;, \u0026#34;Arne\u0026#34;); inputCheckbox_object.setAttribute(\u0026#34;checked\u0026#34;, \u0026#34;true\u0026#34;); Gebruiker interactie verwerken Je kan rechtstreeks in een HTML-element functies (of zelfs gewoon JS code) toevoegen om uitgevoerd te worden bij bepaalde acties van de gebruiker.\n\u0026lt;button onclick=\u0026#34;functionName\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;console.log(\u0026#39;button clicked\u0026#39;)\u0026#34;\u0026gt;Click me\u0026lt;/button\u0026gt; Dit doe je echter beter in de JavaScript file zelf door eventListeners te koppelen aan de gewenste HTML-elementen. Een aantal voorbeelden vind je hieronder. Je kan onder andere een listener toevoegen voor click, mouseover, mouseout, mousemove \u0026hellip;\nhtml_object.addEventListener(\u0026#34;click\u0026#34;, functionName); // Je kan ook rechtrstreeks functies definiëren als parameter: html_object.addEventListener(\u0026#34;click\u0026#34;, function(){alert(\u0026#34;I was clicked\u0026#34;);}); // Of door gebruik te maken van de pijl notatie: html_object.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; {alert(\u0026#34;I was clicked\u0026#34;);}); //Je kan ook eventListeners toevoegen aan je window window.addEventListener(\u0026#34;resize\u0026#34;, function() { console.log(\u0026#34;resized window\u0026#34;);}); Event-handlers in JavaScript In plaats van zelf te kiezen wanneer code uitgevoerd wordt, willen we meer controle leggen bij de gebruiker, net zoals het in \u0026ldquo;echte\u0026rdquo; programma\u0026rsquo;s gebeurt: de gebruiker kan hierbij beslissen wanneer er iets moet gebeuren, bv. wanneer hij op een toets drukt, met het gamepad speelt of met de muis een knop indrukt. Dit kunnen we ook in JS doen door code te laten reageren op events, de verzamelnaam voor alle gebeurtenissen die externe \u0026lsquo;gebruikers\u0026rsquo; kunnen veroorzaken.\nEen volledig overzicht van events kan je hier terugvinden\nNiet alle events zijn van toepassing op alle html-elementen, maar welke events op wat van toepassing zijn, is vrij vanzelfsprekend en daar gaan we dus niet dieper op in.\nHet Event object Net zoals in Java weet je op basis van de event-handler wel welk event er plaats vond: een muisklik, een toets ingedrukt, de muis bewogen, \u0026hellip; maar niet welke muistoets, op welke coördinaat, welke toets, \u0026hellip; Willen we dat toch weten, dan moeten we het Event-object gebruiken. Zo een object wordt automatisch aangemaakt in elke event-handler en krijgt daar de naam event. In de praktijk gaan we dit event doorgeven aan de functie die we in de event-handler oproepen, bv.\n//html\r\u0026lt;div id=\u0026#34;naam\u0026#34; onclick=\u0026#34;kijkEven(event); \u0026#34;\u0026gt;blabla\u0026lt;/div\u0026gt; //javascript\rfunction kijkEven(event) { alert(event); } Je kan nu zien dat de browser in zijn alert [object MouseEvent] toont, wat aangeeft dat er zo een object is voor het muisevent, en dat je daarvan verschillende eigenschappen kan opvragen. Soortgelijk heb je ook een KeyEvent e.d. met zijn eigenschappen. Met deze eigenschappen kan je extra informatie opvragen, zoals de positie van de muisklik, de muistoets enzoverder. Dergelijke eigenschappen kan je oproepen door achter de object-naam een punt te typen en dan de naam van de eigenschappen.\nOnline kan je meer info vinden over de verschillende eigenschappen van de events. Op w3schools halen we al een lijst voor de MouseEvent en de KeyboardEvent.\nMet alert, confirm en prompt kan je snel pop-up berichtjes toevoegen De alert() is de MsgBox() van Javascript. Met deze functie kan je een boodschapvenster op het scherm toveren, bv. alert(\u0026quot;Hoe gaat het er mee?\u0026quot;);. Dit is een manier om (vrij opdringerig) met de gebruiker te communiceren, maar het kan ook handig zijn als foutopsporingshulpje. Je kan immers op verschillende plaatsen in je code een alert() zetten, wat een soort \u0026lsquo;pauze\u0026rsquo;-functie verzorgt en waarmee je dus kan zien of en hoe lang je programma correct verloopt.\n//alert alert(\u0026#34;Alert message, click \u0026#39;ok\u0026#39; to continue.\u0026#34;); //confirm var confirmOutput = confirm(\u0026#34;Confirm message, click \u0026#39;ok\u0026#39; or \u0026#39;cancel\u0026#39; to continue.\u0026#34;); console.log(confirmOutput) //prompt var promptOutput = prompt(\u0026#34;The prompt message\u0026#34;); console.log(promptOutput) Forms and the value property Zoals we eerder al zagen, is het formulier de plaats in HTML waar de gebruiker input kan geven over wat er moet gebeuren. In JS gaan we via een event-handler definiëren welke functie uitgevoerd moet worden. Dikwijls gaan we die aan een knop hangen, maar we moeten er dan wel voor opletten dat de knop van het type=\u0026quot;button\u0026quot; is, en NIET van het type=\u0026quot;submit\u0026quot;, want die tweede knop gaat de action uitvoeren en een volledig nieuw document inladen (zie PHP). Bovendien gaan we de formulierelementen met de naam via het attribuut id, bv. id=\u0026quot;tekst\u0026quot; werken. Met dit id en de functie document.getElementById() kunnen we dan de form ophalen. Via de eigenschap .value kan je vervolgens de inhoud van het formulierveld ophalen.\nBij PHP gaat het zo zijn dat je in het formulier een attribuut action moet gebruiken om aan te geven welk script de form moet verwerken. Met het attribuut name kies je een naam die je in PHP kan gebruiken in tegenstelling to JS waar we de naam van opgegeven in de id gebruiken.\nDe optelling en parseInt() De .value property geeft altijd een String terug. Wanneer je dan twee invoerwaarden \u0026lsquo;optelt\u0026rsquo;, wordt de + van de String gebruikt, en dit is, net als in Java, de concatentatie: \u0026ldquo;Johnny\u0026rdquo; + \u0026quot; en \u0026quot; + \u0026ldquo;Marina\u0026rdquo; is dan \u0026ldquo;Johnny en Marina\u0026rdquo;; \u0026ldquo;33\u0026rdquo; + \u0026ldquo;4\u0026rdquo; is \u0026ldquo;334\u0026rdquo;. Het eerste vindt iedereen logisch; het tweede veel minder. Om JS te dwingen de tekst als een getal te beschouwen, moet je de functie parseInt() gebruiken. Deze verwacht als parameter een tekst en zal zijn uiterste best doen om uit die tekst een geheel getal te halen. Wanneer dit niet lukt, zal hij de waarde NaN geven: Not A Number.\nDeze parseInt() geeft dus (meestal) een geheel getal terug. Wil je een niet-geheel getal, dan gebruik je parseFloat().\nOm te controleren of er effectief een getal geparsed kon worden, kan je de functie isNaN(x) gebruiken. Deze geeft een boolean terug met true als de parameter NaN is.\nOm even terug te komen op de optelling: wanneer je getallen en teksten combineert in een optelling, doet Javascript dat van links naar rechts. \u0026quot;De som van \u0026quot; + 3 + \u0026quot; en \u0026quot; + 4 + \u0026quot; is \u0026quot; + 3 + 4 geeft dan \u0026quot;De som van 3 en 4 is 34\u0026quot;, omdat je begint met tekst, daar dan 3 bij optelt, vervolgens \u0026quot; en \u0026ldquo;, 4, en \u0026quot; is \u0026ldquo;. Dit tussenresultaat is \u0026quot;De som van 3 en 4 is\u0026quot;. Hier 3 bij optellen plaatst 3 erachter, en vervolgens komt achter die tekst nog eens 4. \u0026quot;De som van \u0026quot; + 3 + \u0026quot; en \u0026quot; + 4 + \u0026quot; is \u0026quot; + (3 + 4) geeft wel \u0026quot;De som van 3 en 4 is 7\u0026quot;. Haakjes spelen dus een belangrijke rol!\nDe style property Om veranderingen te beklemtonen, kan het interessant zijn om hoofdingen te markeren, lettertypes en/of achtergronden te veranderen, \u0026hellip; In een static page gebruiken we CSS om die vormgeving in te stellen met de property style doen we dat in JavaScript. Deze eigenschap style is dus de directe link tussen CSS en Javascript. In feite is style niet zomaar een eigenschap, maar een echt object. Het heeft zelf verschillende eigenschappen die je stuk voor stuk kan veranderen. Zo zal volgende code de achtergrondkleur van de paragraaf veranderen wanneer je er op klikt.\n\u0026lt;p id=\u0026#34;par\u0026#34; onclick=\u0026#34;veranderParagraaf()\u0026#34;\u0026gt;blablabla\u0026lt;/p\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt; function veranderParagraaf() { var paragraaf = document.getElementById(\u0026#34;par\u0026#34;); paragraaf.style.backgroundColor = \u0026#34;red\u0026#34;; } \u0026lt;/script\u0026gt; Merk op dat het liggend teken in CSS niet gebruikt kan worden in Javascript (omdat het als \u0026lsquo;min\u0026rsquo; geïnterpreteerd zou worden). Daarom wordt het vervangen door een hoofdletter van het volgende woord: background-color is backgroundColor geworden. Een volledig overzicht van de eigenschappen die via het .style-element van JS aangepast kunnen worden, vind je op hier.\nJe kan ook .style.cssText gebruiken en dan de CSS-stijl als string meegeven, bv. element.style.cssText = 'color:red;backgroundColor:yellow';\nDe oude property opvragen Bij het veranderen van de properties kan je in principe de oude waarde hergebruiken door de oude property op te vragen, bv.\nalert(document.getElementById(\u0026#39;par\u0026#39;).style.fontSize); Zo zou je bijvoorbeeld de margin kunnen verdubbelen of het lettertype 10% groter zetten. Spijtig genoeg zijn er twee problemen:\nde waarde die je in je CSS definieert komt niet zomaar in je JS terecht. Het is pas nadat je die met JS veranderd hebt, dat je de correcte waarde terug krijgt. de waarde die je terugkrijgt heeft ook een eenheid, bv. 14px of 200%. Dat zijn tekstwaarden en die kan je niet zomaar vermenigvuldigen met 1,1 of 2 bij optellen. Het eerste probleem kan je oplossen door de waarde met JS te initialiseren op het einde van de pagina, bv\ndocument.getElementById(\u0026#39;par\u0026#39;).style.fontSize = \u0026#39;14px\u0026#39;; Voor het tweede probleem gebruiken we de parseInt van hierboven, doen een bewerking en zetten er dan de de tekst \u0026quot;px\u0026quot; achter, zoals in volgend voorbeeld:\n\u0026lt;p id=\u0026#34;par\u0026#34; onClick=\u0026#34;veranderParagraaf()\u0026#34;\u0026gt;blablabla\u0026lt;/p\u0026gt; \u0026lt;script language=\u0026#34;javascript\u0026#34;\u0026gt; function veranderParagraaf() { var paragraaf = document.getElementById(\u0026#34;par\u0026#34;); paragraaf.fontSize = (parseInt(paragraaf.fontSize) + 3) + \u0026#34;px\u0026#34;; } \u0026lt;/script\u0026gt; De className property Wanneer je met CSS je stijlen in classes hebt ingedeeld kan je ook rechtstreeks de property className van het HTML-element gebruiken. Dan kan je in één keer een heel nieuwe stijl of animaties toekennen aan een specifiek HTML-element, bv.\ndocument.getElementById('par').className = \u0026quot;red\u0026quot;;\nContent wegschrijven naar localstorage of sessionstorage Je kan met JavaScript ook data opslaan in je browser. Dit is steeds een key-value pair waarbij beide waarde Strings zijn. Wegschrijven naar localStorage behoudt de data tussen sessies (sluiten en heropenen van de webpagina). Wegschrijven naar sessionStorage behoudt de data tussen sessies NIET. Maak gebruik van JSON om gemakkelijk data objecten op te slaan:\n//Het op te slagen object in JSON formaat var testObject = { \u0026#39;one\u0026#39;: 1, \u0026#39;two\u0026#39;: 2, \u0026#39;three\u0026#39;: 3 }; //Opslaan in localStorage localStorage.setItem(\u0026#39;testObject\u0026#39;, JSON.stringify(testObject)); //Inladen vanuit localStorage var retrievedObject = localStorage.getItem(\u0026#39;testObject\u0026#39;); var retrievedTestObject = JSON.parse(retrievedObject); //idem voor sessionStorage. Vergeet je objecten dus niet te JSON.stringify-en om ze op te slaan en te parse-n om ze van text terug om te zetten naar waardige JS objecten.\nOpdrachten reeks 1 Breid onderstaand voorbeeld, waar we de invoer in een tekstvak in een alert laten verschijnen, uit tot een formulier met twee velden: een voor de tekst en een voor kleur. Wanneer de gebruiker op de knop klikt, moet de tekst in een tweede div verschijnen met als achtergrondkleur de kleur die gebruiker ingegeven had. // met invoer een html-input element van het type `text`, met als `id` \u0026#34;tekst\u0026#34; function toonInvoer() { var invoer = document.getElementById(\u0026#34;tekst\u0026#34;).value; alert(invoer); } Maak een opteller in HTML en JavaScript: een simpel formulier met 2 tekstvakken waar men een getal moet invullen en een div waar je de uitkomst in zet. Maak een quizje met drie meerkeuzevragen. Als men op het foute antwoord klikt, moet dat antwoord een rode achtergrond krijgen. Klikt men op het juiste antwoord, dan moet dit een groene achtergrond krijgen. Voeg op minstens 2 plaatsen JavaScript toe aan je portfolio website. Ten eerste zorg je ervoor dat wanneer mensen op de \u0026lsquo;submit\u0026rsquo;-knop drukken in je contactenformulier dat je de data van de inputvelden op een correcte manier in een object variabele opslaat. Sla daarna de data op in je sessionStorage door gebruik te maken van JSON. Zorg er ook voor dat wanneer je je contactformulier opent het formulier al is ingevuld met de laatst opgeslagen gegevens indien ze bestaan. Test jezelf Klik hier om jezelf te testen met de online JS quiz van w3schools. Of klik hier voor wat extra oefeningen.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/backend/laravel_code/",
	"title": "Laravel: code and commands",
	"tags": [],
	"description": "",
	"content": "Important commandline commands # Rebuild project composer update --no-scripts # Create new Laravel project laravel new \u0026lt;projectName\u0026gt; # Migrate creation tables php artisan migrate # Start project op poort 8000 php artisan serve # Create new Laravel model with options php artisan make:model # Create just a new Laravel model php artisan make:model \u0026lt;modelName\u0026gt; # Create new Laravel migration php artisan make:migration create_\u0026lt;modelName\u0026gt;withS_table # Create new Laravel controller php artisan make:controller \u0026lt;controllerName\u0026gt; # Create new Laravel seeder php artisan make:seeder \u0026lt;seederName\u0026gt; # Seed db php artisan db:seed --class=\u0026lt;SeederClassName\u0026gt; # Generate a factory for a model php artisan make:factory \u0026lt;FactoryName\u0026gt; --model=\u0026lt;ModelName\u0026gt; Connect to supabase Enable/uncomment extentions via php.ini file:\npdo_pgsql.so pgsql.so Set database default in confid-\u0026gt;database.php:\n'default' =\u0026gt; env('DB_CONNECTION', 'pgsql'), Edit .env file:\nDB_CONNECTION=pgsql DB_URL=\u0026lt;supabase-\u0026gt;project-\u0026gt;configuration-\u0026gt;Database-\u0026gt;connectionString-\u0026gt;URI\u0026gt; DB_PASSWORD=supabasePassword routes/web.php Hier worden alle endpoints van je websites gedeclareerd (Meer info rond: requests, responses):\n// Schrijf de functie die moet uitgevoerd worden rechtstreeks in de `get`-methode // get request naar endpoint \u0026#39;/\u0026#39; Route::get(\u0026#39;/\u0026#39;, function () { // Do stuff //... // Geef een view terug met eventueel extra data die kan gebruikt worden in de blade template return view(\u0026#39;home\u0026#39;, [\u0026#39;posts\u0026#39; =\u0026gt; $posts]); }); // Of je kan een bepaald endpoint doorgeven naar een controller klasse // Post request Route::post(\u0026#39;/postendpoint\u0026#39;, [ExampleController::class, \u0026#39;methodInsideControllerClass\u0026#39;]); // Get request Route::get(...); // Put request Route::put(...); // Update request Route::update(...); // Delete request Route::delete(...); Controller class example: app/Http/Controllers Bundel wat er moet gebeuren wanneer verschillende endpoints gebruikt worden die te maken hebben met bepaalde modellen:\n\u0026lt;?php namespace App\\Http\\Controllers; use App\\Models\\User; use Illuminate\\Http\\Request; use Illuminate\\Validation\\Rule; class ExampleController extends Controller { public function methodInsideControllerClass(){ // do stuff // Return een blade view return view(\u0026#39;home\u0026#39;); } public function redirectExample(Request $request){ // Get the values inside a request and validate them $incomingFields = $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;, Rule::unique(\u0026#39;users\u0026#39;,\u0026#39;name\u0026#39;)], \u0026#39;email\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;], \u0026#39;password\u0026#39; =\u0026gt; [\u0026#39;required\u0026#39;] ]); // show more info on a php object //dd($request) // Create a php obeject $example = Example::create($incomingFields); //Login to session as a user auth()-\u0026gt;login($user); //Logout //auth()-\u0026gt;logout(); // Do een redirect naar een ander endpoint return redirect(\u0026#34;/\u0026#34;); } public function getAllEntriesOfModelInDb(){ // Retrieve all users from the database $examples = Example::all(); // Return the users data (for example, as JSON) return response()-\u0026gt;json($examples); } } Blade views en syntax Blade en views worden dynamisch gemaakt via een aantal specifieke code syntaxen voor if-else statements, for-lussen, importeren van andere views \u0026hellip;\n\u0026lt;!-- template.blade.php --\u0026gt; \u0026lt;h1\u0026gt;{{ phpVariableExample }}\u0026lt;/h1\u0026gt; @include(\u0026#39;otherviewtoinclude\u0026#39;) \u0026lt;div\u0026gt; @yield(\u0026#39;contentToBeIncluded\u0026#39;) \u0026lt;/div\u0026gt; \u0026lt;!-- actualView.blade.php --\u0026gt; @extends(\u0026#39;template\u0026#39;) @section(\u0026#39;body\u0026#39;) \u0026lt;h3\u0026gt;Html to be inserted\u0026lt;/h3\u0026gt; @endsection \u0026lt;!-- forifelseExample.blade.php --\u0026gt; \u0026lt;h1\u0026gt;For loop example:\u0026lt;/h1\u0026gt; @for ($i = 0; $i \u0026lt; 10; $i++) The current value is {{ $i }} @endfor @foreach ($users as $user) \u0026lt;p\u0026gt;This is user {{ $user-\u0026gt;id }}\u0026lt;/p\u0026gt; @endforeach @while (true) \u0026lt;p\u0026gt;I\u0026#39;m looping forever.\u0026lt;/p\u0026gt; @endwhile \u0026lt;h1\u0026gt;If Else example:\u0026lt;/h1\u0026gt; @if (count($records) === 1) I have one record! @elseif (count($records) \u0026gt; 1) I have multiple records! @else I don\u0026#39;t have any records! @endif Avoid Cross-site request forgeries errors in forms met @csrf\n\u0026lt;form action=\u0026#34;/image\u0026#34; method=\u0026#34;POST\u0026#34; enctype=\u0026#34;multipart/form-data\u0026#34;\u0026gt; //IMPORTANT @csrf \u0026lt;input type=\u0026#34;file\u0026#34; name=\u0026#34;image\u0026#34; accept=\u0026#34;image/*\u0026#34;\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Upload\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; Models, migrationtables en factories Bij het aanmaken van modellen kan je rechtstreeks een link maken met de database aan de hand van migration tabellen. Bovendien kan je een factory gebruiken om dummy data aan te brengen in de database via de commandline. Hieronder een voorbeeld:\napp/Models/Test.php \u0026lt;?php namespace App\\Models; use Illuminate\\Database\\Eloquent\\Factories\\HasFactory; use Illuminate\\Database\\Eloquent\\Model; class Test extends Model { // To be able to use a factory use HasFactory; /** * The attributes that are mass assignable. * Namen komen overeen met de kolomnamen in de database * @var array\u0026lt;int, string\u0026gt; */ protected $fillable = [ \u0026#39;testname\u0026#39;, \u0026#39;testemail\u0026#39;, \u0026#39;testnumber\u0026#39;, \u0026#39;testpassword\u0026#39;, ]; } database/migrations/2024_05_06_084113_create_tests_table.php \u0026lt;?php use Illuminate\\Database\\Migrations\\Migration; use Illuminate\\Database\\Schema\\Blueprint; use Illuminate\\Support\\Facades\\Schema; return new class extends Migration { /** * Run the migrations. */ public function up(): void { Schema::create(\u0026#39;tests\u0026#39;, function (Blueprint $table) { $table-\u0026gt;id(); $table-\u0026gt;timestamps(); $table-\u0026gt;string(\u0026#39;testname\u0026#39;); $table-\u0026gt;string(\u0026#39;testemail\u0026#39;); $table-\u0026gt;integer(\u0026#39;testnumber\u0026#39;); $table-\u0026gt;string(\u0026#39;testpassword\u0026#39;); }); } /** * Reverse the migrations. */ public function down(): void { Schema::dropIfExists(\u0026#39;tests\u0026#39;); } }; database/factories/TestFactory.php \u0026lt;?php namespace Database\\Factories; use Illuminate\\Database\\Eloquent\\Factories\\Factory; /** * @extends \\Illuminate\\Database\\Eloquent\\Factories\\Factory\u0026lt;\\App\\Models\\Test\u0026gt; */ class TestFactory extends Factory { /** * Define the model\u0026#39;s default state. * * @return array\u0026lt;string, mixed\u0026gt; */ public function definition(): array { return [ // \u0026#39;testname\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;name, \u0026#39;testname\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;randomElement([\u0026#39;Mark\u0026#39;, \u0026#39;Tom\u0026#39;, \u0026#39;Kevin\u0026#39;]), \u0026#39;testemail\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;numberBetween(1000, 9999), \u0026#39;testnumber\u0026#39; =\u0026gt; $this-\u0026gt;faker-\u0026gt;numberBetween(1000, 9999), \u0026#39;testpassword\u0026#39; =\u0026gt; bcrypt(\u0026#39;password\u0026#39;), ]; } } Seeder Om effectief dummy data in de database te steken gebruiken we seeders: $ php artisan db:seed --class=DatabaseSeeder\ndatabase/seeders/DatabaseSeeder.php \u0026lt;?php namespace Database\\Seeders; use App\\Models\\Test; // use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents; use App\\Models\\User; use Illuminate\\Database\\Seeder; class DatabaseSeeder extends Seeder { /** * Seed the application\u0026#39;s database. */ public function run(): void { // Clear test table in database Test::truncate(); // Call the TestSeeder $this-\u0026gt;call(TestSeeder::class); // Generate 10 test records using the factory Test::factory()-\u0026gt;count(10)-\u0026gt;create(); } } database/seeders/TestSeeder.php \u0026lt;?php namespace Database\\Seeders; use Illuminate\\Database\\Seeder; use Illuminate\\Support\\Facades\\DB; use Illuminate\\Database\\Console\\Seeds\\WithoutModelEvents; class TestSeeder extends Seeder { /** * Run the database seeds. */ public function run(): void { DB::table(\u0026#39;tests\u0026#39;)-\u0026gt;insert([ \u0026#39;testname\u0026#39; =\u0026gt; \u0026#39;Test Name \u0026#39;, \u0026#39;testemail\u0026#39; =\u0026gt; \u0026#39;test@example.com\u0026#39;, \u0026#39;testnumber\u0026#39; =\u0026gt; rand(1000, 9999), \u0026#39;testpassword\u0026#39; =\u0026gt; bcrypt(\u0026#39;password\u0026#39;), \u0026#39;created_at\u0026#39; =\u0026gt; now(), \u0026#39;updated_at\u0026#39; =\u0026gt; now(), ]); } } De public files Waar moet je de files plaatsen die beschikbaar moeten zijn aan de client-side?\n-\u0026gt; in de public folder\npublic\r|-----\u0026gt; assets\r|-------\u0026gt; styles.css\r|-------\u0026gt; script.js\r|-------\u0026gt; example.jpg Inside blade views:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Public Example\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;{{ url(\u0026#39;/assets/styles.css\u0026#39;) }}\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Example\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;{{url(\u0026#39;/assets/example.jpg\u0026#39;)}}\u0026#34; alt=\u0026#34;image\u0026#34; width=\u0026#34;200px\u0026#34;/\u0026gt; \u0026lt;script src=\u0026#34;{{url(\u0026#39;/assets/script.js\u0026#39;)}}\u0026#34; type=\u0026#34;text/javascript\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Laravel sessions In de config/sessions.php kan je bepalen hoe sessionvariabelen opgeslagen moeten worden en bepaalde instellingen voor sessies wijzigen. Je kan bijvoorbeeld instellen hoe lang een sessie kan duren.\nSession::put(\u0026#39;variableName\u0026#39;, $value); // To save variable in a session Session::get(\u0026#39;variableName\u0026#39;); // To get a variable in a session Error Handling zie link\nLogging dd($variable); "
},
{
	"uri": "http://localhost:1313/fsweb-course/extra/",
	"title": "Extra",
	"tags": [],
	"description": "",
	"content": "Zie menu\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/opdracht/",
	"title": "Opdracht",
	"tags": [],
	"description": "",
	"content": "Officiële opgave, zie Toledo\nFSWEB: Projectopdracht 2024-2025 In essentie mag je een eigen concept kiezen voor de website die je voor het project van \u0026ldquo;Full Stack Web Development\u0026rdquo; mag/moet maken. Hierbij gelden volgende minimumvereisten:\nVolg de logica van de HTML-elementen om je website te structureren (bv. één main-sectie, aside voor nevenstaande elementen, \u0026hellip;) Maak minstens de twee volgende pagina’s: Een contact-pagina met pictogrammen voor de verschillende contactmethodes en een formulier om contact met je op te nemen. Een login-pagina. Implementeer hierbij user authentication zodat je als gebruiker een gepersonaliseerde ervaring krijgt (anders heeft de login-pagina niet veel zin). Zorg daarnaast voor minstens 3 andere webpagina’s met een duidelijk verschillend doel. Het is interessanter om duidelijk verschillende soorten pagina’s te maken dan varianten op hetzelfde. Op elke pagina moet een navigatiemenu en een footer staan. Gebruik een aparte CSS-file om je website te stylen. Maak gebruik van een flexbox en/of grid voor het positioneren van de HTML-elementen Voorzie minstens 1 afbeelding, 1 animation en 1 transition. (Waar nuttig) Doe formuliervalidatie voor minstens twee soorten elementen, client- én serverside. Je website moet responsive zijn voor minstens 3 schermgroottes: Een standaard laptop-scherm (14” of 15”, 1920x1080), enkel landscape Een tablet (bv. IPad Air), portrait \u0026amp; landscape Een smartphone (bv. IPhone SE of OnePlus Nord 2T 5G, Android 14): afhankelijk van je eigen toestel kan je kiezen tussen iOS of Android. Implementeer een volledige CRUD (create, read, update en delete), zowel op de backend als met local storage. Integreer op minstens 2 pagina’s informatie die je uit de database aan de serverkant ophaalt. Maak hiervoor gebruik van het EER-schema en de SQL-database die je ontwikkeld hebt in de taak van het opleidingsonderdeel Databases (4290). Indien je niet deelneemt aan dit opleidingsonderdeel kan een database aangeboden worden door de docenten. De Laravel-site moet (vrij) volledig uitgewerkt zijn. De versie in Sveltekit mag beperkter zijn. Met deze minimale vereisten kan je maximaal 16/20 halen voor dit deel van het project. Je bent dus vrij om dit voorstel uit te breiden. Correct uitgewerkte uitbreidingen kunnen voor een hogere score zorgen, maar enkel als aan de minimale vereisten voldaan is. Hou echter rekening met de werklast en met het feit dat je ook nog op de andere opleidingsonderdelen moet slagen.\nBedenk op tijd een voorstel van concept, want voor je database concept kan/moet je een eerste ruw idee hebben voor eind februari. Voor je finale idee krijg je wat langer tijd, nl. tot 26/3/2025. Bezorg je concept per email naar Kris.Aerts@kuleuven.be én Arne.Duyver@kuleuven.be. Ten laatste voor de paasvakantie krijg je dan feedback over dit voorstel. Bespreek in deze email niet alleen het algemene concept, maar ook hoe je de verschillende minimumcriteria wil aanpakken. Tijdens de uitvoering van het project mag je van dit voorstel afwijken, maar we willen vermijden dat je vergeet hieraan te denken tijdens het bedenken van je concept.\nTer inspiratie enkele voorbeelden (waarbij je zelf moet aanvullen wat er precies in zal zitten):\nEen (fake) dashboard voor een smarthome (lichten aan- en uitdoen, verwarming instellen, \u0026hellip;) Een eenvoudige webshop Een online movie database met zoekfunctionaliteit en waar je filmbesprekingen kan toevoegen Een website ter ondersteuning van een online game met cheats en een shop voor skins e.d. Een website voor een universiteit, waar je een studie kan kiezen, of kan in- en uitschrijven voor vakken Een blogplatform waar mensen zelf een blog kunnen opstarten en artikels toevoegen aan een blog, met likes voor die post, \u0026hellip; De opdracht moet je uiteindelijk uitvoeren in 2 verschillende frameworks (Laravel en Svelte/Sveltekit).\nDeel Opdracht Deadline 0. Concept Woensdag 26/03/2025 1. Laravel Het examen (TBD) 2. Svelte/Sveltekit Het examen (TBD) 3. Verslagen Het examen (TBD) Deel 1 en 2 worden mondeling verdedigd, en dit ten laatste op het examen. Vroeger mag ook.\nZowel deel 1 als deel 2 zijn een individueel project. Voor deel 3 (de verslagen) is het voldoende om ze te uploaden via Toledo, maar hier kan wel een vraag over komen op de mondelinge verdediging van het project.\nIndienen deel 1 Zip de rootfolder van je gehele website (heel het Laravel project) en geef het de benaming \u0026ldquo;AchternaamVoornaam_Laravel.zip\u0026rdquo;. Upload dit zipbestand op Toledo.\nIndienen deel 2 Zip de rootfolder van je gehele website (heel het Svelte/Sveltekit project) en geef het de benaming \u0026ldquo;AchternaamVoornaam_Svelte.zip\u0026rdquo;. Upload dit zipbestand op Toledo.\nIndienen deel 3 Upload de twee verslagen (\u0026ldquo;VoornaamAchternaam_verslagWebsite.docx\u0026rdquo; en \u0026ldquo;AchternaamVoornaam_verslagVerschil.docx\u0026rdquo;)\nDeel 1: Laravel Deadline: zie boven\nMaak voor de backend functionaliteit van je project gebruik van Laravel en zijn integratie met de MySQL database.\nIndienen doe je via Toledo; voeg enkel je zip bestand toe. Zie boven.\nDeel 2: SvelteKit Deadline: zie boven\nHerbruik zoveel mogelijk de frontend van je Laravel website uit deel 1, maar maak ze meer reactive met de mogelijkheden die Svelte biedt. Indien je ervoor gekozen hebt om meer te implementeren in je website dan het minimum in deel 1, dan is het NIET nodig deze extraatjes ook in Svelte/Sveltekit te implementeren. Verder moet de website een gelijkwaardige kopie vormen van je project uit deel 1. Op dit deel kan je dus het maximum van de punten behalen door enkel de minimumvereisten van het vorige deel te implementeren.\nIndienen doe je via Toledo; voeg enkel je zip bestand toe. Zie boven.\nDeel 3: Verslagen Deadline: zie boven\nNaast je website dien je een verslag van je website in\u0026mdash;van ongeveer 100 à 200 woorden\u0026mdash;waarin je uitlegt wat de speciale kenmerken van je website zijn (wat-waarom-voor wie). Standaardformuleringen \u0026ldquo;op de login-pagina kan je inloggen\u0026rdquo; mag/moet je laten vallen.\nJe dient verder ook nog een verslag over de verschillende frameworks te maken\u0026mdash;van ongeveer 250 woorden\u0026mdash;waarin je een vergelijking maakt tussen de werking van Laravel en SvelteKit. Wat was makkelijker in het ene framework, wat was moeilijker. Vermeld ook welk framework je meer geneigd bent om in de toekomst te gebruiken en waarom.\nIndienen doe je via Toledo; voeg enkel beide Word-bestanden toe. Zie boven.\nALVAST VEEL SUCCES!\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/responsive_design/",
	"title": "Responsive Design",
	"tags": [],
	"description": "",
	"content": "Starting fresh Start je CSS file met volgende code om enkel \u0026ldquo;ongewenst\u0026rdquo; default gedrag van de browser te overschrijven:\n*, *::before, *::after { box-sizing: border-box; /* Zorgt ervoor dat default padding en border worden meegerekend met breedte en hoogte */ } * { margin: 0; /* Zorgt ervoor dat elk element default geen margin heeft */ padding: 0; /* Zorgt ervoor dat elk element default geen padding heeft */ } Positioning (herhaling) position: absolute; item is verwijderd van het document. top, right, bottom, left unlocked. zet position: relative; in parent om het element relative te positioneren t.o.v. van parent i.p.v. hele document. gebruik z-index om elementen naar voor te halen of naar achter te brengen. (Wanneer je elementen met negatieve waarden niet meer passen op het scherm\u0026lt; verschijnt een scroll bar.Verwijder de scroll bar met overflow: hidden; in parent or body) position: relative; position relative t.o.v. parent en blijven in de normal flow van het document. top, right, bottom, left unlocked. position: static; default, er gebeurt niks. position: fixed; gelijkaardig aan absolute en dus ook verwijderd uit document, maar item volgt nu met het scrollen en altijd relative t.o.v. het html element. (ideaal voor headers and footers) position: sticky; werkt alleen wanneer top of bottom property is meegegeven. blijft enkel sticky binnen de parent. Voorbeeld zie demo 1\nFlexbox Geeft het element 2 assen om elementen op te plaatsen en de default as is horizontaal. Dus onze items worden niet meer boven elkaar getoond maar naast elkaar. Bijvoorbeeld:\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item item1\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item2\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item3\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; .containter { display: flex; /*Verander de main axis: column , row (default)*/ flex-direction: row; /*Hoe moeten de elementen geplaatst worden op de main axis: flex-start (default) , flex-end , center , space-between , space-around , space-evenly*/ justify-content: flex-start; /*Hoe moeten de elementen geplaatst worden op de cross axis: flex-start (default) , flex-end , center , baseline*/ align-items: flex-start; /*Hoe omgaan met overflow: nowrap (default) , wrap*/ flex-wrap: wrap; /*Wrap unlocks align-content zelfde opties als `justify-content`*/ align-content: flex-start; /*Plaats tussen elementen aanpassen: 0px (default)*/ gap: 1em; } .item.item1{ /* flex-grow: 1; */ flex-shrink: 5; /*item 1 shrinkt 5x sneller dan de andere (0 item shrinkt niet)*/ flex-basis: 300px; /*overschrijft breedte item in flex container*/ /*SHORTHAND: grow shrink basis*/ flex: 1; align-self: center; /*overschrijf align van container*/ order: 2; /*verander de volgorde waarin elementen in flex container getoond worden t.o.v. volgorde in html bestand. (beter via HTML aanpassen)*/ } .item.item2{ flex-grow: 2; /*neemt dubbel zoveel plaats in als 1 en 3*/ } .item.item3{ flex-grow: 1; } Flex info bron\rVoorbeeld zie demo 2\nGrid Met behulp van Grid kan je items plaatsen op basis van een soort grid coördinaten: Bijvoorbeeld:\n\u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item item1\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item2\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item3\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; .containter { display: grid; /*Geef het aantal rijen en kolommen mee*/ grid-template-rows: 100px 100px 100px; /*3 rijen van 100px*/ grid-template-columns: 100px 100px 100px; /*3 kolommen van 100px*/ grid-gap: 1em 2em; /*eerst gap tussen rows dan columns*/ /*Naamgeving grid vakken*/ grid-template-areas: \u0026#39;header header header\u0026#39; \u0026#39;vak4 vak5 vak6\u0026#39; \u0026#39;vak7 vak8 vak9\u0026#39;; } /*Items positioneren*/ .item.item1{ grid-row-start: 1; grid-row-end: 2; /*SHORTHAND*/ /* grid-row: 1 / 2; */ grid-column-start: 1; grid-column-end: 4; /*SHORTHAND*/ /* grid-column: 1 / 4; */ /*Via area naam*/ /* grid-area: header; */ z-index: 1; /*to show on top, if overlapping*/ } .item.item2{ grid-row: span 2; grid-column: span 2; } .item.item3 { grid-area: 2 / 3 / 4 / 4; } Extra items toevoegen: Als je extra items toevoegd terwijl je grid al vol is, dan krijg je een impliciet grid dat automatische een rij bijmaakt bijvoorbeeld. Met grid-auto-rows: 100px kan je een grootte van 100px geven aan de automatisch gegenereerde rijen (idem grid-auto-columns). Met de grid-auto-flow property kan je de overflow op columns toepassen i.p.v. rows. Sizing van de templates: Je kan alle gebruikelijke units gebruiken maar ook een extra speciale unit, specifiek voor grids: fr. Deze fractional unit gebruikt dan een fractie van de ruimte beschikbaar door de container. Je kan ook de minmax() functie gebruiken bv. minmax(100px, 3fr) De repeat() function: met de repeat functie kan je snel meerdere waarden herhalen bv repeat(3, 100px) Gridception: Je hoeft je niet te beperken tot 1 grid om je website op te stellen. Je kan een grid onder een grid, in een grid, naast een grid \u0026hellip; gebruiken. Think, trail, error, repeat is hier de boodschap. justify-items en align-items: deze properties werken gelijkaardig aan de flexbox, maar dan binnenin 1 vak van je grid. (stretch = default, start, end, baseline, center) Gebruik de justify-self en align-self properties in de individuele elementen om ze apart te stijlen. -Plaatsing grid binnenin container: Gebruik justify-content en align-content properties van de container. (start , end , center , baseline , space-between , space-around, space-evenly) Grid info bron\rVoorbeeld zie demo 3\nResponsive grid zonder media queries Example non responsive:\n.container { display: grid; grid-template-rows: repeat(4,100px); grid-template-columns: repeat(4, minmax(100px,1fr)); } Example responsive:\n.container { display: grid; grid-template-rows: repeat(4,100px); /*Wrap item to next row if it doesn\u0026#39;t fit*/ grid-template-columns: repeat(auto-fit, minmax(100px,1fr)); } Oefening Hieronder vind je een HTML-bestand inclusief CSS en JavaScript code voor de oefeningen. De gewenste positie en methode is steeds weergegeven als de tekst die je moet stylen. We gebruiken klassen om de gewenste styling te krijgen. De klassenamen zijn al ingevuld in de HTML, je moet dus enkel nog de CSS klassen aanvullen:\nKlik hier om de start code te voor de oefening te zien/verbergen🔽\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Flexbox and Grid Exercises\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; } .exercise { margin-bottom: 20px; padding: 10px; border: 2px dashed gray; } .solution { display: none; margin-top: 10px; } /* Flex Center Exercise */ .flex-center-container { /* TODO */ } .flex-center-box { /* TODO */ } /* Grid Left Half Exercise */ .grid-half-container { /* TODO */ } .grid-half-item { /* TODO */ } /* Flex Space Between Exercise */ .flex-space-between-container { /* TODO */ } .flex-space-between-box { /* TODO */ } /* Flex Column Exercise */ .flex-column-container { /* TODO */ } .flex-column-box { /* TODO */ } /* Grid Three Columns Exercise */ .grid-three-columns-container { /* TODO */ } .grid-three-columns-item { /* TODO */ } /* Grid Auto Rows Exercise */ .grid-auto-rows-container { /* TODO */ } .grid-auto-rows-item { /* TODO */ } .grid-auto-rows-item-large { /* TODO */ } /* Flex Wrap Exercise (New) */ .flex-wrap-container { /* TODO */ } .flex-wrap-box { /* TODO */ } /* Grid Named Areas Exercise (New) */ .grid-named-areas-container { /* TODO */ } .grid-header { /* TODO */ } .grid-sidebar { /* TODO */ } .grid-content { /* TODO */ } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Flexbox and Grid Exercises\u0026lt;/h1\u0026gt; Flex Center Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Center this div using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-center\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-center\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-center-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-center-box\u0026#34;\u0026gt;This div is centered using Flexbox.\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Left Half Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: This div needs to cover the left half of the width of the screen using Grid.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-half\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-half\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-half-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-half-item\u0026#34;\u0026gt;This div covers the left half using Grid.\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Space Between Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Distribute elements evenly using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-space-between\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-space-between\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-box\u0026#34;\u0026gt;Left\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-box\u0026#34;\u0026gt;Right\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Column Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Arrange elements in a vertical column using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-column\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-column\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-column-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-column-box\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-column-box\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Three Columns Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Create a three-column layout using Grid.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-three-columns\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-three-columns\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Auto Rows Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Create a dynamic grid with auto-sized rows.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-auto-rows\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-auto-rows\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item-large\u0026#34;\u0026gt;Item spanning two columns\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Wrap Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Use Flexbox to wrap child elements when overflowing.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-wrap\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-wrap\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 1: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 2: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 3: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 4: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 5: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 6: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Named Areas Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Use Grid named areas to position elements.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-named-areas\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-named-areas\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-named-areas-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-header\u0026#34;\u0026gt;Header: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-sidebar\u0026#34;\u0026gt;Sidebar: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-content\u0026#34;\u0026gt;Content: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function toggleSolution(id) { var solution = document.getElementById(id); solution.style.display = solution.style.display === \u0026#39;none\u0026#39; ? \u0026#39;block\u0026#39; : \u0026#39;none\u0026#39;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Solution: Klik hier om de code te zien/verbergen🔽\r\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Flexbox and Grid Exercises\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; } .exercise { margin-bottom: 20px; padding: 10px; border: 2px dashed gray; } .solution { display: none; margin-top: 10px; } /* Flex Center Exercise */ .flex-center-container { display: flex; justify-content: center; align-items: center; height: 200px; border: 2px solid black; } .flex-center-box { padding: 10px; background-color: lightblue; } /* Grid Left Half Exercise */ .grid-half-container { display: grid; grid-template-columns: 1fr 1fr; height: 200px; border: 2px solid black; } .grid-half-item { background-color: lightgreen; display: flex; align-items: center; justify-content: center; } /* Flex Space Between Exercise */ .flex-space-between-container { display: flex; justify-content: space-between; padding: 10px; border: 2px solid black; } .flex-space-between-box { padding: 10px; background-color: lightblue; } /* Flex Column Exercise */ .flex-column-container { display: flex; flex-direction: column; align-items: center; border: 2px solid black; height: 200px; } .flex-column-box { padding: 10px; background-color: lightblue; margin: 5px; } /* Grid Three Columns Exercise */ .grid-three-columns-container { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; padding: 10px; border: 2px solid black; } .grid-three-columns-item { background-color: lightgreen; display: flex; align-items: center; justify-content: center; } /* Grid Auto Rows Exercise */ .grid-auto-rows-container { display: grid; grid-template-columns: repeat(2, 1fr); grid-auto-rows: minmax(100px, auto); gap: 10px; border: 2px solid black; padding: 10px; } .grid-auto-rows-item { background-color: lightgreen; display: flex; align-items: center; justify-content: center; } .grid-auto-rows-item-large { grid-column: span 2; background-color: lightcoral; display: flex; align-items: center; justify-content: center; } /* Flex Wrap Exercise (New) */ .flex-wrap-container { display: flex; flex-wrap: wrap; gap: 10px; border: 2px solid black; padding: 10px; } .flex-wrap-box { padding: 10px; background-color: lightblue; width: 150px; text-align: center; } /* Grid Named Areas Exercise (New) */ .grid-named-areas-container { display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 100px 100px; grid-template-areas: \u0026#34;header header\u0026#34; \u0026#34;sidebar content\u0026#34;; gap: 10px; border: 2px solid black; padding: 10px; } .grid-header { grid-area: header; background-color: lightyellow; display: flex; align-items: center; justify-content: center; padding: 10px; } .grid-sidebar { grid-area: sidebar; background-color: lightpink; display: flex; align-items: center; justify-content: center; padding: 10px; } .grid-content { grid-area: content; background-color: lightgray; display: flex; align-items: center; justify-content: center; padding: 10px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Flexbox and Grid Exercises\u0026lt;/h1\u0026gt; Flex Center Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Center this div using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-center\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-center\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-center-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-center-box\u0026#34;\u0026gt;This div is centered using Flexbox.\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Left Half Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: This div needs to cover the left half of the width of the screen using Grid.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-half\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-half\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-half-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-half-item\u0026#34;\u0026gt;This div covers the left half using Grid.\u0026lt;/div\u0026gt; \u0026lt;div\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Space Between Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Distribute elements evenly using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-space-between\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-space-between\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-box\u0026#34;\u0026gt;Left\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-space-between-box\u0026#34;\u0026gt;Right\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Column Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Arrange elements in a vertical column using Flexbox.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-column\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-column\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-column-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-column-box\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-column-box\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Three Columns Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Create a three-column layout using Grid.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-three-columns\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-three-columns\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-three-columns-item\u0026#34;\u0026gt;Column 3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Auto Rows Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Create a dynamic grid with auto-sized rows.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-auto-rows\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-auto-rows\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item-large\u0026#34;\u0026gt;Item spanning two columns\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-auto-rows-item\u0026#34;\u0026gt;Item 4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Flex Wrap Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Use Flexbox to wrap child elements when overflowing.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;flex-wrap\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;flex-wrap\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 1: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 2: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 3: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 4: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 5: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;flex-wrap-box\u0026#34;\u0026gt;Box 6: This box will wrap\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Grid Named Areas Exercise \u0026lt;div class=\u0026#34;exercise\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Exercise: Use Grid named areas to position elements.\u0026lt;/p\u0026gt; \u0026lt;button onclick=\u0026#34;toggleSolution(\u0026#39;grid-named-areas\u0026#39;)\u0026#34;\u0026gt;Show Solution\u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;grid-named-areas\u0026#34; class=\u0026#34;solution\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-named-areas-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;grid-header\u0026#34;\u0026gt;Header: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-sidebar\u0026#34;\u0026gt;Sidebar: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;grid-content\u0026#34;\u0026gt;Content: Positioned using Grid named areas\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; function toggleSolution(id) { var solution = document.getElementById(id); solution.style.display = solution.style.display === \u0026#39;none\u0026#39; ? \u0026#39;block\u0026#39; : \u0026#39;none\u0026#39;; } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let\u0026rsquo;s talk about Units Zoals al eerder vermeld bestaan er verschillende soorten units in HTML/CSS, maar waarvoor gebruik je welke unit nu het beste? Hieronder vind je een aantal tips.\nMaar eerst volgt er nog een kleine uitleg over de abstracte unit pixel of px. Er bestaat namelijk wel wat verwarring op het internet over wat hoe groot 1px juist is. Allereerst is het de kleinste unit die je kan gebruiken, maar hoe groot is het juist. We gaan geen exacte meting meegeven maar vertellen je wel waarvoor de pixel dient. De pixelgrootte is verschillend voor verschillende schremgrootten en met goede reden. De grootte van de pixel heeft te maken met de aangeraden kijkafstand ten opzichte van het scherm. De pixel unit zorgt er namelijk voor dat 10px op een klein scherm er even groot zou moeten uitzien als 10px op een groot scherm wanneer je rekening houd met de kijkafstand tot de twee schermen. In werkelijkheid is 10px op het grote scherm groter, maar als je op de correcte afstand van het scherm zit zouden de groottes overeen moeten komen. Dit maakt de pixel de ideale basis unit voor je design.\nSchema werking pixel unit bron\rBrowser default font-size De browser default font-size is 16px voor de meeste moderne browsers. Gebruikers kunnen dit echter aanpassen naar hun accessibility noden. Daarom is het belangrijk specifieke absolute font-sizing te vermijden. Op die manier blijven de accessibility features bruikbaar.\nGebruik daarom steeds de rem unit om font-size mee te geven zodat alles mee scaled met de default waarde gebruikt door browser. We gebruiken rem omdat die steeds relatief is t.o.v. de root font-size. em is scaling t.o.v. de eigen parent maar dit kan snel de leesbaarheid van je code vermideren. De em unit is wel handig om bijvoorbeeld breedte, hoogte, padding, margins \u0026hellip; van een element in te stellen omdat je op die manier je grootte baseerd op font-size van zijn content.\n% vh vw Percentage units zijn altijd relative t.o.v. hun parent. Viewport units zijn altijd relative t.o.v. de schermgrootte. Met vh kan je er bijvoorbeeld voor zorgen dat content steeds 80% van de hoogte van je scherm inneemt (min-height: 80vh;). Let op wanneer je een vw van 100 gebruikt, aangezien de viewport geen rekening houd met scrollbars, zal je bij 100 altijd een zeer kleine \u0026ldquo;irritante\u0026rdquo; horizontale scrollbar krijgen.\nch Een laatste unit die je voor een specifiek geval kan gebruiken is de ch (of character width) unit. Een bepaalde design filosofie stelt dat het een good practice is om textcontainers niet breder te maken dan 60 karakters. Door de styling max-width: 60ch; toe te passen, wordt automatisch deze good practice toegepast.\n99% van de tijd zal je dus enkel met de hierboven vermelde units werken\nVoorbeeld zie demo 4\nViewport To create a responsive website, add the following tag to all your web pages:\n\u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; Deze tag zorgt ervoor dat de viewport, het gebied waarin webinhoud wordt weergegeven, zich aanpast aan de breedte van het apparaat waarop de website wordt bekeken. Door width=device-width in te stellen, wordt de breedte van de viewport gelijk aan de breedte van het apparaat, wat betekent dat de website correct wordt geschaald op verschillende schermformaten, van smartphones tot desktops. De initial-scale=1.0 zorgt ervoor dat de inhoud niet wordt ingezoomd of uitgezoomd bij het laden van de pagina.\nHier is een voorbeeld van een webpagina zonder de viewport-metatag en dezelfde webpagina met de viewport-metatag:\nZonder viewport-metatag (links), met viewport-metatag (rechts) bron\rMedia Queries Media queries in CSS zijn een krachtige tool waarmee je de stijl van een website kunt aanpassen aan verschillende schermgroottes en apparaattypen. Ze maken het mogelijk om specifieke CSS-regels toe te passen afhankelijk van de eigenschappen van het apparaat, zoals de breedte, hoogte, resolutie en oriëntatie van het scherm. Dit is essentieel voor responsive webdesign, waarbij een website er goed uitziet en functioneert op zowel desktops, tablets als smartphones. Door media queries te gebruiken, kun je bijvoorbeeld een andere lay-out toepassen voor mobiele apparaten dan voor grotere schermen, waardoor de gebruikerservaring op elk apparaat geoptimaliseerd wordt.\nMedia query syntax bron\rMedia-type: kies tussen screen, print, speech of all (default) Expression to test: verschil min-width, max-width. Wanneer je je website voor desktop designed dan gebruik je media queries met max-width om ze ook responsive te maken op kleinere viewports. Vice versa als je je website designed voor mobile, gebruik dan min-width op responsive te zijn op grotere viewports. Conditional CSS: style je elementen zoals ze er moeten uitzien op de gequeriede media. Je kan dus voor veel verschillende screen sizes custom CSS schrijven.\nVoorbeeld:\n@media (min-width: 500px){ html { color: red; } } Voorbeeld zie demo 5\nExtra media queries Je kan ook verschillende CSS files gebruiken om de verschillende layouts te definiëren. Via het \u0026lt;link\u0026gt; element kan je dan alle CSS bestanden laten laden bij de verschillende omstandigheden:\n\u0026lt;!-- Load in `portrait-screen.css` when screen is in portrait mode --\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; media=\u0026#34;screen and (orientation: portrait)\u0026#34; href=\u0026#34;portrait-screen.css\u0026#34;/\u0026gt; Je kan hetzelfde breiken met imports in je main.css file:\n@import url(\u0026#34;portrait-screen.css\u0026#34;) screen and (orientation: portrait); Je kan media queries ook inverteren met behulp van het keyword not:\n@media not (orientation: portrait) { ... } Je kan media queries ook combineren met behulp van het keyword and:\n@media screen and (orientation: portrait) and (min-width: 500px) { ... } Voorbeeld zie demo 6\nLijst met veelgebruikte eigenschappen waar media queries op kunnen testen:\nwidth: The viewport width. height: The viewport height. orientation: This capability checks whether a device is portrait or landscape in orientation. aspect-ratio: The ratio of width to height based on the viewport width and height. A 16:9 widescreen display can be written as aspect-ratio: 16/9. color: The number of bits per color component. For example, min-color: 16 will check that the device has 16-bit color. color-index: The number of entries in the color lookup table (the table is how a device changes one set of colors to another) of the device. Values must be numbers and cannot be negative. monochrome: This capability tests how many bits per pixel are in a monochrome frame buffer. The value would be a number (integer), for example, monochrome: 2, and cannot be negative. resolution: This capability can be used to test screen or print resolution; for example, min-resolution: 300dpi. It can also accept measurements in dots per centimeter; for example, min-resolution: 118dpcm. 74 Media Queries and Container Queries scan: This can be either progressive or interlace, features largely particular to TVs. For example, a 720p HD TV (the “p” part of 720p indicates “progressive”) could be targeted with scan: progressive, while a 1080i HD TV (the “i” part of 1080i indicates \u0026ldquo;interlaced\u0026rdquo;) could be targeted with scan: interlace. grid: This capability indicates whether or not the device is grid orbitmap-based. prefers-color-scheme: The theme selected by the user in the browser settings (\u0026ldquo;light\u0026rdquo; or dark). Alle bovenstaande functies, met uitzondering van scan, raster en prefers-color-scheme, kunnen voorafgegaan worden door min- of max- om bereiken te maken.\nWorkflow Workflow versie 1: ontwerp je website voor een specifieke viewport, maar laat zo veel mogelijk aan de defaults van de browser over. Test daarna voor andere viewports en pas eventueel je CSS code aan zodat ze automatisch meer responsive is. Schrijf ten slotte scpecifieke media queries voor die dingen die niet automatisch aangepast kunnen worden.\nWorkflow versie 2: Bepaal op voorhand een aantal media query breakpoints (XL, L, M, S, XS) en maak elk ervan responsive.\nUI design mock ups Wanneer je start aan het ontwerp van je website is HTML-code schrijven niet de eerste stap. In de eerste plaats ga je nadenken wat je wil bereiken met je website, wie je wil bereiken met je website. Al je design keuzes moeten een antwoord geven op die vraag. In de eerste plaats ga je nadenken over wat de content van je website gaat zijn (wat moet er allemaal op mijn website beschikbaar zijn, wat zijn de functionaliteiten). Ten tweede ga je proberen die content op de beste manier te presenteren. Voor deze laatste stap kan je gebruik maken van een UI design tool. Daarmee kan je snel UI mock ups maken die je dan als referentie kan gebruiken bij het implementeren van je website.\nBekende voorbeelden van zo een design tools zijn: Figma (free), Sketch, Invision, Adobe XD, Proto \u0026hellip;\nOther practical responsive tips Gebruik container utility classes om je media queries simpel te structureren. (eventueel met max-width container gelijk aan min-width van query) Snapping vs resizing (eigen keuze) Maak img responsive met display: block ; max-width: 100%; Gebruik min-height i.p.v. height (idem max-width and width) Center met margin-left: auto ; margin-right: auto; Pas geen CSS aan dat niet nodig is. Zo behoud je het default gedrag opgelegd door de browser. Width: auto; werkt soms beter dan width: 100%; Zet de flex-wrap property op wrap, wanneer je een flexbox gebruikt. Vermijd media-queries waar mogelijk. (uitzondering bv. echt grote layout wijzigingen voor andere schermtypes) Easy dark mode example the right way Een goede manier om een darkmode toe te voegen aan je website is gebruik te maken van CSS-variabelen voor je kleurenpallet. Dit is echter niet voldoende aangezien sommige HTML-elementen dan nog niet de correcte styling hebben. Hiervoor moeten we dus ook de color-scheme zelf aanpassen.\nhtml { color-scheme: dark light; } Voorbeeld zie demo 7\nSimple interactive design example Voorbeeld zie demo 8\nOpdrachten Update je portfolio website\nMaak een keuze of je je website ontwikkeld voor desktop first of mobile first. En voeg de clean slate code toe bovenaan je CSS. (Pas nu dan eventuele padding/margins toe op de juiste plaatsen) Bepaal 5 sizes waarvoor je media queries gaat schrijven en maak correct gebruik van min- of max-width op basis van je keuze in opdracht 1. Gebruik flexboxes waar nodig. Gebruik grid om de globale layout van je webpagina te bepalen. Tips voor layouts vind je hier Voorzie een checkbox en gebruik variables, CSS en javascript om een darkmode toe te voegen. Animeer je navigatiebar en voeg en de checkbox toe om te switchen tussen light- en darkmode. Experimenteer met een UI/UX tool. (Maak jouw ideale portfolio website in deze tool. Maak een mock up voor desktop en mobile) Demos Demo 1: positioning Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: positioning\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } :root { --item-size: 100px; } body { height: 200vh; padding: 20px; /* tegen de overflow van item5 */ overflow-x: hidden; } .container { display: grid; grid-template-columns: 1fr 1fr 1fr; row-gap: 20px; gap: 20px; background-color: aquamarine; padding: 10px; /* item 5 nu relative */ /* position: relative; */ } .item { width: var(--item-size); height: var(--item-size); background-color: lightblue; border: solid blue; border-radius: 10%; text-align: center; padding-top: 20px; } /* Item 5 \u0026#34;verwijderd\u0026#34; uit document */ /* .item5 { position: absolute; top: 0px; right: -30px; z-index: 1; } */ /* Item 1 blijft in normal flow document */ /* .item1 { position: relative; top: 10px; left: 20px } */ /* Item 2 fixed doorheen scroll */ /* .item2 { position: fixed; top: 0px; left: 0px; width: 100%; border-radius: 0%; border: none; height: 10vh; } */ /* Item 3 sticky */ /* .item3 { position: sticky; top: 10px; right: 0px; } */ \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item item1\u0026#34;\u0026gt;item1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item2\u0026#34;\u0026gt;item2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item3\u0026#34;\u0026gt;item3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item4\u0026#34;\u0026gt;item4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item5\u0026#34;\u0026gt;item5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item6\u0026#34;\u0026gt;item6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item7\u0026#34;\u0026gt;item7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item8\u0026#34;\u0026gt;item8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item9\u0026#34;\u0026gt;item9\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 2: flexbox Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: flexbox\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } :root { --item-size: 100px; } body { height: 200vh; padding: 20px; } .item { width: var(--item-size); height: var(--item-size); background-color: lightblue; border: solid blue; border-radius: 10%; text-align: center; padding-top: 20px; } .container { background-color: aquamarine; padding: 10px; height: 90vh; display: flex; /* flex-direction: column; */ justify-content: flex-start; align-items: flex-start; /* flex-wrap: wrap; */ align-content: flex-start; /* gap: 1em; */ } .item.item1 { /* font-size: 2em; */ flex-grow: 1; /* flex-shrink: 5; */ /* flex-basis: 300px; */ /* flex: 1; */ /* align-self: center; */ /* order: 2; */ } .item.item2 { flex-grow: 2; } .item.item3 { flex-grow: 1; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item item1\u0026#34;\u0026gt;item1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item2\u0026#34;\u0026gt;item2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item3\u0026#34;\u0026gt;item3\u0026lt;/div\u0026gt; \u0026lt;!-- \u0026lt;div class=\u0026#34;item item4\u0026#34;\u0026gt;item4\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item5\u0026#34;\u0026gt;item5\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item6\u0026#34;\u0026gt;item6\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item7\u0026#34;\u0026gt;item7\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item8\u0026#34;\u0026gt;item8\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item9\u0026#34;\u0026gt;item9\u0026lt;/div\u0026gt; --\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 3: grid Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: grid\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } :root { --item-size: 100px; } body { /* height: 200vh; */ padding: 20px; } .item { background-color: lightblue; border: solid blue; border-radius: 10%; text-align: center; padding-top: 20px; } .container { background-color: aquamarine; padding: 10px; display: grid; grid-template-rows: repeat(3, 100px); grid-template-columns: 100px 100px 100px; /* grid-template-columns: 1fr 20% 1fr; */ /* grid-gap: 1em 2em; */ grid-template-areas: \u0026#39;header header header\u0026#39; \u0026#39;1 1 1\u0026#39; \u0026#39;vak7 vak8 vak9\u0026#39;; } .item.item1 { /* grid-row-start: 1; grid-row-end: 2; */ /* grid-column-start: 1; grid-column-end: 4; */ /* grid-column: 1/4; */ grid-area: header; z-index: 2; } .item.item2 { grid-row: span 2; grid-column: span 2; justify-self: flex-end; align-self: stretch; } .item.item3 { grid-area: 2 / 3 / 4 / 4; /*rowstart, columnstart, rowend, columnend*/ } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item item1\u0026#34;\u0026gt;item1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item2\u0026#34;\u0026gt;item2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item item3\u0026#34;\u0026gt;item3\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 4: units Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: units\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } /* chrome://settings/fonts */ html { /* font-size: 24px; */ } .container { background-color: lightgray; /* margin-left: auto; margin-right: 10px; margin-top: 10px; margin-bottom: 10px; padding: 0.3em; */ /* max-width: 400px; */ } h1 { margin-left: auto; margin-right: auto; margin-bottom: 0.5em; width: fit-content; border: solid purple; font-size: 2rem; } p { border: solid blue; font-size: 1rem; margin-left: auto; margin-right: auto; width: 60ch; /*500px, 80% , 80vw , 60ch*/ } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; Veniam aliqua exercitation dolore eiusmod aliquip et ad nulla aliquip quis. Quis ullamco quis sint proident veniam culpa id tempor pariatur. Ad nisi aliquip magna ullamco sit deserunt elit eu nisi. Irure cillum nostrud nisi exercitation in. Cupidatat ex anim id pariatur aliqua tempor consequat nostrud reprehenderit ad reprehenderit ea nostrud commodo. Voluptate qui nulla ea eiusmod commodo proident. Quis non esse ullamco tempor. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 5: media query Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: media query\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } .container { background-color: lightgray; margin: 10px; padding: 0.3em; max-width: 400px; } h1 { margin-left: auto; margin-right: auto; margin-bottom: 0.5em; width: fit-content; border: solid purple; font-size: 2rem; } p { border: solid blue; font-size: 1rem; margin-left: auto; margin-right: auto; margin-bottom: 1rem; margin-top: 1rem; width: 80%; /*500px, 80% , 80vw , 60ch*/ } img { display: block; margin-left: auto; margin-right: auto; width: 200px; } @media (min-width:636px) { img { position: absolute; top: 75px; right: 60px; width: calc(100% - 420px); max-width: 200px; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt; \u0026lt;img src=\u0026#34;https://logos-world.net/wp-content/uploads/2020/11/GitHub-Logo.png\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Veniam aliqua exercitation dolore eiusmod aliquip et ad nulla aliquip quis. Quis ullamco quis sint proident veniam culpa id tempor pariatur. Ad nisi aliquip magna ullamco sit deserunt elit eu nisi. Irure cillum nostrud nisi exercitation in. Cupidatat ex anim id pariatur aliqua tempor consequat nostrud reprehenderit ad reprehenderit ea nostrud commodo. Voluptate qui nulla ea eiusmod commodo proident. Quis non esse ullamco tempor. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 6: media queries Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: media queries\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } .container { background-color: lightgray; margin: 10px; padding: 0.3em; max-width: 400px; } h1 { margin-left: auto; margin-right: auto; margin-bottom: 0.5em; width: fit-content; border: solid purple; font-size: 2rem; } p { border: solid blue; font-size: 1rem; margin-left: auto; margin-right: auto; margin-bottom: 1rem; margin-top: 1rem; width: 80%; /*500px, 80% , 80vw , 60ch*/ } img { display: block; margin-left: auto; margin-right: auto; width: 200px; } @media (min-width:636px) { .container { max-width: 100%; } .wrapper { display: flex; gap: 10px; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;Header\u0026lt;/h1\u0026gt; \u0026lt;div class=\u0026#34;wrapper\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Veniam aliqua exercitation dolore eiusmod aliquip et ad nulla aliquip quis. Quis ullamco quis sint proident veniam culpa id tempor pariatur. Ad nisi aliquip magna ullamco sit deserunt elit eu nisi. Irure cillum nostrud nisi exercitation in. Cupidatat ex anim id pariatur aliqua tempor consequat nostrud reprehenderit ad reprehenderit ea nostrud commodo. Voluptate qui nulla ea eiusmod commodo proident. Quis non esse ullamco tempor. \u0026lt;/p\u0026gt; \u0026lt;img src=\u0026#34;https://logos-world.net/wp-content/uploads/2020/11/GitHub-Logo.png\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 7: light dark theme Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo: light dark theme\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 10px; } /* :root { --base: lightgrey; --text: black; } @media (prefers-color-scheme: dark) { :root { color-scheme: dark; --base: black; --text: lightgrey; } } */ html { /* color-scheme: light dark; */ } [data-theme=\u0026#34;light\u0026#34;] { color-scheme: light; --base: lightgrey; --text: black; } [data-theme=\u0026#34;dark\u0026#34;] { color-scheme: dark; --base: black; --text: lightgrey; } body { padding: 20px; color: var(--text); background-color: var(--base); } p { height: 200px; width: 400px; overflow-y: scroll; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Dark or light\u0026lt;/h1\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; checked data-theme=\u0026#34;light\u0026#34; name=\u0026#34;themeswitcher\u0026#34; id=\u0026#34;themeswitcher\u0026#34;\u0026gt; Select for darkmode.\u0026lt;br /\u0026gt; Example imput \u0026lt;input type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Irure ex mollit dolore nostrud ut. Consectetur proident velit sint et. Laborum nisi magna culpa ipsum anim tempor do aute minim ut ea ut officia do. Et nulla et voluptate id. Labore nostrud sit amet excepteur laborum laboris dolore reprehenderit veniam ipsum mollit quis dolor.\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;Irure ex mollit dolore nostrud ut. Consectetur proident velit sint et. Laborum nisi magna culpa ipsum anim tempor do aute minim ut ea ut officia do. Et nulla et voluptate id. Labore nostrud sit amet excepteur laborum laboris dolore reprehenderit veniam ipsum mollit quis dolor.\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;Irure ex mollit dolore nostrud ut. Consectetur proident velit sint et. Laborum nisi magna culpa ipsum anim tempor do aute minim ut ea ut officia do. Et nulla et voluptate id. Labore nostrud sit amet excepteur laborum laboris dolore reprehenderit veniam ipsum mollit quis dolor.\u0026lt;br /\u0026gt;\u0026lt;br /\u0026gt;Irure ex mollit dolore nostrud ut. Consectetur proident velit sint et. Laborum nisi magna culpa ipsum anim tempor do aute minim ut ea ut officia do. Et nulla et voluptate id. Labore nostrud sit amet excepteur laborum laboris dolore reprehenderit veniam ipsum mollit quis dolor.\u0026lt;/p\u0026gt; \u0026lt;script\u0026gt; const themeSwitcher = document.querySelector(\u0026#34;#themeswitcher\u0026#34;); themeSwitcher.addEventListener(\u0026#34;change\u0026#34;, () =\u0026gt; { if (themeSwitcher.checked === false) { document.documentElement.setAttribute(\u0026#34;data-theme\u0026#34;, \u0026#34;light\u0026#34;); } if (themeSwitcher.checked === true) { document.documentElement.setAttribute(\u0026#34;data-theme\u0026#34;, \u0026#34;dark\u0026#34;); } }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Demo 8: interactive example Klik hier om de code te zien/verbergen🔽\rIn de demo staat voor het gemak alle HTML, CSS en eventuele JavaScript in één HTML-bestand.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Responsive Design Demo 1: units\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\u0026#34;\u0026gt; \u0026lt;style\u0026gt; *, *::before, *::after { box-sizing: border-box; } * { padding: 0; margin: 0; } @import url(\u0026#39;https://fonts.googleapis.com/css2?family=Open+Sans\u0026amp;display=swap\u0026#39;); :root { --bgColor: #1F3B4D; --darkColor: #24262b; --secColor: #F1F1E6; --highlightColor: #00C6B1; --fontColor: #F0FBFF; --headerheight: 45px; } body { font-family: \u0026#34;Open Sans\u0026#34;, sans-serif; background-color: var(--bgColor); } /* Navigation menu */ nav { height: 90vh; position: fixed; left: 0; top: var(--headerheight); width: 250px; transform: translateX(-250px); transition: transform 250ms ease-in-out; background: linear-gradient(180deg, var(--bgColor) 0%, #009FF5 100%); } nav ul { list-style: none; border-top: 1px solid rgba(255, 255, 255, 0.10); } nav ul li { color: #fff; font-weight: bold; padding: 20px; cursor: pointer; border-bottom: 1px solid rgba(255, 255, 255, 0.10); } nav ul li a { color: #fff; text-decoration: none; } /* Menu checkbox */ input[type=checkbox].openSidebarMenu { transition: all 0.3s; position: fixed; top: 20px; left: 20px; /*style your checkbox*/ -webkit-appearance: none; background-color: var(--highlightColor); padding: 3px 9px; border-radius: 3px; display: inline-block; } input[type=\u0026#34;checkbox\u0026#34;].openSidebarMenu:checked~nav { transform: translateX(0); } /* Styling header */ header { background-color: var(--bgColor); padding: 5px 5px 5px 5px; position: fixed; top: 0; right: 0; left: 0; height: var(--headerheight) !important; display: flex; } .header-right { margin-left: auto; margin-right: 24px; } header a { color: var(--secColor); padding: 4px; font-size: 1rem; border-radius: 8px; margin-right: 3px; margin-top: 3px; } header a:hover { background-color: var(--secColor); color: black; } header a.active { background-color: var(--highlightColor); color: white; } /*Main*/ main { background-color: var(--secColor); border-radius: 4px; min-height: 90vh; color: black; padding: 20px 10px; margin-top: var(--headerheight); margin-left: 24px; margin-right: 24px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;div class=\u0026#34;header-right\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;input type=\u0026#34;checkbox\u0026#34; class=\u0026#34;openSidebarMenu\u0026#34; id=\u0026#34;openSidebarMenu\u0026#34;\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;Arne Duyver\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-info\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Directories\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#34; target=\u0026#34;_self\u0026#34;\u0026gt;\u0026lt;i class=\u0026#34;fa fa-gear\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; Settings\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; \u0026lt;/nav\u0026gt; \u0026lt;main\u0026gt; \u0026lt;h1\u0026gt;My super awesome website\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Reprehenderit labore elit ea nisi exercitation commodo mollit amet proident. Duis quis dolore tempor eiusmod officia nulla adipisicing proident occaecat. Minim laborum consequat quis culpa. Aute labore duis irure ullamco nostrud sint velit. Nulla esse reprehenderit nostrud dolore ex exercitation. \u0026lt;/p\u0026gt; \u0026lt;br /\u0026gt; \u0026lt;p\u0026gt; Eu mollit consequat ullamco esse. Dolore labore Lorem duis velit ipsum ad consectetur ipsum voluptate reprehenderit tempor id aute. Non esse culpa occaecat est proident eu officia dolor reprehenderit. Ipsum irure cupidatat cupidatat consequat magna excepteur cupidatat est. Eiusmod irure ut commodo eiusmod. Ex nulla exercitation commodo adipisicing sunt deserunt ex commodo non. \u0026lt;/p\u0026gt; \u0026lt;/main\u0026gt; \u0026lt;/html\u0026gt; "
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/creative_coding/",
	"title": "Creative coding",
	"tags": [],
	"description": "",
	"content": "Creative Coding met p5js Handige links: p5js.org p5.js webeditor p5.js reference Voor al je andere vragen Art gallery Praktische info: Het doel Creëer een creatief, visueel interessant project in p5.js. Er moet ook verplicht een interactief element inzitten bv. microfoonvolume om iets te bewegen, camera input, muis input, keyboard input \u0026hellip;\nExtra uitleg project Het project bestaat uit het creëren van creatief materiaal aan de hand van p5.js. P5.js is een JavaScript library voor creative coding met de focus op programmeren zo toegankelijk en inclusief mogelijk te maken voor iedereen. Meer info over de hun visie is terug te vinden op hun website: p5js.org. De online web editor voorziet enkele boilerplate html, css en javascript code om snel van start te kunnen gaan met je eigen ideëen.\nDe afbeelding hieronder toont een afbeelding die geproduceerd is met code door gebruik te maken van p5.js.\nVolgende links leiden naar verschillende bronnen om inspiratie op te doen over creative coding:\nThe coding train - youtube kanaal Bees and bombs - creative artwork p5.js 2021 Showcase p5.js examples Creative coding article Een p5 sketch toevoegen aan je website Om een p5 sketch toe te voegen aan je website heb je het volgende nodig:\nVolgende imports in de head van de CDN\u0026rsquo;s van de p5.js source code: \u0026lt;script src=\u0026#34;https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; Voeg volgende CSS toe: html, body { margin: 0; padding: 0; } canvas { display: block; } Voeg ten slotte minstens volgende JavaScript code toe in een \u0026lt;script language=\u0026quot;javascript\u0026quot;\u0026gt;-tag onderaan je body: function setup() { createCanvas(400, 400); } function draw() { background(220); } P5.js workflow FunctionFunctionFunctionFunctionDrawDrawSetupSetupPreloadPreloadp5.js programp5.js p\u0026hellip;Loads assets\nLoads as\u0026hellip;Runs once\nRuns onc\u0026hellip;Loops\nLoops Text is not SVG - cannot display\nProject voorbeelden Hieronder is een voorbeeld terug te vinden van een dagproject dat gemaakt werd in p5 als voorbeeld voor de projectdag van de studenten. De code is terug te vinden\nArt Gallery met projecten van 2022 p5.js showcases Meer voorbeelden van dag projecten: Horse race Hidden poster Simple paint clone Simple paint color based on mouse position "
},
{
	"uri": "http://localhost:1313/fsweb-course/frontend/extra/",
	"title": "Extra",
	"tags": [],
	"description": "",
	"content": "bron 1: Responsive Web Design with HTML5 and CSS - 4th edition - Ben Frain bron 2: W3Schools\nWebbrowser developer tools De developer tools in webbrowsers zijn krachtige hulpmiddelen die web developers helpen bij het bouwen, testen en debuggen van websites. Deze tools zijn ingebouwd in de meeste moderne browsers, zoals Google Chrome, Mozilla Firefox (Firebug), Microsoft Edge en Safari.\nHTML en CSS-structuur inspecteren (en bewerken): Met de Elements of Inspector tab kun je de DOM (Document Object Model) van een pagina bekijken, elementen selecteren en hun stijlen aanpassen. Dit is bijzonder handig voor het snel testen van CSS-aanpassingen en het identificeren van problemen met de layout of styling van een pagina. debuggen van JavaScript-code: De Console tab stelt je in staat om JavaScript-commando\u0026rsquo;s uit te voeren, foutmeldingen te bekijken en logberichten te inspecteren. De Sources tab biedt een volledige debugger waarmee je door je code kunt stappen, breakpoints kunt instellen en de waarden van variabelen kunt controleren. Dit maakt het veel eenvoudiger om fouten in je code op te sporen en op te lossen. Network: Hiermee kan je het netwerkverkeer van je webpagina monitoren. Je kunt zien welke bestanden worden geladen, hoe lang dit duurt en of er fouten optreden bij het laden van resources. Dit is essentieel voor het optimaliseren van de prestaties van je website en het identificeren van eventuele problemen met serververzoeken. het geheugen inspecteren: de Memory tab helpt je bij het opsporen van memory leaks en inefficiënties het bekijken van opgeslagen cookies en andere storage. testen van de toegankelijkheid en responsiviteit van je website. Met de Accessibility tab kun je controleren of je website voldoet aan toegankelijkheidsrichtlijnen, terwijl de Device Mode je in staat stelt om je website te testen op verschillende schermgroottes en apparaten. Dit helpt je om ervoor te zorgen dat je website voor iedereen toegankelijk en gebruiksvriendelijk is, ongeacht het apparaat dat ze gebruiken. Performance: Daarnaast bieden de ontwikkelaarstools ook hulpmiddelen voor het analyseren van de prestaties van je webpagina. Dit stelt je in staat om de laadtijd en rendering van je pagina te meten bijvoorbeeld. . Web development met VSCode Lijst van handige VSCode extensies voor web development:\nHTML CSS Support HTML Boilerplate HTML Snippets Live Server (Five Server) HTML Format JavaScript (ES6) code snippets IntelliSense for CSS class names in HTML Je Eigen Webpagina Hosten op GitHub Pages Je kunt je eigen webpagina eenvoudig hosten op GitHub Pages door een repository aan te maken en je HTML-, CSS- en JavaScript-bestanden daarin te plaatsen. Volg deze stappen om je site live te zetten:\nMaak een GitHub-repository aan Ga naar GitHub, log in en maak een nieuwe repository aan. Je kunt ervoor kiezen om de repository openbaar of privé te maken (let op: GitHub Pages werkt alleen voor privé-repositories met een betaald plan).\nUpload je websitebestanden Voeg je HTML-, CSS- en andere benodigde bestanden toe aan de repository. Dit kan via de GitHub-interface of door de bestanden lokaal te committen en te pushen met Git.\nActiveer GitHub Pages\nGa naar de repository-instellingen (Settings). Scroll naar het gedeelte Pages. Kies de juiste bron (meestal de main of master branch). Selecteer eventueel een specifieke map zoals /docs als je bestanden daar staan. Publiceer en bekijk je site Nadat je GitHub Pages hebt ingeschakeld, genereert GitHub een URL voor je website, meestal in de vorm van: Na enkele minuten is je site live!\nExtra: Frameworks en Geavanceerde Opties Voor een eenvoudige site hoef je alleen een index.html in de root van je repository te plaatsen. Wil je een geavanceerdere site? Dan kun je frameworks zoals Jekyll of Hugo gebruiken, die GitHub Pages direct ondersteunt.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": "Full Stack Web Development Academiejaar 2024\u0026mdash;2025.\nPlanning Klik hier om de planning te zien/verbergen🔽\rnr datum onderwerp 01 wo 12-02-2025 Introductie + HTML 02 vr 14-02-2025 Webbrowser tools + HTML 03 wo 19-02-2025 CSS + Advanced CSS 04 vr 21-02-2025 JavaScript 05 wo 26-02-2025 Responsive Design 06 vr 28-02-2025 More JavaScript + Creative coding (p5) 07 vr 07-03-2025 Example application + Frontend practice 08 ma 10-03-2025 Overview of languages and frameworks 09 wo 12-03-2025 PHP basics 10 vr 14-03-2025 PHP deel 2 11 wo 19-03-2025 The XAMPP stack 12 vr 21-03-2025 Laravel: routes, blade and components 13 wo 26-03-2025 Laravel: MVC 14 vr 28-03-2025 Laravel: Database and storage 15 wo 02-04-2025 Authentication, safety and security 16 vr 04-04-2025 Extra 17 wo 23-04-2025 Svelte + SvelteKit 18 vr 25-04-2025 Svelte + SvelteKit 19 wo 30-04-2025 Svelte + SvelteKit 20 vr 02-05-2025 Svelte + SvelteKit 21 wo 07-05-2025 Svelte + SvelteKit 22 vr 09-05-2025 Svelte + SvelteKit 23 wo 14-05-2025 Svelte + SvelteKit 24 vr 16-05-2025 Svelte + SvelteKit Cursus noties Er worden telkens blokken van 2 uur ingepland voor dit vak. Er zijn geen traditionele hoorcolleges voorzien. Alle notities zijn via deze website te raadplegen (tenzij anders vermeld).\nInhoudsopgave Introductie Frontend: HTML CSS Advanced CSS JavaScript Responsive Design A full example Practice Overview of languages and frameworks Extra Webbrowser tools Web development met VSCode Extra tips and tricks Backend: PHP XAMPP Laravel Svelte + Sveltekit: ZIE TOLEDO Extra: Security Opdracht Syllabus Lesgevers: Coördinerend Verantwoordelijke: prof. dr. Kris Aerts (kris.aerts@kuleuven.be) assistent lesgever: ing. Arne Duyver (arne.duyver@kuleuven.be) Kantoor: Technologiecentrum Diepenbeek, Groep ACRO. Cursusbeschrijving Dit opleidingsonderdeel focust op de hele web workflow. De twee belangrijke delen zijn:\nfrontend backend Voor de backend leer je gebruik maken van de frameworks:\nLaravel Svelte Kit Vereiste voorkennis Basiskennis van programmeren. Doelstellingen Zie ook Studiegids UHasselt\nDe context en het overzicht worden aangereikt in de eerste lessen van dit vak.\nAls rode draad doorheen de oefeningen maak je een eigen portfolio site aan.\nAls practicum wordt een grotere probleemstelling als project uitgewerkt. Alle aan te leren aspecten van full stack web development komen in dit project aan bod. Studenten kunnen facultatief buiten het practicum extra thematische oefeningen oplossen.\nKalender Zie Mytimetable UHasselt.\n"
},
{
	"uri": "http://localhost:1313/fsweb-course/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]